#! /usr/bin/perl -w

##################################################
# Convert stylized Metafont to PostScript Type 1 #
# By Scott Pakin <pakin@uiuc.edu>                #
##################################################

########################################################################
# mf2pt1   							       #
# Copyright (C) 2001 Scott Pakin				       #
#								       #
# This program may be distributed and/or modified under the conditions #
# of the LaTeX Project Public License, either version 1.2 of this      #
# license or (at your option) any later version.		       #
#								       #
# The latest version of this license is in:			       #
#								       #
#    http://www.latex-project.org/lppl.txt			       #
#								       #
# and version 1.2 or later is part of all distributions of LaTeX       #
# version 1999/12/01 or later.					       #
########################################################################

our $VERSION = "1.00";  # mf2pt1 version number
require 5.6.0;	        # I haven't tested mf2pt1 with older Perl versions

use File::Basename;
use Getopt::Long;
use Pod::Usage;
use Math::Trig;
use POSIX qw(floor);
use strict;

# Define some common encoding vectors.
my @standardencoding =
    ((map {"_a$_"} (0..31)),
     qw (space exclam quotedbl numbersign dollar percent ampersand
         quoteright parenleft parenright asterisk plus comma hyphen
         period slash zero one two three four five six seven eight
         nine colon semicolon less equal greater question at A B C D E
         F G H I J K L M N O P Q R S T U V W X Y Z bracketleft
         backslash bracketright asciicircum underscore quoteleft a b c
         d e f g h i j k l m n o p q r s t u v w x y z braceleft bar
         braceright asciitilde),
     (map {"_a$_"} (127..160)),
     qw (exclamdown cent sterling fraction yen florin section currency
         quotesingle quotedblleft guillemotleft guilsinglleft
         guilsinglright fi fl _a176 endash dagger daggerdbl
         periodcentered _a181 paragraph bullet quotesinglbase
         quotedblbase quotedblright guillemotright ellipsis
         perthousand _a190 questiondown _a192 grave acute circumflex
         tilde macron breve dotaccent dieresis _a201 ring cedilla
         _a204 hungarumlaut ogonek caron emdash),
     (map {"_a$_"} (209..224)),
     qw (AE _a226 ordfeminine _a228 _a229 _a230 _a231 Lslash Oslash OE
         ordmasculine _a236 _a237 _a238 _a239 _a240 ae _a242 _a243
         _a244 dotlessi _a246 _a247 lslash oslash oe germandbls _a252
         _a253 _a254 _a255));
my @isolatin1encoding =
    ((map {"_a$_"} (0..31)),
     qw (space exclam quotedbl numbersign dollar percent ampersand
         quoteright parenleft parenright asterisk plus comma minus
         period slash zero one two three four five six seven eight
         nine colon semicolon less equal greater question at A B C D E
         F G H I J K L M N O P Q R S T U V W X Y Z bracketleft
         backslash bracketright asciicircum underscore quoteleft a b c
         d e f g h i j k l m n o p q r s t u v w x y z braceleft bar
         braceright asciitilde),
     (map {"_a$_"} (128..143)),
     qw (dotlessi grave acute circumflex tilde macron breve dotaccent
         dieresis _a153 ring cedilla _a156 hungarumlaut ogonek
         caron space exclamdown cent sterling currency yen brokenbar
         section dieresis copyright ordfeminine guillemotleft
         logicalnot hyphen registered macron degree plusminus
         twosuperior threesuperior acute mu paragraph periodcentered
         cedilla onesuperior ordmasculine guillemotright onequarter
         onehalf threequarters questiondown Agrave Aacute Acircumflex
         Atilde Adieresis Aring AE Ccedilla Egrave Eacute Ecircumflex
         Edieresis Igrave Iacute Icircumflex Idieresis Eth Ntilde
         Ograve Oacute Ocircumflex Otilde Odieresis multiply Oslash
         Ugrave Uacute Ucircumflex Udieresis Yacute Thorn germandbls
         agrave aacute acircumflex atilde adieresis aring ae ccedilla
         egrave eacute ecircumflex edieresis igrave iacute icircumflex
         idieresis eth ntilde ograve oacute ocircumflex otilde
         odieresis divide oslash ugrave uacute ucircumflex udieresis
         yacute thorn ydieresis));
my @ot1encoding =
    qw (Gamma Delta Theta Lambda Xi Pi Sigma Upsilon Phi
        Psi Omega ff fi fl ffi ffl dotlessi dotlessj grave acute caron
        breve macron ring cedilla germandbls ae oe oslash AE OE Oslash
        suppress exclam quotedblright numbersign dollar percent
        ampersand quoteright parenleft parenright asterisk plus comma
        hyphen period slash zero one two three four five six seven
        eight nine colon semicolon exclamdown equal questiondown
        question at A B C D E F G H I J K L M N O P Q R S T U V W X Y
        Z bracketleft quotedblleft bracketright circumflex dotaccent
        quoteleft a b c d e f g h i j k l m n o p q r s t u v w x y z
        endash emdash hungarumlaut tilde dieresis);
my @omsencoding =
qw(minus periodcentered multiply asteriskmath divide diamondmath plusminus
	minusplus circleplus circleminus circlemultiply circledivide circledot
	circlecopyrt openbullet bullet equivasymptotic equivalence reflexsubset
	reflexsuperset lessequal greaterequal precedesequal followsequal similar
	approxequal propersubset propersuperset lessmuch greatermuch precedes
	follows arrowleft arrowright arrowup arrowdown arrowboth arrownortheast
	arrowsoutheast similarequal arrowdblleft arrowdblright arrowdblup
	arrowdbldown arrowdblboth arrownorthwest arrowsouthwest proportional
	prime infinity element owner triangle triangleinv negationslash mapsto
	universal existential logicalnot emptyset Rfractur Ifractur latticetop
	perpendicular aleph A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
	union intersection unionmulti logicaland logicalor turnstileleft
	turnstileright floorleft floorright ceilingleft ceilingright braceleft
	braceright angbracketleft angbracketright bar bardbl arrowbothv
	arrowdblbothv backslash wreathproduct radical coproduct nabla integral
	unionsq intersectionsq subsetsqequal supersetsqequal section dagger
	daggerdbl paragraph club diamond heart spade);
my @omxencoding = qw( parenleftbig parenrightbig bracketleftbig bracketrightbig
	floorleftbig floorrightbig ceilingleftbig ceilingrightbig braceleftbig
	bracerightbig angbracketleftbig angbracketrightbig vextendsingle
	vextenddouble slashbig backslashbig parenleftBig parenrightBig
	parenleftbigg parenrightbigg bracketleftbigg bracketrightbigg
	floorleftbigg floorrightbigg ceilingleftbigg ceilingrightbigg
	braceleftbigg bracerightbigg angbracketleftbigg angbracketrightbigg
	slashbigg backslashbigg parenleftBigg parenrightBigg bracketleftBigg
	bracketrightBigg floorleftBigg floorrightBigg ceilingleftBigg
	ceilingrightBigg braceleftBigg bracerightBigg angbracketleftBigg
	angbracketrightBigg slashBigg backslashBigg slashBig backslashBig
	parenlefttp parenrighttp bracketlefttp bracketrighttp bracketleftbt
	bracketrightbt bracketleftex bracketrightex bracelefttp bracerighttp
	braceleftbt bracerightbt braceleftmid bracerightmid braceex arrowvertex
	parenleftbt parenrightbt parenleftex parenrightex angbracketleftBig
	angbracketrightBig unionsqtext unionsqdisplay contintegraltext
	contintegraldisplay circledottext circledotdisplay circleplustext
	circleplusdisplay circlemultiplytext circlemultiplydisplay summationtext
	producttext integraltext uniontext intersectiontext unionmultitext
	logicalandtext logicalortext summationdisplay productdisplay
	integraldisplay uniondisplay intersectiondisplay unionmultidisplay
	logicalanddisplay logicalordisplay coproducttext coproductdisplay
hatwide hatwider hatwidest tildewide tildewider tildewidest bracketleftBig
bracketrightBig floorleftBig floorrightBig ceilingleftBig ceilingrightBig
braceleftBig bracerightBig radicalbig radicalBig radicalbigg radicalBigg
radicalbt radicalvertex radicaltp arrowvertexdbl arrowtp arrowbt
bracehtipdownleft bracehtipdownright bracehtipupleft bracehtipupright arrowdbltp
arrowdblbt ); 
my @omlencoding = qw( Gamma Delta Theta Lambda Xi Pi Sigma Upsilon Phi Psi Omega
	alpha beta gamma delta epsilon1 zeta eta theta iota kappa lambda mu nu
	xi pi rho sigma tau upsilon phi chi psi omega epsilon theta1 pi1 rho1
	sigma1 phi1 arrowlefttophalf arrowleftbothalf arrowrighttophalf
	arrowrightbothalf arrowhookleft arrowhookright triangleright
	triangleleft zerooldstyle oneoldstyle twooldstyle threeoldstyle
	fouroldstyle fiveoldstyle sixoldstyle sevenoldstyle eightoldstyle
	nineoldstyle period comma less slash greater star partialdiff A B C D E
	F G H I J K L M N O P Q R S T U V W X Y Z flat natural sharp slurbelow
	slurabove lscript a b c d e f g h i j k l m n o p q r s t u v w x y z
	dotlessi dotlessj weierstrass vector tie);

# Define font parameters that the user can override.
my $fontversion = "001.000";
my $creationdate = localtime;
my $comment = "Font converted to Type 1 by mf2pt1, written by Scott Pakin.";
my $familyname;
my $weight = "Medium";
my $fullname;
my $fixedpitch = 0;
my $italicangle;
my $underlinepos = -100;
my $underlinethick = 50;
my $fontname;
my $uniqueID = int(rand(1000000)) + 4000000;
my $designsize;
my $outputfile = "unknown";
my $encoding;

# Define all of our command-line options;
my %options =
    ("fontversion=s" => \$fontversion,       # font_version
     "comment=s"     => \$comment,           # font_comment
     "family=s"      => \$familyname,        # font_family
     "weight=s"      => \$weight,            # font_weight
     "fullname=s"    => \$fullname,          # font_identifier (*)
     "fixedpitch!"   => \$fixedpitch,        # font_fixed_pitch
     "italicangle=f" => \$italicangle,       # font_slant (*)
     "underpos=f"    => \$underlinepos,      # font_underline_position
     "underthick=f"  => \$underlinethick,    # font_underline_thickness
     "name=s"        => \$fontname,          # font_name
     "uniqueid=i"    => \$uniqueID,          # font_unique_id
     "designsize=f"  => \$designsize,        # font_size (*)
     "encoding=s"    => \$encoding);         # font_coding_scheme (*)

# Define all our other global variables.
my $progname = basename $0;
my $mag;
my @fontbbox;
my @charbbox;
my @charfiles;

######################################################################

# Make a first pass over the command-line options, to check for --help.
pod2usage (-exitval => 1, -verbose => 1) if grep /^--help$/, @ARGV;

# Extract the filename from the command line.
my @nonopts = grep !/^-/, @ARGV;
pod2usage (-exitval => 2) if $#nonopts==-1;
my $filebase = fileparse $nonopts[0], ".mf";
my $filenoext = join ("", (fileparse $nonopts[0], ".mf")[1,0]);
my $filedir = dirname($nonopts[0]);
$outputfile = $filebase . ".pt1";

# Make a second pass over the command-line options, to check for unknown
# options.
my $notused;
my @oldARGV = @ARGV;
GetOptions (map {$_ => \$notused} keys %options) || pod2usage(-exitval => 2);
@ARGV = @oldARGV;

# Make our first pass through the input, to set values for various options.
$mag = 100;           # Get a more precise bounding box.
get_bboxes(1);        # This might set $designsize.

# Finally, parse the command line, overriding options set by get_bboxes().
GetOptions (%options) || pod2usage(-exitval => 2);

# Post-process the user-definable parameters.
if (!$designsize) {
    $designsize = ($fontbbox[3]-$fontbbox[1]) / $mag;
    print "The design size seems to be ", int($designsize), " points.\n";
}
$fullname=$filebase if !defined $fullname;
$familyname=$fullname if !defined $familyname;
$italicangle=0 if !defined $italicangle;
$fontname = "$familyname-$weight" if !defined $fontname;
$fontname =~ s/\s//g;
ENCODING:
{
    $encoding=\@standardencoding,  last ENCODING  if (!defined($encoding) ||
                                                      $encoding eq "standard");
    $encoding=\@isolatin1encoding, last ENCODING  if $encoding eq "isolatin1";
    $encoding=\@ot1encoding,       last ENCODING  if $encoding eq "ot1";
    $encoding=\@ot1encoding,       last ENCODING
	if $encoding eq "TeX text";
    $encoding=\@omsencoding,       last ENCODING  if $encoding eq "oms";
    $encoding=\@omsencoding,       last ENCODING
	if $encoding eq "TeX math symbols";
    $encoding=\@omlencoding,       last ENCODING  if $encoding eq "oml";
    $encoding=\@omlencoding,       last ENCODING
	if $encoding eq "TeX math italic";
    $encoding=\@omxencoding,       last ENCODING
	if $encoding eq "TeX math extension";
    die "${0}: unknown encoding \"$encoding\"\n";
}
$fixedpitch = $fixedpitch ? "true" : "false";

# Scale by a factor of 1000/design size.
$mag = 1000.0 / $designsize;
get_bboxes(0);

# Output the font in disassembled format.
open (OUTFILE, ">$outputfile") || die "${progname}: $! ($outputfile)\n";
output_header();
printf OUTFILE "2 index /CharStrings %d dict dup begin\n",
               1+scalar(grep {defined($_)} @charbbox);
output_font_programs();
output_trailer();
close OUTFILE;

# Finish up.
unlink @charfiles;
print "Generated $outputfile\n";

system("t1asm", "-a", $outputfile, "$filebase.pfa");
exit 0;

######################################################################

# Output the font header.
sub output_header
{
    # Show the initial boilerplate.
    print OUTFILE <<"ENDHEADER";
%!FontType-1.0: $fontname $fontversion
%%CreationDate: $creationdate
% Font converted to Type 1 by mf2pt1, written by Scott Pakin.
11 dict begin
/FontInfo 11 dict dup begin
/version ($fontversion) readonly def
/Notice ($comment) readonly def
/FullName ($fullname) readonly def
/FamilyName ($familyname) readonly def
/Weight ($weight) readonly def
/ItalicAngle $italicangle def
/isFixedPitch $fixedpitch def
/UnderlinePosition $underlinepos def
/UnderlineThickness $underlinethick def
end readonly def
/FontName /$fontname def
ENDHEADER

    # If we're not using an encoding that PostScript knows about, then
    # create an encoding vector.
    if ($encoding==\@standardencoding) {
        print OUTFILE "/Encoding StandardEncoding def\n";
    }
    else {
        print OUTFILE "/Encoding 256 array\n";
        print OUTFILE "0 1 255 {1 index exch /.notdef put} for\n";
        foreach my $charnum (0 .. $#{$encoding}) {
            if ($encoding->[$charnum]!~/^_a\d+$/) {
                print OUTFILE "dup $charnum /$encoding->[$charnum] put\n";
            }
        }
        print OUTFILE "readonly def\n";
    }

    # Show the final boilerplate.
    print OUTFILE <<"ENDHEADER";
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/UniqueID $uniqueID def
/FontBBox{@fontbbox}readonly def
currentdict end
currentfile eexec
dup /Private 5 dict dup begin
/RD{string currentfile exch readstring pop}executeonly def
/ND{noaccess def}executeonly def
/NP{noaccess put}executeonly def
ENDHEADER
}


# Use MetaPost to generate one PostScript file per character.  We
# calculate the font bounding box from these characters and store them
# in @fontbbox.  If the input parameter is 1, set other font
# parameters, too.
sub get_bboxes
{
    my @mfargs = ("mpost", "-ini",
	    "\\mode:=localfont; mag:=$mag; input $filenoext");
    my $prettyargs = join (" ", map {/[\\ ]/ ? "'$_'" : $_} @mfargs);
    print "Invoking \"$prettyargs\"\n";
    system (@mfargs) && die "${0}: \"$prettyargs\" failed ($!)\n";
    opendir (CURDIR, ".") || die "${0}: $! ($filedir)\n";
    @charfiles = grep /^$filebase.*\.\d+$/, readdir(CURDIR);
    close CURDIR;
    @fontbbox = (1000000, 1000000, -1000000, -1000000);
    foreach my $psfile (@charfiles) {
        my $havebbox = 0;
        open (PSFILE, "<$psfile") || die "${0}: $! ($psfile)\n";
        while (<PSFILE>) {
	    chop;
            my @tokens = split " ", $_, 4;
            if ($tokens[0] eq "%%BoundingBox:") {
                # Store the MetaPost-produced bounding box, just in case
                # the given font doesn't use beginchar.
                @tokens = ("%", "MF2PT1:", "bbox", join " ", @tokens[1..3]);
                $havebbox--;
            }
            next if $#tokens<1 || $tokens[1] ne "MF2PT1:";
          MF2PT1_CMD:
            {
                # bbox llx lly urx ury -- true character bounding box
                $tokens[2] eq "bbox" && do {
                    my @bbox = split " ", $tokens[3];
                    $fontbbox[0]=$bbox[0] if $bbox[0]<$fontbbox[0];
                    $fontbbox[1]=$bbox[1] if $bbox[1]<$fontbbox[1];
                    $fontbbox[2]=$bbox[2] if $bbox[2]>$fontbbox[2];
                    $fontbbox[3]=$bbox[3] if $bbox[3]>$fontbbox[3];
                    $psfile =~ /\.(\d+)$/;
                    $charbbox[$1] = \@bbox;
                    $havebbox++;
                    last MF2PT1_CMD;
                };

                # If all we want is the bounding box, exit the loop now.
                last MF2PT1_CMD if !$_[0];

                # font_identifier name -- full font name
                $tokens[2] eq "font_identifier" && do {
                    $fullname = $tokens[3];
                    last MF2PT1_CMD;
                };

                # font_size number -- font design size (pt, not bp)
                $tokens[2] eq "font_size" && do {
                    $designsize = $tokens[3] * 72 / 72.27;
                    last MF2PT1_CMD;
                };

                # font_slant number -- italic amount
                $tokens[2] eq "font_slant" && do {
                    $italicangle = 0 + rad2deg (atan(-$tokens[3]));
                    last MF2PT1_CMD;
                };

                # font_coding_scheme string -- font encoding
                $tokens[2] eq "font_coding_scheme" && do {
                    $encoding = $tokens[3];
                    last MF2PT1_CMD;
                };

                # font_version string -- font version number (xxx.yyy)
                $tokens[2] eq "font_version" && do {
                    $fontversion = $tokens[3];
                    last MF2PT1_CMD;
                };

                # font_comment string -- font comment notice
                $tokens[2] eq "font_comment" && do {
                    $comment = join (" ", $tokens[3]);
                    last MF2PT1_CMD;
                };

                # font_family string -- font family name
                $tokens[2] eq "font_family" && do {
                    $familyname = $tokens[3];
                    last MF2PT1_CMD;
                };

                # font_weight string -- font weight (e.g., "Book" or "Heavy")
                $tokens[2] eq "font_weight" && do {
                    $weight = $tokens[3];
                    last MF2PT1_CMD;
                };

                # font_fixed_pitch number -- fixed width font (0=false, 1=true)
                $tokens[2] eq "font_fixed_pitch" && do {
                    $fixedpitch = $tokens[3];
                    last MF2PT1_CMD;
                };

                # font_underline_position number -- vertical underline position
                $tokens[2] eq "font_underline_position" && do {
                    my $dsize = $designsize || 10.0;  # Avoid divide-by-zeroes
                    $underlinepos = int ($tokens[3]*1000/$dsize);
                    last MF2PT1_CMD;
                };

                # font_underline_thickness number -- thickness of underline
                $tokens[2] eq "font_underline_thickness" && do {
                    my $dsize = $designsize || 10.0;  # Avoid divide-by-zeroes
                    $underlinethick = int ($tokens[3]*1000/$dsize);
                    last MF2PT1_CMD;
                };

                # font_name string -- font name
                $tokens[2] eq "font_name" && do {
                    $fontname = $tokens[3];
                    last MF2PT1_CMD;
                };

                # font_unique_id number (as string) -- globally unique font ID
                $tokens[2] eq "font_unique_id" && do {
                    $uniqueID = 0+$tokens[3];
                    last MF2PT1_CMD;
                };
            }
        }
        close PSFILE;
        if (!$havebbox) {
            $psfile =~ /\.(\d+)$/;
            warn "! Warning: No beginchar in character $1; bbox is probably incorrect\n";
        }
    }
}

sub round {
    my $num = shift;
    my $trunc = floor($num);
    my $frac = $num - $trunc;
    die "int function is acting funky: $num -> $frac\n" if $frac < 0 or $frac >= 1;
    return $trunc if $frac < 0.5;
    return $trunc + 1;
}


# Convert ordinary, MetaPost-produced PostScript files into Type 1
# font programs.
sub output_font_programs
{
    # Iterate over all the characters.  We convert each one, line by
    # line and token by token.
    print "Converting PostScript to Type 1 font programs.\n";
    foreach my $psfile (@charfiles) {
        # Initialize the font program.
        $psfile =~ /\.(\d+)$/;
        my $charnum = $1;
        my @fontprog;
        push @fontprog, ("/$encoding->[$charnum] {",
                         sprintf ("%d %d hsbw",
                                  $charbbox[$charnum]->[0],
                                  $charbbox[$charnum]->[2]));
        my ($cpx,$cpy) =
            ($charbbox[$charnum]->[0],0);    # Current point (PostScript)

        # Iterate over every line in the current file.
        open (PSFILE, "<$psfile") || die "${0}: $! ($psfile)\n";
        while (my $oneline=<PSFILE>) {
            next if $oneline=~/^\%/;
            next if $oneline=~/set/;   # Fortunately, never on "good" lines.
            my @arglist;   # Arguments to current PostScript function

            # Iterate over every token in the current line.
          TOKENLOOP:
            foreach my $token (split " ", $oneline) {
                # Number: Round and push on the argument list.
                $token =~ /^[-.\d]+$/ && do {
                    push @arglist, &round($token);
                    next TOKENLOOP;
                };

                # curveto: Convert to vhcurveto, hvcurveto, or rrcurveto.
                $token eq "curveto" && do {
                    my ($dx1, $dy1) = ($arglist[0]-$cpx,
                                       $arglist[1]-$cpy);
                    my ($dx2, $dy2) = ($arglist[2]-$arglist[0],
                                       $arglist[3]-$arglist[1]);
                    my ($dx3, $dy3) = ($arglist[4]-$arglist[2],
                                       $arglist[5]-$arglist[3]);

                    if (!$dx1 && !$dy3) {
			if (!$dy1 && !$dx3) {
			    push @fontprog, "$dx2 $dy2 rlineto";
			} else {
			    push @fontprog, "$dy1 $dx2 $dy2 $dx3 vhcurveto";
			}
                    }
                    elsif (!$dy1 && !$dx3) {
                        push @fontprog, "$dx1 $dx2 $dy2 $dy3 hvcurveto";
                    }
                    else {
                        push @fontprog, "$dx1 $dy1 $dx2 $dy2 $dx3 $dy3 rrcurveto";
                    }
                    ($cpx,$cpy) = ($arglist[4], $arglist[5]);
                    next TOKENLOOP;
                };

                # lineto: Convert to vlineto, hlineto, or rlineto.
                $token eq "lineto" && do {
                    my ($dx, $dy) = ($arglist[0]-$cpx, $arglist[1]-$cpy);
                    if (!$dx) {
                        push @fontprog, $dy . " vlineto";
                    }
                    elsif (!$dy) {
                        push @fontprog, $dx . " hlineto";
                    }
                    else {
                        push @fontprog, "$dx $dy rlineto";
                    }
                    ($cpx,$cpy) = ($arglist[0], $arglist[1]);
                    next TOKENLOOP;
                };

                # moveto: Convert to vmoveto, hmoveto, or rmoveto.
                $token eq "moveto" && do {
                    my ($dx, $dy) = ($arglist[0]-$cpx, $arglist[1]-$cpy);
                    if (!$dx) {
                        push @fontprog, $dy . " vmoveto";
                    }
                    elsif (!$dy) {
                        push @fontprog, $dx . " hmoveto";
                    }
                    else {
                        push @fontprog, "$dx $dy rmoveto";
                    }
                    ($cpx,$cpy) = ($arglist[0], $arglist[1]);
                    next TOKENLOOP;
                };

                # closepath: Output as is.
                $token eq "closepath" && do {
                    push @fontprog, $token;
                    next TOKENLOOP;
                };
            }
        }
        close PSFILE;
        push @fontprog, ("endchar",
                         "} ND");
        print OUTFILE join("\n\t",@fontprog),"\n";
    }
}


# Output the final set of code for the Type 1 font.
sub output_trailer
{
    print OUTFILE <<"ENDTRAILER";
/.notdef {
        0 @{[$fontbbox[2]-$fontbbox[0]]} hsbw
        endchar
        } ND
end
end
readonly put
noaccess put
dup/FontName get exch definefont pop
mark currentfile closefile
cleartomark
ENDTRAILER
}

__END__

######################################################################

=head1 NAME

mf2pt1 - produce a PostScript Type 1 font program from a Metafont source


=head1 SYNOPSIS

mf2pt1
[B<--help>]
[B<--comment>=I<string>]
[B<--designsize>=I<number>]
[B<--encoding>=I<encoding>]
[B<--family>=I<name>]
[B<-->[B<no>]B<fixedpitch>]
[B<--fontversion>=I<MMM.mmm>]
[B<--fullname>=I<name>]
[B<--italicangle>=I<number>]
[B<--name>=I<name>]
[B<--underpos>=I<number>]
[B<--underthick>=I<number>]
[B<--uniqueid>=I<number>]
[B<--weight>=I<weight>]
I<infile>.mf


=head1 WARNING

The B<mf2pt1> Info file is the main source of documentation for
B<mf2pt1>.  This man page is merely a brief summary.


=head1 DESCRIPTION

B<mf2pt1> facilitates producing PostScript Type 1 fonts from a
Metafont source file.  It is I<not>, as the name may imply, an
automatic converter of arbitrary Metafont fonts to Type 1 format.
B<mf2pt1> imposes a number of restrictions on the Metafont input.  If
these restrictions are met, B<mf2pt1> will produce valid Type 1
output.  (Actually, it produces "disassembled" Type 1; the B<t1asm>
program from the B<t1utils> suite will convert this to a true Type 1
font.)

=head2 Usage

    mf2pt1 myfont.mf
    t1asm myfont.pt1 myfont.pfb

=head1 OPTIONS

Font parameters are best specified within a Metafont program.  If
necessary, though, command-line options can override any of these
parameters.  The B<mf2pt1> Info page, the primary source of B<mf2pt1>
documentation, describes the following in greater detail.

=over 4

=item B<--help>

Provide help on B<mf2pt1>'s command-line options

=item B<--comment>=I<string>

Comment, usually a copyright notice

=item B<--designsize>=I<number>

Font design size in points

=item B<--encoding>=I<encoding>

Font encoding, one of C<standard> (default), C<ot1>, or C<isolatin1>

=item B<--family>=I<name>

Font family

=item B<--fixedpitch>, B<--nofixedpitch>

Monospaced or proportional widths

=item B<--fontversion>=I<MMM.mmm>

Major and minor version number

=item B<--fullname>=I<name>

Full font name (family plus modifiers)

=item B<--italicangle>=I<number>

Italic angle, in degrees counterclockwise from vertical

=item B<--name>=I<name>

Font name

=item B<--underpos>=I<number>

Vertical position of the underline, in thousands of the font height

=item B<--underthick>=I<number>

Thickness of the underline, in thousands of the font height

=item B<--uniqueid>=I<number>

Globally unique font identifier

=item B<--weight>=I<weight>

Description of font weight (e.g., ``Heavy'')

=back


=head1 FILES

F<mf2pt1.mem> (which is generated from F<mf2pt1.mp> and F<mfplain.mp>)


=head1 NOTES

As stated in L</"WARNING">, the complete source of documentation for
B<mf2pt1> is the Info page, not this man page.


=head1 SEE ALSO

mf(1), mpost(1), t1asm(1)


=head1 AUTHOR

Scott Pakin, I<pakin@uiuc.edu>
