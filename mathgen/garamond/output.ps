%!PS-Adobe-2.0
%%Pages: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: functions.ps
%!PS-Adobe-2.0

%
% functions.ps
%
% Convenience functions for me, that I think are useful in multiple files.
%

% An inch
/inch { 72 mul } bind def

% Given a dictionary, print its keys. Leaves the dictionary on the stack.
/pkeys {
    dup { pop == } forall
} bind def

% Given a set of pairs 1 2 3 4 5 6 and a number of pairs 3, pulls pairs out and
% leaves 1 3 5 2 4 6 on the stack.
/seppairs {
    2 dict begin
    dup array /Evens exch def
    dup array /Odds exch def
    1 sub -1 0 {	% odd even index
	dup Odds exch	% odd even index Odds index
	5 2 roll	% Odds index odd even index
	Evens exch	% Odds index odd even Evens index
	3 -1 roll	% Odds index odd Evens index odd
	put put
    } for
    Odds aload pop Evens aload pop
    end
} def

% Min/max functions
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def

% Given a number and a base/bounds, determine whether that number falls within
% the base/bounds. Accept all possible values for both base and bounds,
% including negative.
% value base bounds -- bool
% Add a tolerance value to base and bounds, because sometimes the
% floating-point arithmetic is a bit off.
/withinRange {
    dup 0 gt {
	% If bounds is positive. value - base >= 0 and <= bounds.
	3 1 roll sub	% bounds value-base
	dup 0 ge {
	    ge
	} {
	    pop pop false
	} ifelse
    } {
	% If bounds is negative, value - base <= 0 and >= bounds.
	3 1 roll sub
	dup 0 le {
	    le
	} {
	    pop pop false
	} ifelse
    } ifelse
} def

% Append two strings.
/append {
     2 copy length exch length add  % find the length of the new.
     string dup     % string1 string2 string string
     4 2 roll       % string string string1 string2
     2 index 0 3 index
     % string string string1 string2 string 0 string1
     putinterval    % stuff the first string in.
     % string string string1 string2
     exch length exch putinterval
} bind def

% Sorts an array using a comparator function. The specification of the
% comparator function is as follows:
%
% Takes two arguments. Returns TRUE iff the two arguments are in the correct
% order in their presentation; false otherwise.
%
% The array is sorted IN PLACE; that is, its contents will be overwritten. If
% this is not desired behavior, place at the beginning of the call:
%
% dup length array copy
%
% [array] {proc} -- [array]
/bubblesort {
    4 dict begin
	/proc exch def
	/ary exch def
	ary length 2 sub -1 0 {
	    /noexch true def
	    0 1 3 -1 roll {
		/pos exch def
		ary pos get ary pos 1 add get 2 copy proc not {
		    ary exch pos exch put
		    ary exch pos 1 add exch put
		    /noexch false def
		} {
		    pop pop
		} ifelse
	    } for
	    noexch { exit } if
	} for
	ary
    end
} def

% Reverses an array.
/revArray {
    2 dict begin
	/ary exch def
	/len ary length 1 sub def
	0 1 ary length 2 idiv 1 sub {
	    dup len exch sub ary exch get	% i ary[len-i]
	    ary 2 index get			% i ary[len-i] ary[i]
	    ary 3 index len exch sub 3 -1 roll	% i ary[len-i] ary len-i ary[i]
	    put ary 3 1 roll put
	} for
	ary
    end
} def

% Puts an array onto the stack.
/loadArray { aload pop } bind def

% Get the first or last element of an array.
/firstElt { 0 get } bind def
/lastElt { dup length 1 sub get } bind def

% Iterates several times.
% num { proc } --
/iterate {
    /IterateProc exch def
    -1 0 { pop IterateProc } for
} def
%%EndResource
%%BeginResource: points.ps
%!PS-Adobe-2.0

%
% points.ps
%
% Utility functions for points.
%

% Requires: functions.ps

% Given a pair of points, determines the average of them.
% x1 y1 x2 y2 -- x1+x2/2 y1+y2/2
/avgPoint {
    3 -1 roll add 2 div 3 1 roll add 2 div exch
} bind def

% Given a pair of points and a tolerance, determine whether the second point is
% within the tolerance range of the first point. Tolerance should be >= 0.
% x1 y1 x2 y2 tol -- bool
/eqPoint {
    dup 6 2 roll	% tol tol x1 y1 x2 y2
    3 -1 roll		% tol tol x1 x2 y2 y1
    sub	abs		% tol tol x1 x2 |y2-y1|
    3 1 roll		% tol tol dy x1 x2
    sub abs		% tol tol dy dx
    3 1 roll		% tol dx tol dy
    ge			% tol dx bool
    3 1 roll ge and
} bind def

% Given two points, tests them for exact equality.
/equalPoint {
    3 -1 roll eq 3 1 roll eq and
} bind def

% Scales a point by a constant.
% x1 y1 scale -- x y
/scalePoint {
    dup 3 1 roll mul 3 1 roll mul exch
} bind def

% Add two points.
% x1 y1 x2 y2 -- x y
/addPoint {
    3 -1 roll add 3 1 roll add exch
} bind def

% Subtract two points.
/subPoint {
    3 -1 roll exch sub 3 1 roll sub exch
} bind def

% Performs a dot product on 2d points.
/dotProduct {
    3 -1 roll mul 3 1 roll mul add
} bind def

/magnitude {
    dup mul exch dup mul add sqrt
} bind def

% Iterates over a list of points. The point list is a list of 2-element lists.
/ForallPointDict 1 dict def

/forallPoint {
    % We must make a global definition here, because without it we need to store
    % the procedure on a local dictionary (which violates the nature of forall)
    % or leave the procedure on the stack (which violates the nature of forall).
    ForallPointDict exch /fp exch put
    {
        aload pop ForallPointDict /fp get exec
    } forall
} def

% Given a pair of coordinates, get one of them. These are really stupid
% functions, but they make the code easier to read.
/xcoor { dup type /arraytype eq { 0 get } { pop } ifelse } bind def
/ycoor { dup type /arraytype eq { 1 get } { exch pop } ifelse } bind def

% Sorts an array of points by x or y coordinate, ascending.
/sortByX {
    { xcoor exch xcoor exch lt } bubblesort
} def

/sortByY {
    { ycoor exch ycoor exch lt } bubblesort
} def

% Given a user path and a list of points, gives the points that are in the fill
% region of the user path (by inufill).
% [ [points] ] { upath } -- [ [points subset] ]
/pointsInRegion {
    1 dict begin
	cvlit /ThePath exch def
	[ exch {
	    2 copy ThePath inufill {
		[ 3 1 roll ]
	    } {
		pop pop
	    } ifelse
	} forallPoint
	]
    end
} def

% Defines a point.
/defPoint {
    dup type /nametype eq {
	1 index type /arraytype eq { exch aload pop } { 3 1 roll } ifelse
    } if
    2 packedarray cvx def
} def

% If two points are too close for comfort, discard one of them.
% [ [ point list ] ] -- [ [ subset ] ]
/uniquePoints {
    5 dict begin
    /theArray exch def
    /newArray [ ] def
    0 1 theArray length 1 sub {
	theArray exch get loadArray /curPoint defPoint
	/noMatches true def
	0 1 newArray length 1 sub {
	    newArray exch get loadArray curPoint 3 eqPoint {
		/noMatches false def
		exit
	    } if
	} for
	noMatches {
	    /newArray [ newArray aload pop [ curPoint ] ] def
	} if
    } for
    newArray
    end
} def
%%EndResource
%%BeginResource: angles.ps
%!PS-Adobe-2.0

%
% angles.ps
%
% Fun tricks for curve segments and angles.
%

% Requires: functions.ps points.ps

% Given two points, finds the angle in degrees from the horizontal of the line
% defined ending at the first point.
% x1 y1 x2 y2 -- angle of vector from (x1,y1) to (x2, y2)
/lineAngle {
    4 2 roll subPoint exch atan
} bind def

% Given a curveto (8 arguments), get the starting angle. This will be the
% direction the curve starts out traveling.
/curveStartAngle {
    pop pop pop pop
    lineAngle
} def

% Given a curveto (8 arguments), get the ending angle. This will be the
% direction the curve would continue to travel in if it didn't stop.
/curveEndAngle {
    lineAngle 5 1 roll
    pop pop pop pop
} def

% Takes two points p and q and an angle theta. Pretend that an angle was drawn
% with a circular pen of radius r. If the pen had zero radius, then the path
% would have angled at p with an angle of theta. But because the radius is
% greater than zero, the "angle" occurs at point q. This function will return
% the diameter 2*r.
%            /
%           /*
%          / |
%         /  `.   ..*|
%        /    q.-^   | r
%       /       \.   |
%      /theta     ^*.|
%     p----------------
%
/penDiameter {
    2 div sin 5 1 roll subPoint magnitude	% sin(theta/2) l
    1 index mul exch				% l*sin sin
    1 exch sub div				% l*sin / (1-sin) = r
    2 mul
} def

%
% Given a box, defined by lower left and upper right points, and a point and an
% angle, draw the line that fits in the bounding box, goes through that point,
% and travels at that angle.
%
% +------------------+
% | \                |
% |  \               |
% |   \ theta        |
% |    p-------      |
% |     \            |
% |      \           |
% |       \          |
% +------------------+
%
/boundedLine {
    6 dict begin
	{ dup 0 ge { exit } if 180 add } loop
	{ dup 180 lt { exit } if 180 sub } loop
	/Theta exch def
	/Point defPoint
	% If the angle is over 90 degrees, swap left and right for convenience
	2 seppairs 2 copy max /BoxTop exch def min /BoxBot exch def
	2 copy max /BoxRt exch def min /BoxLft exch def
	% First, the upper intersection point.
	% Degenerate cases: point is on top of box and angle is horizontal
	Point ycoor BoxTop eq
	% Point is on side of box and angle is vertical
	90 Theta eq Point xcoor BoxRt eq Point xcoor BoxLft eq or and
	or {
	    Point
	} {
	    Point BoxRt BoxTop lineAngle Theta ge {
		BoxRt Point xcoor sub % horizontal distance
		dup Theta sin mul Theta cos div % vertical distance
		Point addPoint
	    } {
		Point BoxLft BoxTop lineAngle Theta ge {
		    BoxTop Point ycoor sub
		    dup Theta cos mul Theta sin div
		    exch Point addPoint
		} {
		    BoxLft Point xcoor sub % horizontal distance
		    dup Theta sin mul Theta cos div % vertical distance
		    Point addPoint
		} ifelse
	    } ifelse
	} ifelse
	% Lower point.
	% Degenerate cases: point is on top of box and angle is horizontal
	Point ycoor BoxBot eq
	% Point is on side of box and angle is vertical
	90 Theta eq Point xcoor BoxLft eq Point xcoor BoxRt eq or and
	or {
	    Point
	} {
	    /Theta Theta 180 add def
	    Point BoxLft BoxBot lineAngle Theta ge {
		BoxLft Point xcoor sub % horizontal distance
		dup Theta sin mul Theta cos div % vertical distance
		Point addPoint
	    } {
		Point BoxRt BoxBot lineAngle Theta ge {
		    BoxBot Point ycoor sub
		    dup Theta cos mul Theta sin div
		    exch Point addPoint
		} {
		    BoxRt Point xcoor sub % horizontal distance
		    dup Theta sin mul Theta cos div % vertical distance
		    Point addPoint
		} ifelse
	    } ifelse
	} ifelse
    end
} def

% Line bounded by the current path's bounding box. Takes a point and an angle.
/bboxLine {
    pathbbox 5 5 addPoint 4 2 roll 5 5 subPoint 4 2 roll 7 4 roll boundedLine
} def
%%EndResource
%%BeginResource: extremes.ps
%!PS-Adobe-2.0

%
% extremes.ps
%
% Functions for manipulating extremes.
%

2 dict begin

    /pointList [ ] def

    /addPoint {
	[ 3 1 roll ] [ exch pointList aload pop ] /pointList exch def
    } def

currentdict
end
/ExtremesDict exch def


% Now, the public interface

% Given a coordinate pair, test it as an extreme point candidate. Require that
% the point be within the clipping path for consideration.
/cmpPoint {
    ExtremesDict begin
	addPoint
    end
} def

% Clear out the current extreme values.
/resetExtremes {
    ExtremesDict begin
	/pointList [ ] def
    end
} def
%%EndResource
%%BeginResource: intersect.ps
%!PS-Adobe-2.0

%
% intersect.ps
%

% Requires: functions.ps

% Given four absolute points, determine the intersection between the lines.
% x1 y1 x2 y2 x3 y3 x4 y4 -- x y true OR false
% The first line is the one between (x1,y1) and (x2,y2).
/intersect {
    16 dict begin
	4 seppairs
	% Given a pair of x or y coordinates, a parametrization of the line
	% segment defined by them is {x,y} = mt + b, where b is one of the
	% coordinates and m is the difference between the two of them.
	dup /yb1 exch def sub /ym1 exch def
	dup /yb2 exch def sub /ym2 exch def
	dup /xb1 exch def sub /xm1 exch def
	dup /xb2 exch def sub /xm2 exch def
	% It turns out that the solution for the intersection is:
	%      xm2(yb1-yb2) + ym2(xb2-xb1)
	% t1 = ---------------------------
	%           xm1 ym2 - xm2 ym1
	%      xm1(yb1-yb2) + ym1(xb2-xb1)
	% t2 = ---------------------------
	%           xm1 ym2 - xm2 ym1
	%
	% Let's hope we code this right...
	xm1 ym2 mul xm2 ym1 mul sub	% Denominator
	/Denom exch def
	yb1 yb2 sub xb2 xb1 sub		% factor1 factor2
	2 copy
	ym2 mul exch xm2 mul add	% f1 f2 t1-numerator
	/t1num exch def
	ym1 mul exch xm1 mul add	% t2-num
	/t2num exch def
	% If we've got coinciding lines, just take the middle
	t1num 0 eq
	Denom 0 eq
	and {
	    false
	} {
	    % Now we perform range checks. The numerators should each be at
	    % least zero and no more than D.
	    t1num 0 Denom withinRange t2num 0 Denom withinRange and {
		% If true, then we simply plug in t1 into its respective x and y
		% equations to get x and y values.
		t1num Denom div dup
		xm1 mul xb1 add exch
		ym1 mul yb1 add
		true
	    } {
		false
	    } ifelse
	} ifelse
    end
} def


%%EndResource
%%BeginResource: bzfunc.ps
%!PS-Adobe-2.0

%
% bzfunc.ps
%
% Bezier curve functions
%

% Requires: functions.ps

% Our bezier curve functions. Given the x or y coordinates and a t value,
% calculate the value at that point.
% x0 x1 x2 x3 t -- x
/bezierFunc {
    2 dict begin
    /t exch def
    /s 1 t sub def
    t mul t mul t mul			% x3 * t^3
    exch t mul t mul s mul 3 mul add	% x2 * 3t^2(1-t)
    exch s mul s mul t mul 3 mul add	% x1 * 3t(1-t)^2
    exch s mul s mul s mul add		% x0 * (1-t)^3
    end
} def

% Given four points and t, calculate the bezier function at that value t.
% x1 y1 x2 y2 x3 y3 t -- x y
/curvetoPoint {
    dup 5 seppairs	% x0 x1 x2 x3 t y0 y1 y2 y3 t
    bezierFunc 6 1 roll
    bezierFunc exch
} def

% Finds the Bezier extrema.
% x0 x1 x2 x3 -- [ values ]
% where values is, for each extreme, the value t. We assume that x0 = 0.
/bezierExtremes {
    6 dict begin
	% Originally, this function assumed rcurveto semantics, so a would
	% always be 0. But pathforall uses curveto instead. Since we don't want
	% to do all the math all over again, we collect a first, and then make
	% all the values relative. It makes no difference, since the value we
	% return, time, is independent of the relative location of the curve.
	4 -1 roll
	/a exch def

	% Define the four parameters
	/d exch a sub def
	/c exch a sub def
	/b exch a sub def

	% The function is:
	%   3bt(1 - t)^2 + 3ct^2(1 - t) + dt^3
	% Its derivative is (divided by three):
	%   b - 4bt + 2ct + 3bt^2 - 3ct^2 + dt^2
	% Which means the zero point is:
	%       (2b-c) +- sqrt( b(b-c-d) + c^2)
	%   t = -------------------------------
	%               3b - 3c + d
	% (the quadratic formula divided all over by two).
	% Let B=2b-c, det=b(b-c-d)+c^2, and A=3b-3c+d.
	/det b c sub d sub b mul c c mul add def
	/A b 3 mul c 3 mul sub d add def
	/B b 2 mul c sub def

	A 0 eq {
	    % If we've got a straight line on our hands; i.e., A=0
	    % Then the function is:
	    %   0 = 2(c-2b)t + b
	    %   b = 2(2b-c)t
	    %   t = b / 2(2b-c) = b / 2B
	    B 0 eq {
		% If B=0, then no solution, because it's horizontal
		[ ]
	    } {
		% Otherwise it's at -c / -B. Recall we must add a back to the
		% resulting value.
		[
		    b B 2 mul div dup 0 1 withinRange not { pop } if
		]
	    } ifelse
	} {
	    det 0 le {
		% If the determinant is negative, there is no solution. If it's
		% zero leave nothing on the stack, since the point we've found
		% is neither a max nor a min.
		[ ]
	    } {
		% Leave -B[+-]sqrt(det)/2A 2 on the stack. Recall we must add a
		% back to the resulting value.
		[
		    B det sqrt add A div dup 0 1 withinRange not { pop } if
		    B det sqrt sub A div dup 0 1 withinRange not { pop } if
		]
	    } ifelse
	} ifelse
    end
} def

% Returns the two extremes arrays, x extremes and then y extremes.
% x0 x1 x2 x3 y0 y1 y2 y3 -- [ x ] [ y ]
/curvetoExtremes {
    4 seppairs
    bezierExtremes 5 1 roll bezierExtremes exch
} def

%%EndResource
%%BeginResource: bzintc.ps
%!PS-Adobe-2.0

%
% bzintc.ps
%
% Intersection between a Bezier curve and a line.
%
% IMPLEMENTATION NOTE: while we could solve this problem systematically--the
% cubic equation is solvable--the solution is over 2 pages long and takes about
% a minute to derive for Mathematica. Instead, we derive it by picking out
% segments from the Bezier curve and finding intersections via interpolation.
%

% Requires: bzfunc.ps intersect.ps


% Takes curveto arguments (4 points) and two points defining a line segment for
% intersection.
/curvetoIntc {
    10 dict begin
	% Collect up the first four args, the line segment point
	4 packedarray cvx /LineSegment exch def
	% Collect up the next 8 args, the curve definition points
	8 packedarray cvx /CurvePoints exch def
	% Counter for how many intersections we've found. The tryCurveIntc
	% function will leave the points on the stack.
	/NumPoints 0 def
	/ThisDict currentdict def
	/AddPoint {
	    ThisDict dup /NumPoints get 1 add /NumPoints exch put
	} bind def
	/RecursiveDepth 0 def
	0 0.05 1 tryCurveIntc
	NumPoints
    end
} def

% Helper function for rcurvetoIntc. Assumes /LineSegment and /CurvePoints to
% exist in some dictionary. Takes for-like arguments (init, delta, final) on the
% stack, iterates over them, and searches for intersection points.
% init delta final -- points
/tryCurveIntc {
    4 dict begin
	/RecursiveDepth RecursiveDepth 1 add def
	exch dup /Delta exch def exch
	3 copy exch 2 div add exch	% i d f f+d/2 i
	dup /LastT exch def		% Save i to lastT
	CurvePoints 9 -1 roll curvetoPoint
	2 packedarray cvx /LastPoint exch def % Using initial, get Bezier point
	exch pop	% Kill original final; use augmented one
	{	% Begin for loop
	    dup						% t t
	    CurvePoints 9 -1 roll curvetoPoint		% t x y
	    2 copy LastPoint LineSegment intersect {	% t x y x-intc y-intc
		% If we found an intersection
		2 copy LastPoint 0.1 eqPoint RecursiveDepth 1000 gt or {
		    % If the point happens to be close enough to LastPoint, then
		    % we'll consider it good.
		    AddPoint
		    5 2 roll
		} {
		    % If they're too far apart, then we're in trouble. Using
		    % LastT and T, we'll recursively call this function.
		    pop pop			% t x y
		    3 -1 roll dup 4 2 roll	% t t x y
		    % Save off t, x, y, so whatever recursive tryCurveIntc does,
		    % we can replace our old values at the top of the stack.
		    3 packedarray cvx /Save exch def
		    LastT exch 2 copy 		% LastT t LastT t
		    exch sub 5 div		% LastT t (t-LastT)/5
		    exch
		    tryCurveIntc
		    Save
		} ifelse
	    } if					% t x y
	    2 packedarray cvx /LastPoint exch def
	    /LastT exch def
	} for
    end
} def
%%EndResource
%%BeginResource: intcmgr.ps
%!PS-Adobe-2.0

%
% intcmgr.ps
%
% Manages intersections between a line and various curves.
%

% Requires: intersect.ps bzintc.ps functions.ps

10 dict begin

    % Place where points will be stored.
    /pointList [ ] def

    /addPoint {
	[ 3 1 roll ] [ exch pointList aload pop ] /pointList exch def
    } def

    % Line to check for intersections.
    %/intcLine { 0 0 0 0 } def

currentdict
end
/IntersectDict exch def

% Resets the intersection manager.
/resetIntc {
    IntersectDict begin
	/pointList [ ] def
    end
} def

% Sets the line to test against other points.
/setIntcLine {
    IntersectDict begin
	4 packedarray cvx /intcLine exch def
    end
} def

% Basically performs "intersect", but saves the result value.
/intcLines {
    IntersectDict begin
	intcLine intersect {
	    addPoint
	} if
    end
} def

% Performs curvetoIntc, calculates the actual intersection point, and saves the
% result.
/intcCurve {
    IntersectDict begin
	intcLine curvetoIntc -1 1 {
	    pop addPoint
	} for
    end
} def

% Iterates over the points collected.
/intcForall {
    IntersectDict /pointList get exch forallPoint
} def

% Shows the intersection line (without messing up the path)
/showIntcLine {
    IntersectDict begin
    gsave
	newpath intcLine moveto lineto stroke
    grestore
    end
} def
%%EndResource
%%BeginResource: drawing.ps
%!PS-Adobe-2.0

%
% drawing.ps
%
% Drawing stuff.
%

/pointbox {
    gsave
	newpath moveto
	-10 -10 rlineto
	20 0 rlineto
	closepath fill
    grestore
} bind def
/uppointbox {
    gsave
	newpath moveto
	-10 10 rlineto
	20 0 rlineto
	closepath fill
    grestore
} bind def
/rtpointbox {
    gsave
	newpath moveto
	10 -10 rlineto
	0 20 rlineto
	closepath fill
    grestore
} bind def
/ltpointbox {
    gsave
	newpath moveto
	-10 10 rlineto
	0 -20 rlineto
	closepath fill
    grestore
} bind def

/drawHorizLine {
    gsave
	3 setlinewidth
	newpath dup 0 exch moveto
	700 exch lineto
	stroke
    grestore
} def

/drawLine {
    gsave 4 copy moveto lineto stroke grestore
} def


%%EndResource
%%BeginResource: pathtricks.ps
%!PS-Adobe-2.0

%
% pathtricks.ps
%
% Methods for manipulating paths.
%
% All of the functions in this package assume that there is a current path. They
% do not change the path at all.
%

% Requires: extremes.ps intcmgr.ps points.ps drawing.ps angles.ps

% General method for executing pathforall in a useful method such that
% currentpoint works correctly. Expects methods linetoHook, movetoHook,
% curvetoHook, and closepathHook to exist. If startingHook and/or endingHook are
% defined, then they will be executed at the appropriate times.
%
/tracePath {
    10 dict begin	% Save the starting X and Y; also makes hooks local
    gsave
    /startingHook where {
	pop startingHook
    } if
    {		% moveto
	2 copy mark 3 1 roll movetoHook cleartomark
	/startPoint defPoint
	/curPoint startPoint defPoint
    } {		% lineto
	2 copy mark 3 1 roll linetoHook cleartomark
	/curPoint defPoint
    } {		% curveto
	6 copy mark 7 1 roll curvetoHook cleartomark
	/curPoint defPoint
	pop pop pop pop
    } {		% closepath
	mark startPoint linetoHook cleartomark
	mark closepathHook cleartomark	% just in case
	/curPoint startPoint defPoint
    } pathforall
    /endingHook where {
	pop endingHook
    } if
    grestore
    end
} def

%
% INTERSECTIONS
%

% Dictionary defining hooks for line intersections. It is expected that the user
% of this dictionary initialize the line for the intersection manager.
5 dict begin
    /movetoHook { pop pop } def
    /linetoHook {
	curPoint intcLines
    } def
    /curvetoHook {
	curPoint 8 2 roll
	intcCurve
    } def
    /closepathHook { } def
currentdict
end
/PathIntcDict exch def

% Given the points for a line, determine an intersection.
/pathLineIntc {
    resetIntc
    PathIntcDict begin
	setIntcLine
	showIntcLine
	tracePath
    end
    IntersectDict /pointList get
    uniquePoints
} def

% EXTREME VALUES

5 dict begin
    /movetoHook { pop pop } def
    /linetoHook {
	curPoint cmpPoint
	cmpPoint
    } def
    /curvetoHook {
	2 copy cmpPoint
	curPoint cmpPoint
	curPoint 8 2 roll
	8 packedarray cvx /points exch def
	points curvetoExtremes
	{ points 9 -1 roll curvetoPoint cmpPoint } forall
	{ points 9 -1 roll curvetoPoint cmpPoint } forall
    } def
    /closepathHook { } def
currentdict
end
/PathExtrDict exch def

% Determine the extremes.
/pathExtremes {
    resetExtremes
    PathExtrDict begin
	tracePath
    end
    ExtremesDict /pointList get
} def


% Direction of fill
%
% Given an array of points and a point offset, extracts those points that, when
% the offset is applied to them, 
% [ point array ] offx offy -- [ point array subset ]
/offsetInFill {
    1 dict begin
	2 packedarray cvx /offset exch def
	[ exch
	{
	    2 copy offset addPoint infill {
		[ 3 1 roll ]
	    } {
		pop pop
	    } ifelse
	} forallPoint
	]
    end
} def

% Midpoint of the current path.
/pathMidpoint {
    pathbbox 2 seppairs add 2 div 3 1 roll add 2 div exch
} def

% Upper right coordinate of current path.
/pathUR {
    pathbbox 4 2 roll pop pop
} def

% Path lower left coordinate.
/pathLL {
    pathbbox pop pop
} def

% Vertical line that splits the bbox in half. Leaves the coordinates on the
% stack.
/vertSplitLine {
    dup pathUR xcoor mul	% frac frac*llx
    exch 1 exch sub		% frac*llx 1-frac
    pathLL xcoor mul		% frac*llx (1-frac)*urx
    add dup			% avgX avgX
    pathLL ycoor 10 sub exch
    pathUR ycoor 10 add
} def
/horizSplitLine {
    dup pathUR ycoor mul	% frac frac*lly
    exch 1 exch sub		% frac*lly 1-frac
    pathLL ycoor mul		% frac*lly (1-frac)*ury
    add				% avgY avgY
    pathLL xcoor 10 sub exch
    pathUR xcoor 10 add 1 index
} def

/vertLineThrough {
    xcoor dup
    pathLL ycoor 10 sub exch
    pathUR ycoor 10 add
} def
/horizLineThrough {
    ycoor
    pathLL xcoor 10 sub exch
    pathUR xcoor 10 add 1 index
} def

% Show a letter.
/letterPath {
    newpath 0 0 moveto true charpath
    gsave stroke grestore
} bind def



%
% ANGLE AT A POINT IN THE PATH
%
6 dict begin
/movetoHook { pop pop } def
/linetoHook {
    /theAngle where {
	pop pop pop
    } {
	curPoint 4 2 roll
	4 copy thePoint linePtIntc {
	    pop pop lineAngle /theAngle exch def
	} if
    } ifelse
} def
/curvetoHook { } def	% Should never occur, since we flatten the path
/closepathHook { } def
/endingHook { /theAngle where dup { exch pop theAngle exch } if } def
currentdict
end
/PathAngleDict exch def

/pathAngle {
    PathAngleDict begin
    gsave
	flattenpath
	/thePoint defPoint
	tracePath
    grestore
    end
} def

% Produces the coordinates for a perpendicular through a given point.
/perpThroughPoint {
    90 add bboxLine
} def

% Measure height/depth of the path.
/measureHeight {
    gsave
	flattenpath pathUR ycoor
	dup drawHorizLine
    grestore
} def
/measureDepth {
    gsave
	flattenpath pathLL ycoor
	dup drawHorizLine
	neg
    grestore
} def


%%EndResource
%%BeginResource: bracket.ps
%!PS-Adobe-2.0
%
% bracket.ps
%
% Given the darkness parameter, a point on the stem, the edge of the serif, and
% the corner where the stem and the edge should meet with no bracket, finds the
% height of the bracket.
%
% Requires: points.ps pathtricks.ps drawing.ps
%
/findBracket {
    4 dict begin
	/corner defPoint	% Point where the serif and stem meet
	/edge defPoint		% Point at top end of serif
	/bracket defPoint	% Point where bracket should end
	/fraction exch 1 exch div def	% Darkness parameter (usually 1/3)
	10 {
	    edge bracket drawLine avgPoint corner
	    pathLineIntc dup length 0 eq {
		/bracket corner defPoint
		pop exit
	    } if
	    firstElt loadArray % Better only have one element!
	    corner subPoint fraction scalePoint corner addPoint
	    % First line for the intersection, that goes through edge. This line
	    % should intersect the stem line at the bracket point.
	    edge subPoint 10 scalePoint edge addPoint edge
	    % Second line for the intersection
	    bracket corner subPoint 20 scalePoint corner addPoint corner
	    intersect {
		/bracket defPoint
	    } {
		/bracket corner defPoint
		exit
	    } ifelse
	} iterate
	bracket pointbox
	mark bracket edge drawLine avgPoint corner drawLine cleartomark
	bracket
    end
} def


%%EndResource
%%BeginResource: pointintc.ps
%!PS-Adobe-2.0

%
% pointintc.ps
%
% Determines when a point intersects with a line or a curve.
%

% Requires: functions.ps points.ps bzintc.ps

% The tolerance range for intersections. By default 3 points.
/PtIntcEps 3 def

% Makes a line segment given one of the points and a true/false value for which
% direction to draw the line.
/epsilonLine {
    {
	2 copy
	PtIntcEps 0 addPoint 4 2 roll
	PtIntcEps 0 subPoint
    } {
	2 copy
	0 PtIntcEps addPoint 4 2 roll
	0 PtIntcEps subPoint
    } ifelse
} def

% Given a line segment, does it intersect /pt1?
% x1 y1 x2 y2 x y -- false OR x' y' true
/linePtIntc {
    5 dict begin
	/p defPoint
	/p1 defPoint
	/p2 defPoint
	/p2top p p2 subPoint defPoint
	/p2top1 p1 p2 subPoint defPoint
	/p2top1mag p2top1 magnitude def
	p2top magnitude p1 p subPoint magnitude add p2top1mag sub
	-1 2 withinRange {
	    p2top1mag 0 eq {
		p1 true
	    } {
		p2top1
		p2top p2top1 dotProduct p2top1mag dup mul div
		0 max 1 min
		scalePoint
		p2 addPoint true
	    } ifelse
	} {
	    false
	} ifelse
    end
} def

/ifCurveIntc {
    curvetoIntc dup 0 gt {
	-1 2 {
	    pop pop pop
	} for
	true
    } {
	pop false
    } ifelse
} def

% Does a curve intersect?
% x1 y1 ... x8 y8 x y -- x y true OR false
/curvePtIntc {
    10 copy true epsilonLine ifCurveIntc {
	12 2 roll
	pop pop pop pop pop pop pop pop pop pop	% 10 of them
	true
    } {
	false epsilonLine ifCurveIntc
    } ifelse
} def

%%EndResource
%%BeginResource: subpath.ps
%!PS-Adobe-2.0

%
% subpath.ps
%
% Produces subpaths based on starting and ending conditions.
%

% Requires: angles.ps pointintc.ps


% Makes a subpath, as a user path.
/traceSubpath {
    20 dict begin	% Save the starting X and Y; also makes hooks local
    /moveto { /moveto cvx } def
    /lineto { /lineto cvx } def
    /curveto { /curveto cvx } def
    /closepath { /closepath cvx } def
    % Execute the initialization hook, which should be at the top of the stack.
    exec
    [
    pathbbox 100 100 addPoint 4 2 roll 100 100 subPoint 4 2 roll /setbbox cvx
    % Each partial path segment in the path must be traced independently. Guess
    % that there are at most 100 segments in any path.
    1 1 100 {
	/segmentToTrace exch def
	/inSubpath false def
	1 1 2 {
	    /currentSegment 1 def
	    pop	% Get rid of the for argument
	    /ignoreCycle segmentToTrace currentSegment ne def

	    {		% moveto
		% You should never encounter a moveto in a subpath; it's bad
		% karma. TODO We have to figure out how to deal with multiple
		% subpaths within a path. The way we should do this: break the
		% path up into individual parts, and then run all this stuff on
		% each part.
		ignoreCycle {
		    pop pop
		} {
		    /nowPt defPoint
		    /startPt nowPt defPoint
		} ifelse

	    } {		% lineto
		2 copy /newPt defPoint
		% If the new point equals the old point exactly, then ignore
		% this entire thing.
		newPt nowPt equalPoint ignoreCycle or {
		    pop pop
		} {
		    2 packedarray cvx /linetoArgs exch def
		    inSubpath {			% We're in the subpath.
			/defaultEndSubpath { linetoArgs lineto } def
			lineTestEnd {
			    /inSubpath false def
			    exit
			} {
			    linetoArgs lineto
			} ifelse
		    } {				% We're not in the subpath.
			/defaultStartSubpath {
			    nowPt moveto linetoArgs lineto
			} def
			lineTestStart {
			    /inSubpath true def
			} if
		    } ifelse
		    /nowPt newPt defPoint
		} ifelse

	    } {		% curveto
		2 copy /newPt defPoint
		newPt nowPt equalPoint ignoreCycle or {
		    pop pop pop pop pop pop
		} {
		    6 packedarray cvx /curvetoArgs exch def
		    inSubpath {			% We're in the subpath.
			/defaultEndSubpath { curvetoArgs curveto } def
			curveTestEnd {
			    /inSubpath false def
			    exit
			} {
			    curvetoArgs curveto
			} ifelse
		    } {				% We're not in the subpath.
			/defaultStartSubpath {
			    nowPt moveto curvetoArgs curveto
			} def
			curveTestStart {
			    /inSubpath true def
			} if
		    } ifelse
		    /nowPt newPt defPoint
		} ifelse

	    } {		% closepath
		/newPt startPt defPoint
		/linetoArgs startPt defPoint
		newPt nowPt equalPoint ignoreCycle or not {
		    inSubpath {
			/defaultEndSubpath { linetoArgs lineto } def
			lineTestEnd {
			    /inSubpath false def
			    exit
			} {
			    linetoArgs lineto
			} ifelse
		    } {				% We're not in the subpath.
			/defaultStartSubpath {
			    nowPt moveto linetoArgs lineto
			} def
			lineTestStart {
			    /inSubpath true def
			} if
		    } ifelse
		    /nowPt newPt defPoint
		} if
		/currentSegment currentSegment 1 add def
		/ignoreCycle currentSegment segmentToTrace ne def
	    } pathforall

	    %inSubpath not { exit } if
	} for
	% If the last segment is greater than or equal to the segment we just
	% traced plus one, then the next cycle will be useless so it and all
	% following ones should be canceled.
	currentSegment segmentToTrace 1 add lt { exit } if
    } for

    % Remove the last moveto
    dup /moveto eq {
	pop pop pop
    } if
    ] cvx
    end
} def

/drawSubpath {
    gsave
	currentlinewidth 3 mul setlinewidth
	dup ustroke
    grestore
} def

/useSubpath {
    gsave
	exch newpath uappend
	exec
    grestore
} def

/subpathEndpoint {
    gsave
	newpath uappend currentpoint
    grestore
} def


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% Some start and end condition functions
%

% Start when the angle meets some condition.
% {cond} --
/startWhenAngle {
    /StartTestCond exch def
    /lineTestStart {
	nowPt linetoArgs lineAngle StartTestCond {
	    defaultStartSubpath
	    true
	} {
	    false
	} ifelse
    } def
    /curveTestStart {
	nowPt curvetoArgs curveStartAngle StartTestCond {
	    defaultStartSubpath
	    true
	} {
	    false
	} ifelse
    } def
} def

/endWhenAngle {
    /EndTestCond exch def
    /lineTestEnd {
	nowPt linetoArgs lineAngle EndTestCond {
	    defaultEndSubpath
	    true
	} {
	    false
	} ifelse
    } def
    /curveTestEnd {
	nowPt curvetoArgs curveEndAngle EndTestCond {
	    defaultEndSubpath
	    true
	} {
	    false
	} ifelse
    } def
} def

/endBeforeAngle {
    /EndTestCond exch def
    /lineTestEnd {
	nowPt linetoArgs lineAngle EndTestCond {
	    true
	} {
	    false
	} ifelse
    } def
    /curveTestEnd {
	nowPt curvetoArgs curveEndAngle EndTestCond {
	    true
	} {
	    false
	} ifelse
    } def
} def

/endBeforeStartAngle {
    /EndTestCond exch def
    /lineTestEnd {
	nowPt linetoArgs lineAngle EndTestCond {
	    true
	} {
	    false
	} ifelse
    } def
    /curveTestEnd {
	nowPt curvetoArgs curveStartAngle EndTestCond {
	    true
	} {
	    false
	} ifelse
    } def
} def

/startAtPoint {
    /StartPoint defPoint
    /lineTestStart {
	nowPt linetoArgs StartPoint linePtIntc {
	    moveto linetoArgs lineto
	    true
	} {
	    false
	} ifelse
    } def
    /curveTestStart {
	nowPt curvetoArgs StartPoint curvePtIntc {
	    pop pop
	    defaultStartSubpath
	    true
	} {
	    false
	} ifelse
    } def
} def

/endAtPoint {
    /EndPoint defPoint
    /lineTestEnd {
	nowPt linetoArgs EndPoint linePtIntc {
	    lineto
	    true
	} {
	    false
	} ifelse
    } def
    /curveTestEnd {
	nowPt curvetoArgs EndPoint curvePtIntc {
	    pop pop
	    defaultEndSubpath
	    true
	} {
	    false
	} ifelse
    } def
} def

%%EndResource
%%BeginResource: textmgr.ps
%!PS-Adobe-2.0

%
% textmgr.ps
%

% Require: functions.ps

<<
    /TextFont /Helvetica findfont 30 scalefont def
    /TextXPos 0 def
    /TextTopYPos 900 def
    /TextYPos 900 def
    /TextLineSkip 40 def
>>
/TextDict exch def

/resetText {
    TextDict begin
	/TextYPos TextTopYPos def
    end
} def

/setTextPos {
    TextDict begin
	dup /TextTopYPos exch def
	/TextYPos exch def
	/TextXPos exch def
    end
} def

%
% font-dict baselineskip --
/setTextFont {
    TextDict begin
	/TextLineSkip exch def
	/TextFont exch def
    end
} def

%
% (string) number --
/stringOfText {
    gsave TextDict begin
	TextFont setfont
	newpath TextXPos TextYPos moveto
	20 string cvs
	CurrentFile ( = ) append exch append ( # ) append exch append
	TextToConsole { dup = } if
	show
	/TextYPos TextYPos TextLineSkip sub def
    end grestore
} def

/TextToConsole false def
%%EndResource
%%BeginResource: unitalic.ps
%!PS-Adobe-2.0

%
% Takes a font dictionary, makes a new font dictionary that is unitalicized, and
% produces the new font.
%

/unitalic {
    dup /FontInfo get /ItalicAngle get
    dup sin exch cos div % Angle had better not be 90
    [ 1 0 4 -1 roll 1 0 0 ] makefont
} def
%%EndResource
%%BeginResource: width.ps
%!PS-Adobe-2.0
%
% width.ps
%
% Determines the appropriate left width.
%
% This entire file is just one big function. It requires that someone (namely,
% widthlibs.ps) define various values that specify the current letter's width,
% various naming conventions, etc.
%
% Requires: pathtricks.ps points.ps functions.ps drawing.ps

/LeftRightWidth {

% Draw some reference lines
gsave
newpath 0 0 moveto 0 200 lineto stroke
0 100 moveto WidthUnit 100 lineto stroke
rightSidebearing 0 moveto 0 200 rlineto stroke
grestore

/Extremes pathExtremes def
Extremes sortByX firstElt /LeftPoint defPoint
Extremes sortByX lastElt /RightPoint defPoint
Extremes sortByY firstElt /BotPoint defPoint
Extremes sortByY lastElt /TopPoint defPoint
LeftPoint ltpointbox
RightPoint rtpointbox
LeftPoint xcoor /LeftEdge exch def
RightPoint xcoor /RightEdge exch def

0 XHeight SubscriptFraction mul horizLineThrough pathLineIntc
sortByX dup firstElt /HalfwayLeft defPoint lastElt /HalfwayRight defPoint

gsave flattenpath
{ HalfwayLeft startAtPoint HalfwayRight endAtPoint } traceSubpath
{ pathExtremes } useSubpath sortByX lastElt /LowerRightPoint defPoint
grestore
LowerRightPoint rtpointbox
LowerRightPoint xcoor /LowerRightEdge exch def

% Chop the letter up into small slices each HeightUnit high. For each slice,
% look at the x coordinates of the intersection, keeping the smallest and
% largest values. Stuff them into an array.
[
    BotPoint ycoor
    HeightUnit
    TopPoint ycoor {
	/curYcoor exch def
	curYcoor XHeight SubscriptFraction mul HeightUnit withinRange {
	    ] { gt } bubblesort /SubPoints exch def [ SubPoints loadArray
	} if
	curYcoor 0 exch horizLineThrough
	pathLineIntc dup length 0 gt {
	    sortByX dup firstElt xcoor exch lastElt xcoor
	} {
	    pop
	} ifelse
    } for
] /Points exch { lt } bubblesort def

% Sort the array by lowest x coordinate. For coordinate n, shift it outward by
% WidthUnit/n. Of those coordinates, take the one that is farthest out.
LeftEdge ForcedWidth sub
1 1 Points length 2 div MaxUnits min {
    dup 1 sub Points exch get exch
    MaxUnits div WidthUnit mul sub
    min
} for

% Draw a line at that farthest sidebearing point.
gsave 2 setlinewidth newpath
    dup dup BotPoint ycoor moveto TopPoint ycoor lineto
stroke grestore

/LeftPosition exch def LeftPosition % For subscript calculation

doLeft (Left) exch neg AdjustScale round cvi stringOfText

% Reverse the array and do everything again, for the right side.
Points revArray pop

RightEdge ForcedWidth add
1 1 Points length 2 div MaxUnits min {
    dup 1 sub Points exch get exch
    MaxUnits div WidthUnit mul add
    max
} for

gsave 2 setlinewidth newpath
    dup dup BotPoint ycoor moveto TopPoint ycoor lineto
stroke grestore

/RightPosition exch def RightPosition % For subscript calculation

doRight (Right) exch rightSidebearing sub AdjustScale round cvi stringOfText

LowerRightEdge ForcedWidth add
1 1 SubPoints length 2 div MaxSubscriptUnits min {
    dup 1 sub SubPoints exch get exch
    MaxSubscriptUnits div WidthUnit mul add
    max
} for

% The subscript cannot extend past the superscript, and it cannot extend beyond
% the specified subscript indentation limit.
RightPosition min RightPosition MaxSubscriptIndent sub max

gsave 2 setlinewidth newpath
    dup dup BotPoint ycoor moveto XHeight SubscriptFraction mul lineto
stroke grestore

doSubscript (Right subscript) exch rightSidebearing sub AdjustScale round cvi
stringOfText

% Now, try to find the center of the top of the letter.

unmeasurableAcccentLetter {
    pathbbox avgPoint
} {
    % Hack: for T, i, and j, measure from the middle of the letter; all other
    % letters, measure from near the top.
    CurrentLetter (T) eq CurrentLetter (i) eq CurrentLetter (j) eq
    or or { 0.5 } { 0.9 } ifelse
    horizSplitLine pathLineIntc sortByX dup
    firstElt /TopLeft defPoint lastElt /TopRight defPoint
    TopLeft ltpointbox TopRight rtpointbox
    TopLeft TopRight avgPoint
} ifelse

 /TopMiddle defPoint TopMiddle pointbox

% This calculates the proper offset from TopMiddle to the accent position.
TopPoint ycoor TopMiddle ycoor sub dup
currentfont /FontInfo get /ItalicAngle get neg dup sin exch cos div mul exch
TopMiddle addPoint /AccentPoint defPoint

AccentPoint pointbox
mark AccentPoint TopMiddle drawLine cleartomark

AccentPoint xcoor RightPosition LeftPosition add 2 div sub

doAccent (Accent point) exch AdjustScale round cvi stringOfText

% In the case of the letters i and j, output the resulting widths so that we can
% calculate the values for the dotless j, even if it doesn't exist.
(i) CurrentLetter eq (j) CurrentLetter eq or {
    /CurrentFile CurrentLetter (-width) append def
    (Width) RightPosition LeftPosition sub AdjustScale round cvi stringOfText
} if

% In the case of the letter i, also do dotless i
(i) CurrentLetter eq {
    gsave 20 dict begin
	0 1 currentfont /Encoding get length 1 sub {
	    dup currentfont /Encoding get exch get /dotlessi eq {
		/DotlessiPos 1 string def
		DotlessiPos exch 0 exch put
		/rightSidebearing { DotlessiPos stringwidth pop } def
		/CurrentLetter (dotlessi) def
		400 0 translate
		DotlessiPos letterPath
		LeftRightWidth
		exit
	    } {
		pop
	    } ifelse
	} for
    end grestore
} if

} def

% Auxiliary function to find letters that should not be measured for the top
% point (instead, the middle of the box should be used). Although it is highly
% unlikely, you may wish to change this list as necessary. In fact, this list
% really should be located somewhere else!
/unmeasurableAcccentLetter {
    false
    UnmeasurableLetters {
	CurrentLetter eq { pop true exit } if
    } forall
} def

/UnmeasurableLetters [ (C) (E) (F) (G) (S) (Z) (a) (c) (e) (o) (r) (z) ] def

% Helper functions in qualities of letters
/doLeft { /CurrentFile { CurrentLetter (-left) append } def } def
/doRight { /CurrentFile { CurrentLetter (-right) append } def } def
/doSubscript { /CurrentFile { CurrentLetter (-subscript) append } def } def
/doAccent { /CurrentFile { CurrentLetter (-accent) append } def } def
/rightSidebearing { CurrentLetter stringwidth pop } def

%%EndResource
%%BeginResource: superness.ps
%
% superness.ps
%
% Functions to determine superness parameters.
%
% Requires: points.ps pathtricks.ps functions.ps
%

% Given a horizontal extreme point and a vertical extreme point and a boolean
% for whether to use the outer or inner intersection point, calculate the points
% relevant to superness.
/findSupernessPoints {
    10 dict begin
	/Outer exch def
	/vertPoint defPoint /horizPoint defPoint
	vertPoint xcoor horizPoint ycoor /Corner defPoint
	horizPoint xcoor vertPoint ycoor /Center defPoint
	Corner pointbox Center  pointbox
	Center Corner pathLineIntc sortByX
	Center xcoor Corner xcoor gt { revArray } if
	dup length 1 gt {
	    dup length 2 sub 2 getinterval
	    Outer { 1 } { 0 } ifelse
	} {
	    0
	} ifelse
	get /SuperPoint defPoint
	SuperPoint pointbox
	Center Corner SuperPoint
    end
} def

% Given a center, a corner, and a superness intersection point, determine the
% superness.
/findSuperness {
    3 dict begin
	/SuperPoint defPoint /Corner defPoint /Center defPoint
	SuperPoint Center subPoint magnitude
	Corner Center subPoint magnitude
	div
    end
} def
%%EndResource
%%BeginResource: padr8a.pfb
%!PS-AdobeFont-1.0: AGaramond-Regular 001.003
%%CreationDate: Wed Jan 20 17:12:35 1999
%%VMusage: 42336 53272
%% Adobe Garamond is a registered trademark of Adobe Systems Incorporated.
11 dict begin
/FontInfo 10 dict dup begin
/version (001.003) readonly def
/Notice (Copyright (c) 1989, 1992, 1996, 1998, 1999 Adobe Systems Incorporated.  All Rights Reserved.Adobe Garamond is a registered trademark of Adobe Systems Incorporated.) readonly def
/FullName (Adobe Garamond Regular) readonly def
/FamilyName (Adobe Garamond) readonly def
/Weight (Regular) readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /AGaramond-Regular def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0]  def
/UniqueID 44300 def
/FontBBox{-183 -269 1099 851}readonly def
currentdict end
currentfile eexec
0eba5bab93928402f28414da43ab8913707dd963a8e01fe9a019129d9b23
86b85577f40eb13666545b45425b3648d25385e6c50729e4e93fcf8c66db
b9a7f175c70b86866481e970f5a226080855dbf921ded346c1ffefb898da
8c0c194c7c609d7f7183208bb60a4c787b3d97c02e7b376a91689133adbc
a619e9ae89e46db05979bde657affa91233d64c0418717d8adf19edcb3bb
c48194cfd71c71c0b47f3c9afc4a3bc4d2ce71bfd2c24c9872eeb9882321
7c6ac0825515399614d8ebdf1b38acd8bd42aad7f97ffb43b2bee9cfb61a
bf54fbab020026ece5268cb845d6d7881b9207a91f14b191c2065d7435e9
3dcf2c3c9e74eed6f9ede3692d2952be7e77f45d465721d37eff06173d64
d644130819617285d7d9efbfeb7d90aceaba473655a369c7800729396018
6551ce211512294073db25cf3af263c71eb1357ccec94501f4b4b83dda13
ff9615af3f2c576cf343a58af3dce8cdb6c4776512b016e07e17440fee15
38a25265cc64aac4539274bb7535b837708d127f0de69060988b9e77259d
14ded854d8b59a37fdd2a8288c95e8925b85e267ae5486771fb5a3530fb5
a63b82b64458c50cb5f03100dd19fcc3b3370a46b1bdc238eb21275fc790
69f0928fc705a8f28a08d322134aedba015ffe1ab78ee5adacba8fa167bc
64e683633b11d58c308fb3a641189955892e63a8c5a603a660b0bb1391ab
9301689bfc7cb448ecc506443e450277234c0d37532448c2994a40842d63
9871845f071c8e42d38bc121b412e2aa74d4efa9e73b642c0a4831139cf5
be2329fee157ebe1658e3e98a0338f244d1f485df816c05184328846d6c8
f48d126e226206b4c304d82ec6b657b609a148e519d952c54c47e0ee92b9
abdaaeec7a7b30aed350d2b65447b7bdc9e39ab457087691d4618a0ffb73
30630d0839679a1b9fd28cca214565c331d51d354c2d7b7f88c0ae81204f
23f3ae44d550ba000556f3f3bce9c82c21c73ce847b85bdacf010313c2e5
0605349d5f48888c9e3ad475a7267166f0de0f76118f8df30eaaedd10b51
c0fdddbb2f870b80913f3e63b016e608bf1890d8da57d2ff25bfa613add3
cd1fd4f54f56a106b070de20a92729ffabc29e939317c23f40df45b4b5a5
3f4f9f4d2e833a3d816824f87300a9ed75eddc4386b60b2e278770cc611b
f3484066122dad15e7659d16a44c174ee46a4f4a7adeb5fd9f0639f6776f
893086941b37afd57fb2c0c53ab99a104a792233c04456f9af7a97025207
5165df4650a8a25638d99f8abc8d91d4fec06e37454a08685528b10bd9da
e4ee815ad5e2275df4dd2b7a481ee069f7dbaac91f6b64164faa93ae1be9
a3fff7b262aeee6425f57cfb10048d1879dfadfdfd8b011ecafa2db97182
3f080285eac14414080d7268dd78ea0b9b6d0d576288551316775b4961e8
f27c2f365cd6c9cbd5d616aacfd052d3c004c30b9b2fdf9b8be7a95ce462
090cd6aa3a9d1269d32c4d6e8e4d763988759579a757734b5c2b2bf98474
18ed76a85f02988f15a8a89ba347e75be45fb7490894342e240066f77488
7ebedf1d0041ca7dd3ef3f5452f4b0102db8ccc8ae6aabe8b7b592a1bfc5
273d8f09bcb3788577a080223afb8070f5214a81446b475da72e02d3228a
f472fe88d576f5b5b7cd97efc915e34c22aa953d4264988a180b56822622
c583f84e88c87710c965a118a4a6aee902b49207df6b6bd5a4ea224be2ac
23d27b7d21f6d9ad7132f82f95e26f8d7b9d00f1ff7cb2a9d0630119d6bd
ec121956c696830ef12014cf9e1fdaaddf3afddb9bba5b0b61a0760504c7
3ba30c449ee5f8e6a4d9498352981684aa988a541b329e6bdfb62b48acdd
86532258afa4633bb91a873e1a57c8e2b4f27439da26b3c9e860ba1fc681
bb3e1339bdc65bcaa7e24f3f4a196ccde8d584b059813d920f19af9a7d1c
1899a2742fbb23be0330bfd52e43ea15e937fa7e91f36cb21df68c2c2ebe
c3cb509d242298b4ab38ab0f1a03594a306be4507b82e3db3f95004b3363
4ad9ae245cde2a9ccbf9ba5e0fd41b45e47688927b1c71f77fe6c0c7c25f
b2bae69ac8a570586e2c8ab355638de8eac2646a98cc739b63692b7428fd
3e62e74dbd9631cbeb5ffee59f979f1675608b39ec51d48fefcd55ff986b
de85cbc12c4264052d1c25140729beefefe175119263486d82655ab234b5
0467e0df791c48484d98862d328aa0d6648ea096c5bd5db4652be2975475
7bdb771fdec2a53e5c8536427e8ed79277b6020f6eb595fae053c59baf75
3af2dbf7b895aff7d00a980c35bca0bd46c0f3d31da6efcbd08d00f642e2
f6d9a2d602a1c394f6f3b8a1998b874dde6debb8f951e7e35fc03138fda9
f6603843762aeb2cea82d785c4824ab8d734670ec3e0c8e4caa64b03a233
4b28d2006ba4ce824457b3cd8f4b65c7c43c9f8e89d23c62657b756895bd
e48b3f4faf1e2b8f9ec93d2a51ee18ec44052898be31e379ffd8fe65d715
bed42bd14950e3a9e9a9a898714d46bbaeb726ae24128e00ea69c14c57fc
d874cd0208fe31cc94be5d034676600e500870290ed0eda492babcc4246d
783523b7292c9844931cd153a14154369c0cefe0a3fb9cd9928e5bc8c7c1
e83669b3c796b7f6b5a2ed99fcd06a51c185bca3f3af5524835b0513638c
292940f4ff05aeeeb5078267d8ab60960b2faa5998d64402e75b02442ea5
a6f679fff9956c64b88630caa6f1140ddc0536783f8502631bb5a8e16e5d
4bfade432b58dadbb64c4a9360b67aa08b78062b42b069217e9383d5ed14
9cba0e00a3a7bec32558523715bd07039ce91c4636b5aa8ccd52b719d60a
bd28452113cc684caa5c4a19579c8837588bd873c1ff6c841390357e5490
176cf22458218b77f7d598e2ffda412536cdc3659a3f1c1322757b1f59b0
8ba270dec51cd1a7d15e331349fd16862f3454ae8c74d4bcda6f2d6bff94
7242a8557a1ac2e79b89ecf271964c920fc0a49dfa70e45e7f2012343b14
1162906142c71e1f1d2d18407589fdba4f2dbfa3cec373267c282c9908bc
3efece7ff534ce912ae46aa95f36ece39acf18059946e80c6b1004b828a6
e72ec7d74c494c52544506702dcf6e2e89fa254ff2c7f9466c9bf996033e
657ee637ca9229a6f27cc6f89bc66bf0baa9d18ce2f01987e6b9bec898eb
33efd2e20342c44ccef8abf2780541c423377f746f6eed6cc70ec2f54e0a
88b828e1de62a08d016cd1a20682135dbf0490a1897223056b3a1a248558
92a32ba9d492e970dfe4fde209046772393a12b1b9190a2a596e2a190443
74b3fe5f15fb0bf9ce52352fbbb52375c2d480ea9fe45f7d45649a154e65
07ef6a5e9e16f2381297a077374e213cb7d76d09ee8c28ffb3f7eba640d9
ac6421f4a40d02320b05d418d39d90df3738f659748b4524428a7c00aa69
60b2b177dd2a870767645ab10311bbed276163336523b0accbe46ec78c36
df51fb1e765bd2949ea9b5fc3186f93a05cd8c77ef6b1f1c88b5766d31ad
ad345cdcdc687a7de531d328a706ec7862b3f470c213ac3c116deff095fa
94d8c938a7945b90ba86432c151c24c183a55d52a28c6f376756e41c75eb
4956cc901c6901bdc7f3f4ae44a7152898298e3fdcd4709211a6d4414e6b
2ecfac43dd04609aa9e5dbf176c74b61efc4918ecaaef5ab0f1974cf75aa
982031617702f0675312d4b6d7feb54df8388fb0e23242424953091fedb9
63fef25ba081f8fcc31aa7dd57fd8162e6ae629f0084eb65bacb1f61eed9
48c22e3ced07f2a2c69618b267ad9db1e79c16fab272ae4330c01074204d
e1042d7a05f3a843f3c4c62adb36806c290514b2e14970812b3b960fa79a
a846e119745dd8e1605f98f9522f7f3354697a77eba19af4644e127dc19e
27c76eddfe97fb96e58a6055d13629a22c5a3304b6fc404655a5f7ecd208
790307ffb1e3e624d36a995c8c5bb91972155a771b73b8d7516d7f43a960
f82d1373909c526a4e29b811623a2cd7d02d4e38c292dc78eb813b44f146
c8770629a3d299d1ac3eb09292818c9d1ff3bb02b971e5b45b27f00e2a40
e3fa1c412675ea4f2634cc5366eba5b9ffc52f5fb542ef302f5254687066
f7ad9e2bafd3589a0db9cfcc2437b089abebe84ac6be50bb19b2cf706ae1
93f3bb01f2777598a32f4aa39f488cfad75cc85c885acd43d7550c700459
e7ac0dc4025c242e1ff04f06c9f2b46eb3312ba58f9b8536ed47295debcb
a9f5d655eefb818a110909c64d4c574b51c4ae78027b9818cb53dbad6ccc
25a0ab070cf8fde7123c09886665cbfc169e710998466675700278c308c2
c93e886a0b370d02a63722b2e897a03aae2d3f57279d75885ad5f3f7a205
a02a9e0f804a9c936bc3a235b4c9d383b01ba1d86afb4f3065a545d01f66
c16c2b7c613e857bf8f9925b63324f12304a44a3eedf252873d79371fc9e
2a7584d8a60fb7852083ea34274221dbf7f8fc6fb50c4fc270aeca3f092e
b2a9ce9b2d7380c3e06f5009a80d0a2128e8fea6c2c9b2fe3e8a952aa51c
5bc8f5bda302e505c2556a805a45dcd61e7d75364e6647a51f0ab7d68cb1
67c41dc632f3caf2d2806f256634bdaa86b5017983852ff26ae694507608
c4b209188e297d257346be19250bfff6dea6039f8b9d1d12297ba822af20
0ffbdec475158ad6ecb55f87555012acfbdd0ea527cb5793ca7cace2fd95
6f30d7a8ac7f6a98979be4bd744fbb84a87668e3de62a814b92d31399812
00d5ada86c5d733cf5107df6cb5c999ff6f63abebc9694f0f67ec632ba8c
58e715d92fd6bdd056f29753bcc3e54b0a7e63ec33f7a29740ef0d8351b5
897b126fb6c33e9a33cc83dab916bb29077179fe7ced67de33c959471d5b
029d475274c40eb11279df1192e2c4aa5c8206265533b684075115870d25
3cce99ff6a6fd5b60a56e1737e9e6423028bafd4f001378125e9b76c8931
12c68c3d1e77fe1bae7c6984a0bff421cd5bb55137eabd36d85827facced
50f7a060568a9a251ba6b4497008cbeeba5cbd6b311e0c3168f16c61e565
edad28b6503ae500c7a54c986d711dba353f9aa7bcefc083d244522bce1c
6d86aa9c15cf4961a6c80c8fdad9e0260370cc24a6fa236f3f5975bcaa40
4a65c4c69d820b0e954e0c28954e984cf5fe1cfecba7fdc8918c1a79ee28
d31953868316ffddfbac06b33f713207828b3df5678c562647fc76fa0da6
9d460faa183af0709d69b424fd32542a0b1ef46dd00f242c48bf3dba16b7
c870aa3bc922743f1fb327f146641f4d02b3d525559643db912b15fb5d8d
331a6cc5f5ba27896a83da27073263b065d09c1986422606acef8e6d2c6a
2203ae9b0351c913c6d37e4705475bd49a70d983ab7c43b932c30dd110d8
fed97c13c21d3ea089c69d054ce4bd157a6a263aa359786465d83cafb625
db0319d21b61b13131ff2ab14aa02fae019f99d2ebeebc04ae7793615c20
aac7cd7bb90a2e1282d0b9d1593ee8996ea3f3a2bdde043d6109169dc5b8
5a320e0fbc7c77f5978dd9dc7263c99660a3ccb72a5552e7192ebebe97a7
7b7de9da19e1d85d88cc0fe8cb0b6c166f0ad29cb171a0e2cd19e4dd446e
315aa9ce4e3547b2afb69069410e3f7b22a404fade49530d9cb7d5fad5df
20d402c3c72d6658492135f409edeccb024c5913404f3f3398be317c38e9
30f9755058134b9715be63d71e6d70d153864e65c989da2a9818ae5553bb
7999c4c3888f9b9095bbc438dfdfb084cdfcfdbddb57245aa0cba9e0c514
b7e87ed425c2c31f80a0c48e0210ca9db261809702ea781955cd13bbb791
4d3be71e0c8a95f8da3724972a0c1f3c6372390a336bc4bd0d33fd4ce7d1
bf2751d73640a54f21c9538baca8c7cb4f1db6b13686050bfe4032053030
7e26018dea22f85a610c463f6f1387b0715563c74cb4220459d22402960c
028df68a083f30c881b61abea8ed3e60ee58ef8d9349e9430624ce86e9ec
07629aef47057604b53a2135858285918306e5b5a58f25a41bdae1ef7594
37d3e5af67f3a190b2588d5dd6ef9d87adea9e2bb501790d0e4695f40850
a815b15fa9c0274b3585bf4070a95176c9fc61e2d4ecc9c1e6ef6a7e54ef
f4ef9673fe5a0030c2d01d59d4442a1691a12882de338c171694943a84a1
a39220718cdbccf8c3a12edfce7fabcc168002296e81d38a4837a7711930
1afae4396eca8087a7a727e8f203c1454adfe072483a04164ea62af96d0f
2fa2dd8a28bb98b4f517db861241af3f11f830ef93da915e77ef5218a0a3
0874e7c7108951b208631732ef1ae1307602ab9a71d5ab889eac158bc6ff
33e48af33de760acbc8f6b6deaec4a242ae0a3fd441ecefdc51ffbb66106
2ef5676fc897fb332bc8de143a56bf97a27503cc73ce8e16623c3d24007f
4674893a5456a0440ffd5bb0bae2b18c2f4fe1b8d47f3e4c132943ab7e63
8deb50b9f31fc6ae9ea853b9995e40bb06932ef0aca1d05e49d3ea914182
6446948b067040133579423007dadb6e29144e041a6823057137a0cc27bf
de5cbcdf403f45f722dd20d0863e0cf3b46533ddcbc645e97bfb82f255dc
271d1b2aa92ecd340e23948027b3866e7420cc935cdb4751463eedc65ce2
94de9e7d65ac83948188741e1a094ee9052008ff606168a576ea85f78cbd
795b93e6e506bcb13e4fdde339b80faa13eb31432d7d585ead962ea4f1ba
5bd9ea9cb61c813fe87f48b330d790df517d242bf88201dca3be6ae22d54
fa131f36fe67bbc0293141be4a208aab7dd50a863a52b56cc359c4083260
9dcbd302af52c7e51285a4afe07a01c20074d06df2592496e365b6f640d3
39e1b70073c7fd6acf9ab1ff3a18a85aeb16f6ba6832e155613c97d1e042
32a47ef7ba5548dd37c8f5926b7582a110ae5850b28a90e0d7d9e6b7a5a4
56df9fd9b5c953ec309da553d117e9f1ab869c0f633f41c8996b4682fc1a
7771f8b46c4ec05f7919a32f14b2ea219d2c50c18023ed65a5f4fdf22c50
ee35349e356cbf9af0309ad77cb9ed381788ec477bb03eaf037288addaac
1bf66b459d7fa8e1bb56f5194ca3d2510ca9d48298eae57cea5932d2f544
2d3f9df4573274672bea350445166d846025f69bf03fa581256b8ec1a6eb
e65f63f53f3c2863cbc5b7d954863d4af5beb81d56723eae5dc8bae073be
a1dfade068220a0f9d917c9120d8ffab4ea7dac47c5ff20b7312bddba0ad
5a34aa8fcd4e465cf5f26c5cad8bae659f7e0823f4af7392c179d0f5c034
d9a8952285cffbae6bd6c383bf2a2c55b5a39d74a88482169c4ff26c8b02
ec030b4852278e78a775321df70a508b8cbec65e3cb638991d13926b9a00
cd5046b8c0a4f59539e9ef60a36885d0dbecabb70711f6dc8631036c1d2c
ea70b8d2094d621709fbc511b5038ecd9a535f3f13df2f44dad48eda5e8c
5866794123eba735c10fa2507687ee79899f2fbd3bfbf18045c03e7e24ba
e231ba31d7cbd2795a83de64426858802bfc7afd1835f4f93f256b14dfc5
706cfad11916ab35c7f164bf32e89f35c2f933457db3635899941eed1410
b45e54115707f7c64b0f88d9878f613bf2d8d3323749c410736314c19fff
000e3a0f68ccc089013cce7bbde46ff46c4e7ad03b979c9c60c0369e89c4
cf8261d65b8b6b885ed09cca80ab15b2722bb111168bb370c3b140f345d1
c857680379b5ed0a2f1ff9352da0c0939f5b1db89d783f4d25340dc27762
1b0150697fbfd19404ddd2e80830f616364cab42883751c3a992a78a44ec
8ea10e9e3339209f163b0e497d1fd309d88d1a447c9ea004ffb1c7851fe5
22125ab33ede25ebd7f218bc52ba3670b7b641b128a97a7e3eb501d76b07
40a3f3ef5fb1f760f4adaf8a07d237177d7f97ca7e1894a70b733a4ebb00
b4a57d6ef8ec101d97b4c868e2bf9bfb6402730c9c6d8a6766515c731406
c21d153385f700dbfa302ecda60d1c256f7fb1d35a807e4e3e2162cc3bf6
7bcfd252723866d86306e047df53bc6848e8cb505da29dbc782b8df153cf
98f403ecc49a73cf755a3f4ac6992ff75ce8cc156605e085b5d23cf2f470
d90125c95745ad4a9af66e6a3a56749d74056a2179e3d54eb805324c9df3
6170bdd3c64108267fefcd4b77db0a6204cbce349261d7a111c5b516cd07
5e1690e46d14549e35ea4aa2295863862ebf9ea2aba68dc224a4cbb9a0a2
4a60f7af92c38e43d31262457e9f3c13cb01822bf1123a4f500e45e88204
f5bdebc7af6c8cdf4c1ce63411a6adbf9fea964d2cf559bddfd3c9fcf0a7
27f289b7af58c4ab17977a1a7848820db13ad7ddbcb4de84a19f57d826c2
d7b8dd172e84955b590c7a7c2ab720ba7b29c5b281a42b3172cca3b7d9bb
26594cbbbc246b35bb33e9d4d7f5eb9a119beb6495b3baa44248fc7f1b7d
810ba79026653a68d511e7afc3e54ad26dd740241885faa63503c9f4d36f
563a5bef5331c6d8504041419822f6e4652bef3be4e1641dc2b0da1d2baa
6ea01b277fc53686c126dcd13fe096a421bec8096ed37594c6d36507b17b
1b7af5e6f6a7f3c4aae701c1ad9692a52216c09f61546241d6a4fe97fd0d
5f2a40168441105fd461e85c282783f6750de562ca6f9be8f13b22f4634a
a8e9ea0a35b97dbd7dbb9390b7143d09ad29a71c3a989a46b040a4bd9dab
ab6f010570c118137a6c51cd99b7c4ef5821393b4e2f8e992b3c2a04f1e1
fe56621fa27ef0c23ae5aa30a574073dfc905e2d6dc017a141e292887151
1d24694e303f6de61ca4899ebe159606d74260290cd8996295c30065a67a
12d11d1d8892e08a9bad35e66ef3d837ac45ac98cd0f698b1ff81d55af69
d6750232c89ed3842a8a3344c0a6bb083105a8dfd048a6fb524e6f1e8bb1
6cd77fea7ac5b384bcb757f62d882fc5140370cc7e73af103799f52f618e
020a1d092fdf27153cff34fd6459fa8cdde290903d3b1b07eeb9d50b689d
d01d7a9d11f3963f73d957fa329456da4a8c7e3bfab3867c5429d6bc5337
a70f25f27266ed0bf1f622d4160597005891bb4a431aa09b4818524136ab
1f1255e592c1ab0cb6c16ab3975a7db91196f11481537c7df6807216586d
da8274590b3dd20dace5f7cc90f8555d015103706cd40a17845533cb47b0
57b99ca83bc9b3f7af8045a4fe67771ac7f878064310b2c12ebbd46a3e73
6ec85ae931a8ccf6e9a48bcfe38e0de8fc19f5e9a00ee65a3cf527129341
8ebc47b604aa1115ada7c4cc75499aaa63562e9b0612d8fe1feeb35a361c
71bebe114aa2e31173d8e9ae58dd3d51a395b605407ce028156c81e9b580
66dddda4a559bd53256090004f41a1f9c326367bb08b6cbdf00a9d2b64f1
6a4a3ab0c8408343bcc8f12f48d678aa1401cff3c18a5dc672d8d3840792
065dedbc23d76c371fd36c5c05999cc6ffae7f687d979b1240778a7dbdf2
3ab648b643715059d6c88aad6da7b1760c88f41493a6eb2fb040134e8a69
d114ef52ccde6840535f8036d71c3dbb7967738b36934148acadf301ee81
1f901b8625e956c3c3ca574c5ad5c915786bda4f03d3f5f3bc59ad04cf5a
b63a1e5065aac022b4bc77cee84269e9f641938fefd06448c4f84bcab7c0
796891efd1e7fab3d75c448fdca9c25b5a3d138dc314a55ef6244c0e7a0c
e5642fe61f2b54259a858fac7db32ea599440a24095f82f60a1b585cd01e
97001df4fa7ec828a7a115584f937cfefab6e0882d738f80a6fc0fe44004
8f49f11f0967fc87c26f92cf2c5a30269d428f22750c5343ca3e30471e0a
6febfc65cc8bd2ff79a54a0df447fcd0bff71fb98d8f5a91a34cb05d1425
9508e6f714e36d9f5d7bb40f3c46e9479f4a10ebf89944e4e1a499aec4c3
fb7c1ecdc173ccc778b7b736ea7fea61258a3a944c103fd0538805984681
c94a26a5001c5fcc55e6ee59cf217f5492db1cd89fa4b4ec35776f2e9d0f
7ee5579579a69a75c0374123da4691e38950aa082b5ef6748c671162af86
092bc016b1c259922924f8009c1d52a7c5e0d628beedb97c4a385f9f99b3
c52f10aa5bc2885f0efc5fe61bf450fa561b3e90f72373e04824673d729a
cf553b3535e17c8882ec37397142eb561d90c2b1856eb7a557f6e23c559c
2aa37d3bfa1f239ffbe018381d6ce8663c2c4d4c07731a0a6d6dde0320bf
53361cf3b0503ab4651ae28598eeb640c2f3786de182242ff37906d75da8
6fde902608f6db19bf1d3d2fb8641837dce5baa3e9d4b6cc5e4b11c66139
ddb32a58b6d798d9ee8f7e933066474e2a680d55e7e28cce19717c9fc2ef
c61e3399b5b247fd33cccce43d76b7df2ebfb7ac7f7e933f9508e4ee19a0
54c05d1a93b8feb65dbca46792811f7c67f99f6609d913d4c4d7bc5b4667
76ca1614b01a151c943e0eb10c7ea5bda2767a1066997f6d88fbc5fedcb8
ac825d44dd1dfc0218f659d6b26677292e71e8e353d30a93a254327a8e37
a557e361e92d98c1a9180e0dbfc5e5f6f04939c3418a664ed87389a2412e
6f0d8081b8df2e126d51add4d3940b4ef64077733cf3fab494d6417a4016
a4080d3c7273484e7c49ef4bd292e971b97c1c9b6b5fe9cad5aa720625e6
7497804eb0305dfa4f7444ded764802254c4c86167a5ba08543d866b9a90
c90c166b4aecdb5c1f605b4a6aa2a5ac0822af3f0e0c23006363c5f13ac2
dfeffe2d1a9b3501fc2343f14e11900eff695b0360a299fc660971f11e9a
c04682962c98442b5e34a746817d7b221c0554e7d64583a4f5a7f46deb11
8d21f822ff7c25dd5ac9cad0c15674d786c8b90726cc3263494943b4df1d
69b362abeb3f4f27d3e9040078e52766ab7059a4c70cb48f1316810bb1b6
0de44152c61b486bd4927c7da82453cc7aceb67ec4910b836bfcb4bd5246
19f51c985a45dc1740f9fc1028e69b36f9da1374d77c7bc4e232465908e8
3d61c70e401fb487247bc6b635da69afea92b65cb76163c96127ed4c3d2f
1d50d5b3e83af9c05f5ab08e90a26dd59e8be706ff4db6ba154b1ce90583
906515e3233fef330d2e2863522b7bbf3769601d7201095d512732468f42
5ab46052350a9e74252f1e4ba70a38e1b15c3f325fc225d8565b5d4c6124
76e6673dc971be53922230891607eb11746f77ea7685f9bca613d6728825
0e600d3c07750e701896077894ae4d6997afc2d24e60b66b27b6336ef7c9
d916cd9148e5425dd3a6237b6741f381a354267c17cb5ece08bfbbf18f9a
f4014dd80e3c3651e3759c5c2310698d35c04d398f676f84e922861302ca
13e28e0ab1e22defa8946c8cda3f05178c9f9f54a814108cde432d89a889
acc2be220587d3c06fa471576d489454878f2134eb6fd47e75102e3d5c3a
88ad7edf1e8a353e90ed7c2a1cfbe494a5683ab86b8d550ceb6c3326a6c6
e67f42c38f4ffae0fb471f749f25d436a48be5dcbd080456e7d7c6dc571f
b6c1996c94a2de457dc62cf8680ed660a56110d6e0ce786342819806b00d
37e16233cfeb5a88e518d91a9cfb1bc16b25781add96cf2ad3f92ac802bd
dacb92feb81b73e09345980da56eb0b8e283d967a53b901d017e0a380ae9
6f896fc32babeb5d06e844183a3a93b92b50e6b430d5cd49e903841e657f
371636ee90e1f787f2389b70d26ea444261cd7f8e1ca690cb14ddaa00359
9ab8ef9f26dbd3fb9b4a6a36073c73e4e303050d0604945edd97d746803b
dd7a307ca70ca4411b444373bd77d2c33083963817b85c9b06b42a71320c
13a4a473b6994cf7617893eaa6eda982850075e76f21071f2e51cfb64b10
97552c786cab21c9bfdd5fb6a541edb6838bbe8637d7b3094745eef2860d
895605814b9927254e31ef8e5a18b7d04105967e4bed0a219c690c0cdc5c
7cf7209ba7716d682484571853467aa7e90919380d69518a8c757e71bbf1
e0e2cc3dad9edb416adb11ab1f8dac8c53b7bfeb682d8415a02595e96621
ccc0db713f617db098b5777b6071e88d2cf99021e1d95238f0affeff2e93
5da68f8a61c1b89e48e51cc6e071c8b844cd87f7d769761553283f94c6d0
b124708cc98f15e2e974ee4dd1acd3dcd52f34f7043b31dc407cb0702b6f
f26981d235bab637011e8ade6d6bbff6e51066335357f58d80eeb6ff24d3
b247e8329df10f26759a044ab6cf27ee33e56da7012f5093b7798ddb86ed
622ef19063f24ee3793977168778f143ab105307b94ea30c806a12345d5a
f7a8c68e33b53a80ec74d92e176076f162991bad2cf086cd6888a7e6930c
7967b09ec4cf8e955613e4191874aa231974a2fd1edce96b174a37b1fbbb
1848c7e62df4b0917fa899e3fb8440ffdeb0b4395a41d8f9dbb6c26cbc82
a7bd0882bba40a01958375fa18a11c8fe5dd4f88b42ecd777531bea31849
da410ea8d2ea9b3fcbaf0c5553d3b24e6ae36b437f356127f1089b6a11b0
26e3b48d0439fa82e3c19379ace075194d0361a30543dbfe3f4b9a70f5cc
7c9286ad48e53e010561ac69e0d78d95467a229cc4cd9418a9b9abd43b77
7216dbbb93b50e03060ae18f08c0c5bc567c3e0fd6bc5b9f238cff4c9b46
d937c39c770cc74490fe972d828014f3566e74d8da769a8ae060fbb82821
c6da78efef8c870927127c0b7b90a4c133cf4ed1b607c48e6a452183afaa
93f72195dc4ea4d975e4b3ae3cdbea6ba8b962d6868bd350e1d3829969e6
d525ff909a0f329fffc47fa639d9045703bb8d4a5af1bb1f7acace29eaeb
04a832fd56edd3b34da3d8e8dcbfd8a0e517b79fdb16cd428e7e59ed779d
89a1b17f11bae1160cfaa8dd517f7387c12541ab438575bdc6a6bf69d628
e3dd919addeb136deb47f5486b3da18faf11312427f462e1b32dc0e335f6
8f86f315380d0102fe7e1a1ee038bb39470fb1c32017aa2eb223c2bd1813
987a3e1d5ae4e999f3f6a932f97fffc8f2f9e660da641176680acb091cff
bf409acc8f4a594897b2b8890dcb8feb0ad4c2d390cc9b6edcaad408e32c
6bd1c8db91e197ae3048973b355d832d6bda6e62f629a7e63f8688efd902
3705880ac4dd17914ede817bb9d7f8551de31c9f55c7b229a3d428b681c9
059ad20a6163c8c632d0bac4558c533b95279ca5632eef618e6987581934
3a73337e0dc3c440b6084d56c6561cf2d34f9ace369501342ee45afc8a9e
07b69c1c3d51ee251a81daea807671137bdb5b1154bc51bae6361c647fa4
11779fe76c8d26215ea2638a6689cd1f576ee1f294182e9ac7a9527d5a26
3837b233dea7e93ee59fc60fc119509b9090496aaa06fcbc5f18a9f41a57
703b4a0d79cd365b23ef6f7f53dbaafc7092242a3a8a895a84357f795851
6dd28c5f7d187bd62a173b433fbdec5be7cf616e08ccaa455c38a725f113
ec6a5b093dbd4ce21b6144d9d04b4ea0c57f2c67e435d9433055a4f0ee89
33caa9a3483eab2bc19423e26bcbc31c568770b4b0b8337273b5424fe744
524388bff408b48dc2e5da41b627ba0f8eb9793c0f5ff059d7c12b90a87e
586138ea2250f0f19398a0381408113b8057c6e9d4b2ce53063a940c9bee
606dd9574d9c25bc6c74bc4f8da2c6489a0fed0c9c442c62913e62d89e7c
64696d27c9e829c8112f54fa3f30b26d7b4d2564c0fa36a383841b0710da
793c33fd2cd906b7fef8217ce41637e0db5d8e13419e938fb4d05df4a534
adc0d02314d18d29c73699066eb444cd4849832aec7925742c51dd2087a2
2191bb39ff26406dfd2b8b611612dfaf2ebb3b7fc0d4cb32a33a097a1c98
95aa3f6c1d8606bc1eb7f7ceac01c90d5820423e70f7845d059d9bf0b279
dde833059e8397051e889c91e97409f10838e29a11c3cbdde13c8267abbd
980784c85c2042ce6fee1f21efd4c6a98929733a7c86f69b04b34b115160
bd4ec1a2e54322198a65addbe9ea31743d5a1186170941ce00ac2a2bdf15
5c6947fc2a0ca8e542602bbb660125d8168c39f9d2dfb3ffb1f9d7b7a872
c297bc602b0a9b006ba3a852026661495d89bcb2d96827de5a9e8a3a4047
ea20de93eba7790995466099db60add03615437f374dd51bb04632de1334
b1740898746a333bfe1748609b75a9a658e1d7149e8c7a06922f63150fee
6b1b71e7a8c7a8107b983b1a5c79270148c6fb37f1e9e4d46511feac8f14
b86eb6a7c8b950598ed22cbf0ad0c0d04957eee167d2035a07ef96f1c90a
08cc761df4acafc3737fb5a9f8e9879ae283ae706fad6da29f456f8e9293
59327a5f271c06e7ded74af820d41902db905b37775da8d1eee1748bb9d6
fcdc61d3b3f5345ce61be5b93553fae15fba21829737737cb1d45b75f427
ccbf8e188e0d984c2fa38714fd2ec607217fafb1e47d913ac378c6fb7ed7
1b0090cad27567e0cf4b83c9338ed22c64923897474332a617b8037b8793
dbc567422916c5be7d17e6f3185815c5bb1c8652b9f9caf5f951008d1e99
873f09baef72b3c101f4b4644640a9354010c645b3904536e16789903339
0ec04f03385884b57062878d86871ab2a4373af89372e08f5bb179bb1971
b054759d1beb48a215a4a29d5cd8e1ca01a758c091a201cf73bb14cf4c06
11932fbeaa0e2b7668e6e572613215f917450b74e5bda21e7595087ec520
b1a17bb868f8b54699d3a565b9df1f5d369b746a1f381b28af4d88309767
8b2a54ba2406ab033777e1eefec6a6aa75e266eeb1f8d558890f3b370ee0
61026a815b84ac1e630b025bee5af007203969b5296eae12efd5e34d960d
f2f0f76b1b7c76ccaba376ddadfa8d8f39540f3b93b4334ae2ff3a63bf4f
fba63cc0d33ab6d4c591246b5c7ed694159d01bc50b06cd5c52d92e24550
687731426096b8cc5fc1d85f7c1092e38f30403af1d5c3fe0856608a35b9
28da2d97b8d5967001e7f84aafc830f322ea5989bbbf90706a7189a31a4e
68a4f29665b3cd84fea39898de7041aa94c14b8d0cca29203049fb5c0e0d
183a4f500e45e8820497ee47a8fd846a9ab14a21594ea61e2a8f4bb7da76
aa2d4764570f8ddd25bb0b623dd00f936daeaf50124977b685b17a987ef0
c119b80a5ec7c70500f249194f9845845c14b00f237b4341fa44c9faf358
f8058d4ad1b6f859dad99d48e74732a5aa2f70dd427fe02a919661a6cfe4
7f94d218698138128b7b605b82b2d44ac5a9ac0ef69f353f19121d069dbf
e599d4a5b7e972f16b9d786deda331bd773cc6f19f59fee26ed1913555ea
104330d18e2615082933d2a9f8be3c05681b9757b9792755d68c1d8efd61
fe9bb86d0fcef06c0a3ba5d6d7ba15f2e8f595c0a30f42e1604a65f940cf
44dd4702738dc52164eece4ad0be3978d3e8863b2161664c23f047f09efc
312d3ee859b82d7531a96f57e6b5c5f83d516749fbfbbd89fd991a5b86f6
6be728584a44e853369eb0d412736242ab743b384e96ffdebc2e0e51564b
301b75e24f93396fb02ca8fef643e446407e6e23fa080429c532eef4e5bb
e79f3fdc4e7860002dd4ef25b074b77f8c385859045f6db29e035d6d13ea
02539c4b8c3e34b413b86f455910cefdd23b31f35d552a66c39e3eeec31b
3e656e37220c0da406dabce3629519660191c5125d7123fc46fb6e874b87
a115cefc3cdab91086acbc3a3804050cd2481eba9fb142106396b7b9cfdb
7e2becbab43e38f886a2e03558f25e93e1e98877560dd8faa60ea68c4a51
a86e8388cd5b4a447d279816bc7fd2eb3dfc0c155d3ba80c118bc2817133
4b7a3452268ea3043d5137012bb3c6d79e4f83cd410b347f3ee54dc8944c
72e0daa01b4b2dc9d501ba8e36443f9786962295c177168f047e5932c77d
cc619b628c8653c22bf9d43d00f571b80fa7743598c843899eb6cc03d46c
c1961dffd6b80b7ecfddee903e5b31c0ffdc9a461018b768f45836d6a3a9
e99a9a584b62c4f3f49145dad55ef441f88ed28ef0e53bb0fe6e0b842140
fafc74e342f27315da1c44945588cc65c440766587f2d9996f61672e270c
9ae27ee6eec25fa4026fc9a79cd22b6effd7395ca45f5ceeb9429fb8dfaf
3d59ef69a184b5eeaa4d6e2b17e583912bbc33c4498d0714cb31cf959b81
115445ba903ac7fffb3dc14d4842a0d8f32f902041a5e5b563c0b6c28390
a93935056398a46621ee52181ad5f480b2e31986d3523670680586f84129
7b8864e715001ade0fd2a113dd2563f9c52931a3c152cad61d84def9f7ec
8e724926f04aeb0e11c4a1778ad84d465e01301f490e232f80a937bb888b
3c560d9ee4dceea1ed249e3388d545393a1b2f55fc6ac7736ba3c3700a82
b59f835ea64a9f79aba21c232a5543981e8cded1d0865e509561de78ca8f
6f19db4edefb44743a292f74c9f7d8676d83bc03c7aa5086429524b1c287
8599e42af728eba565c2ea94f5466817fffb2566a81758fbdfad105c99c9
bfae7a67df2d74a2741bf19e2ab9aa334585702cebece0b4ca87d7973411
38fc6b81c371c7a7f3365aa87a3c958159dedb2163a93ca4121e1ed7fc4c
51842e62e411419942e96c2d9a1b41e68c05a3dab933798d278b3db791d8
8795ee88d80e3a8cf401a6b392c9fcf11b5e26e4db8df4669e67627c0fe1
3e410bbf112ba75f2e011084666256f3031e8f5e18b3eeb5e6082d3f3bb8
0815d65eebbc72abdf9d7d3e21dd6dfa6ef00bb3f49fa8f0f16c6bad4fd5
b1223b8ffef39e9bd07da417ad874e1dbcbb84ed80eea873ae11eba6e3bf
367114e89e971adcf801d850957c0a6c7c02f02d3e7b31dd30f3ce9cb5b3
8182dd7a1a40120a2823d066cb87dc018e1c74333bd4ceaa09153447f325
6107afc9e1deb69664129d4fb65eec3ac73e45cb31ee7b603831cffc5a6f
31054cc06fd8b59386ae3301d4bedd8196b0cb689e7cc13f7bec099118ff
375c57aaca10bb230a8e8ae344e3c5a0f1867f8ef68cd2cc232bd287ecd2
ce93ce7d08e8c64b163e5f8151399503255be6ad3626d1e74fa83968f6ba
822d6591c7345265166f529128083410d3015ab43f16235ca52e0c294138
ca7df2e9d057b10812e2b8dba103d9712ebfe6d189a6eccd167b39b33513
419ffa49e3556953578e40aead72145ef7b10136cef12afbe720aa24dd1c
38c8d13ed0f323d7eebba1a48e82729f57faa900942739deb8c002afbeba
4ff005cd44df2153863246acc4b5f89566451e95b44da1b6f075125f5241
c3144e2e44e7a83ae3480eac156943aea99915044da87eac66cdb9410f59
cffd2e702d7b65ef43ca21aa51d92138d302f8913c6bb60b55954d322599
421e0185861d807f041df52e35169ac0f00b5f548fbb22c8829a57c301d4
08e3755173a99c35f09c4cd1550f7a84036ec6336ed26a0a2187bb745c41
58537872dcf461d43a60850268bf4049c56b6074b8a227882c20fb13ea5d
fd95f5cc691ec7839324bcc3a20c90683acc6239f4fce4f046d53b5da9f0
96bb1654faa5cae4ee41182c676eb53d36c7f9d94e65f46afdb0f6d3c03e
7a920b2526cad287a48dbab56cd4e70c28c80edf04541bf20a764bc11723
6b9372947401429273d199cb9e83c6e5d4260f306f5d0d3574d32f41b39a
f3e50ca6912b855d604979e5b391941aa7df21fd6024f04caecd62c2fcb8
f10c3e3671655e1cca3f2414e38289c5444ebd2491453b839c82df83fde3
d2c6798a9b016b7acd56f8701efcc7979771c0fd39c80774cfb3b99765b4
d35eda14f53765437537176e7070f5a3ad8d31b7ad1a6c1e6c075b519ab2
a83dc8fd9680565bb7e66e5838b85d1d7ccab2984b02063e9b78fedf2214
adfdf51850308110305a4bd2625e3bea740082dac6aea4e79e7283f2666d
7fc30fbf5982e0d02362e8fbdb9bee6f3992180398965ca4a1696a7dc88b
8fd773b66dca12a962a952589f14d3cad5dab564b63a20dee4236251bf9e
21d0641e366241a5d280386f9126f4d2f661ecd3cf856a85a84a553262d7
fba5cbd80dec2d651faa6d4c52b6b76f1c40208c1a179e7a7db4bef434ca
8b6c3c863e003efb5e1f8a15ddfb2930cdf3fa35a64c747766f235be456c
ee500840a6e55978270fa86e744c6a563eb8f935ea23d6e7a96d734f468d
d342551facbe8df84217f843e79a72fe55459943d06010200998795852aa
63b242dff5b8ec7ab6d511ce57d2adf5579b5c40276b895ee4a632c30729
66e6ad1c7c44d40b76dc8df7a1be2cfc90448eaf86982d6d812f8c5e5a0d
b7ee8f8e9a4ffe642976548ecfbdd1789ae5eec03d0fac859c42d8dfd8fe
15f2de054df30947411430afc1b89a670a478ff1242fe18bda1f07c8ecbe
4fd4fb76d39c9078f0ca84c234a72325a09c8fc935338bdf55b1431d91f1
fe42eeca854a3b61315603c66b6c80d1668309f09eba944992eebafc4a79
220c7001ec4d8b88efa0b206b0b46bde21eba07c5018ff80f9e32667b92f
4c85b863e1305af51e379a214e5acee209428d580bda8076f99804b58a3b
a07e5c4c9b67eb5ea7f5dfc7ca60716ee06f332508f7993dc4b555a7136d
6758ccd830110b2f47a065c9b8211ca8e1f5fa1a8dc2856512655968f00f
cfce496595b1a89fda81e2e51713eabd618c1112ca19e77383eadd35aa6f
b8d046ba063683f92e094f120b21fa8270ad188d1f4db169ae0adce58d42
ead8b9ae6e80151e5d1f78234d2b6ae5d6aae82be896f42d7af4d24ed1bc
cbccea2678962f7867dbb358a71b40ee3d74182ee06b838ccb93a41c5998
e8b7d116c4aa02fc919aea76d053d2434b93e2e265838696f8a61dc2ae46
4b8a460d0af61c32f0cf9e411de1f1573c29b51e167d3b10c4fad25b8ebc
7ca9bbbe6a0cf85e7aeaf4b4552184fd5314666c8dfd866afdbade3ac26f
4d5442145acf2ae32804ec979e54c3947c67de6ba77aa57948bef7c8d11f
d586c4c335b5808a4090166dbd01f523a9d9149cb4d7148c46159bf31651
66997c0cbf9d0a4ed87c135d2d8edbfdd7e27e1438f9441ee6d92e209a58
9015840a30da432c9fe672e62ad65e82e2b5bc0038e2fa9320313b751372
d1763c46a915968a24a718bf1a0066bc13d932dd2d3392ee5344249be9aa
9a833b901eb8a3fe0e04b30ca80c66419eceaeb32b34ef8070b31fb60269
19ea2bddfd68abd42314637e1052217367551bf5f8b7235c149883eb5e3f
9e89f45f7addc4733035b96c176cbc968560e0f6e09bdad00d6361ef5eb1
c659f68e67127268e460d0882e2ebb2637457ecb2d11d605f76b0b6595a5
8e23553311d5dabf96b40750ded12f19a079ee24a58a8cb7150c973c38c3
dde2e0d969fc507a333bca1e3d11657a1a835a18dfc87c75d5140a8e808a
5ce4ed24119cc0ecdcd04596c75967a45407f52976d94dd80a95741084bb
bfeddbb35cd4f84d42cf323ec4b5ed6f74cc2d20c80ba34592d5971a0e7f
3fdd69d4a657f48496d1fa3895780da1274fe45183e2fef800a6047a52bc
9d6e7eabfafe145ec39651337a35954ef31c3064f3e1e13a259b97234aa4
8ce76270b936e3c703b0eca00251ea27004dedce2b9bf0bedc48cd9acbc5
665bcc62cf095da3d574c65ac33eb73cbadb92ecfac7d9ede1c8856d382e
7ddf302e93f1bf83ec1c696f4ba5a8560e3213795604302e84892d758f29
bb672aee047f1a392089b9903a710c8e5b7c704139430716e260ee47b233
575c00c21681f7cd362a6082236ab74d1139e22a522a370cb1dbc3e3a470
7631d58598cc9e5be0e767859423f4d82212709c59124e1198892bee4765
e3ae606437a849a6626d7d525012e87d95c8e50bc5ef33bad32f1f85c337
713a5fceff664f6ed8182eddd308be93e92aef86c13f656ac99f5fe04a89
88c0919fa0817a339b8c105ce29c51f159296a87551cfa56f12769eac7de
db6a72a68589aa624df44e33983aa75dbabe44535fede56783dfe58e3f10
07f14a8fc37edf64e0dbec0f97adfb88bbf55011ad57106538d16d4c7165
5f4cf1ee0e3ab946afb2c1cb12314c87d4ab584169707c0245231a392e79
bd78e06edda02fd4c1f152c764d8a56577811690e1abf1342a4b010813ef
551ef15540ef3db0d8f0da2569ffab14155d1c85692a9b3a312fdfdb6069
669379de23c89f5dde4f89e81dcef83f6a463fa5ca7b32f7f054535b2568
1457879b10dda9509e5c1bf72256248553a281797744effafcaa8826f452
e99cdc7dce54147413ec2c892058f463ecd57ca9cc64be6c5f9028cf616b
f2a262290fc70faa2d580a0852d1ab0752b77284f969074d3279a5c66132
f655e0967aef2dae7621050e6c6026042bc1783ee5eb8e386042cae878ed
8f39007b98336c5b8f4218113fb410aa4869f8f8e546005f1ca5678637a5
eddd0ee23077298db4398f7acbd85531527afd7c5ea57ca993b05d319f39
a31c4bc680756404dd55e1edf00367d51084d51c86605ac50b7270fd0ad6
3bfbb7ba365f189ffd14f44a968beca17714de631a2af42473c45d1cb5a8
2f5db387804d20f6a3b09b50ade62eede4f3ed456ebe490e99d75f55e041
46df3a60f46058b85c4c279e1034c8c1ca0a0f612f33b3c8d8aeebeab483
86309bbf0323447916d305fa03fbc73a96f4f9ba66d3bc945d33774721d2
32f13491deaf263b0fc1ae596c99975dc76d90c5e9fbb74fae416bd2ec22
1e648cec472978c25cf592ab637c59316a9d25a0336a440ffca020c332e4
020976294932b955284c41f8c75518dd63f5229f47b1bd06e56d532aee03
2fb2e1e80898aff4b5a35302982bc6883f7d8f8c0b0fd1668271269da5a5
007242ebd4164408340c9cb3cd7713efbafe957abbf26ab02e08a6caaed2
74b21e3df8168a785400681a2f346aed2420ed018b6473ab236bac5c671c
ca564b58217dc8899f0106bd1cc540747ec03635e4ea0612d345823abb69
7a016a312e99799400923cde072daecddf807f5f74746b78226d706c5116
7c8f03cbed709e845f5035515947ed7c3512caa8ee14c47fefd5702b50ff
6a8aa1f4ad190cb950d0e91d2557062202a2c9e2d9d2a25ccdf19e851c57
af1d76cd10821095b18dd78f3448485d19fd3c4f22e1defafd08e5c26332
4b4c15fdcbc9f5c85af84a2dbb0299a170d178a46205b237c969cff45662
f71395f7339bcd34ba80d2950eb31a95f4b53986415d219441437d66dcfe
c106c9605b5ca0273fa790edb1a38d641e848c5bf2a6b04532b258f63196
bb2a022f91ea79b4a8971cfadf8777abdde10154dc39676c4d45e399c7c6
fa453270c967d0f8a1e269d15af1fe06dd9b1e97754347f2c708e1781e9d
c927548437d2514f8ae04230efd86a40ab9588a1e7cb844b7bdc821613b0
2a82b180ded369eda63eca54f5726820952c7207c915b1cb28afc66fe458
d7d45d6f501bf9cb79d2b3cae40caa2d3bf02ffb6b7d25cf4764c4cd0c03
547b76fe392cb3fe2c721a6ca8a35a4179703ca2ea9aff5c676f911ec77d
21eeee527b5e0b7e6cd362879959635048c051325a08f488846bb524dac8
94e0eb6390828e8556f272f48236de6aafc27ce90ee8c3b6e9d2847f3876
4288c4d4cc23edcbf55bddf609a501b7f43b9f16db20d2b76b697e0f479c
c015d9506fc2177a6d759587db7d7572af825f0f9e7b251bce580dfbb362
16f568a6591703eb7f836634fe1b2ded6d014ad11705bc921fd880c53f52
9656c2e27f15cebfa03d62e7e9cb9cf1acc19bd8e9dc5ebc0e5598f77afd
2444550a03d98cfc032191d615a3dc7b15ae1efd0d4278acf5ebbe0cd7da
6f226e5fb8bb3bf3821ab1ab5a9e6b03991cf243434a7191dd165d008065
09fb7b205dcf6f5deb3c8c4fc935bbdc9b211a861de2a059b7167aef1341
feabd8eba011e443acdd2c05412bb24272a354ec423861c29c94b17200d3
09941f0e2ac3021004d40dd47373b2f1efc7923b7d529b87c7a6274e1c18
cf55e09febac27af648d0b23bdc188932f6efb33c6f47529d6dd872cb9ef
2ffdd86a6327a5fd8c4fc86b56b2a498d0ac633b7c4e8225ef60b1b27a37
36354b49f1df6393ee8cfcb45058da1511de781ea57190fc220244ff8294
e5490b0fd33df48fc49deac25e7e10848aa4e8939a533a1d413f98ec2e2d
b5846482408adb47f1ce48df5d564a1bdcada997d6eed982c00be677fd45
01250510e32058f2f4736c35f9445d5779b39522aea2567bcb78c5982a28
de26a42f1b07a0bccd2022d30631c17ee6f63c6613c040984c38abd5efd5
a79bf931e0a353ab67cc9706eb1690d43a784d807e880274ddb247bc2ffd
bf1c9f3e3f6bffcaa170ef61c0c11e43e938f0102589015fe5b5d96e3f37
3f7c05138a9ee320a396ef0a7a51ae8ff6d07bf421e92154b5f13854712f
db8105683aebb6fcc5e56ea94c71e2eb800c42aaba00ad0831bf257461c6
38035979ec4e27f0b5cc539db442ab9efb34d08c4f16314870768b3b3597
90e86f9478642e3f3b8ced0b0d6adaccb5ae02ed3df4bcc138b7abd29158
217b0bce31486a133f7c0629f7d5700701e8590da755c19f78e40f7fb040
86d153d71e279d7b7a0c7b3dbd803c6c42bafeff44bd0a81226e64ad2e50
0993c8e1cda1ff1a83960057e24c9a009e9052fa7010f2dfec76de489cc8
3a6ca476e404b5ef1f9da2c5ae3b1df7872bafabee501ada9f5839a94f51
3dcca539cbaf34aa9aac93eff6e6b49f11c2b26168c88f01e4af9482f09e
170257c0566ea3c40a1034e540175154cd72181f8694634f4a47986f77fa
5521abf1df81a8f91876e7114beb5ce5c5f911f8f04d8f775db33af9cc0f
885c2b4b7d2240f0d3ab71ace7987229416523b0768a92253381b40bd29b
63c688b450588bd53bd436a3073e319b2d3cdff8f86c9725df43a9f7ffcb
2a712f4cd824ebe7c61928594386de6616ea3c0d65664de7aa35c3f6da47
c019a2e880b1e0bb60eef7f7d0abeed82c6c65ff164e58b7e6556da9220d
770e1f2e2fcc2152c905616eefb5125425094a849d79ecfcafd032f983d6
fcbd411fb0c934f78eb68801aaa27f71b7804c0ef13b5add54ccc45e25e8
4e2b2b67ba9e1b0b8ab34782c4f7e6113f1a2e787c573d05ef9261f04889
f6acaf92dc9af03435e1294131fd7102968d4e09e948c00387dce73fe4f8
29ddd7d0270e8cb3ad5dd38a169801cfc43cb73a876ceadb8e0901b4ab39
9e794d6f20514b733cb7c9c5bfea7fc99558fe1c1ffc5f0d1341e67b715c
619f39eaf58438c030549464c5b5509ddf5f8467160c8c04708d51566ed5
9b4e1df6bc345bac9e20acb7b713f41e579131a54d407bb098af4be7eee2
3f7288512d07a98f64cd0af419af6b2f103b8ce1cb603b67a8cfd4388fd0
a39d1bbf87b538410f3d8747302a850d668ecdb664d892441f158fecb416
d636673d849eb9cedf36b4d282edb72c691af810172d0f4e36a07a0e170b
86b307697e7795b84c5733173c537c2a121de0b6bb2b6a7ec5d944b88c72
38c2e41516fe3e7bc6f463bc545f8c464b9521042370de15bb40766b4265
fc6f92aa4416561fc858fefc4b8446740ca31e7f251a06551b2530838d89
78135f384ccc141c7a06e2b6d7a64b4cc91386c7391d4471b9c82ccf172d
f52eb19fa5200432f243d3e35bce70c6f7e0a2db4051afaad50579d194fe
7cdf830e7386e96babda3c25364a934b2585fb29f81a8cddb5880cbb25f4
a589935c098dbe5bca2557647a607d6d1d6e9ad5ba005fb72f3a9bf72cc2
7c653bc317f89a8a74db96250d8e943b88b4a67c88e2895197912813e3c6
95f93430f7aab30cf75bf830ea4e697e90dfee0a726135035599d9c7038d
e1e8d66f3c54f76bf44c4de8978196e8097fb250a4c650cd9862ab50736a
4729aed1845ae3cc11f12f476b560bc185945609d28eecb76e4177c96309
3e23fe595f226a790394459a85d490ee9b11beca4833b16f5bd0c90a2715
428d73989594925704ffd9d0dfeeaddb331175002eb5d29617136b85ce3e
a2ae65c83d79b77edf063c31422be4d749a9387bded9a96157e18aade83a
111af4d2503ba72420aeeddbe0f0ed55d3922d25b1be8a6af04ece72d7a2
e27948cea9bf8f154f1b90100871593c5fc070b8aaf056db8c98ee6aca2d
9be17321d04606fd75fa4a2e03a36369c6caf3779e2a46e4887849b9603d
f4b3cd0bffab3564ff66a2c725d5b83f94477a477d5171b38de75770f525
da99ad9ffb42ec6ed241bc7c0e4434d361e0b0a9f6e6f9060fc784df4de6
d6caaf0451d57307713b47e1835df6eb62cd92b9bd092bf388f799ae56b4
d1d257b571fdf1d78ddd04b376eaa78324e09430d5169eb650f22e610eb6
d19e3f498b32d5509c9e7a423db24114049957d2a8ec1bf1d88c645b2fb1
c9e9d81eb79aed95d933d63d8a7c33470a3ab41c43b2c02ce5a46bf97746
9d8f27b0c43667dbc9feb5916e3a4bb2ffa6d2afebaa7e020979846ebe0c
2ba8f9dfcfc3d3d5f0ffcdbdd3508a8fdacc1629bf70fa7d15e2b16c303c
0c16a18c6db670a0722afac4e2a3fa8d983a8bb6fac3cc36a85f135517d8
f6edece0e8bd8c7c6fd05cef9c9f65873f97eae60cd6a41c8bf4cc56c5cd
642f1d9dfe29a52a48c73847c611342b613b1a03351bc2567848097b5fb5
beec4fad20fcdcd6372a89553b416b5c9406da99d97a68e429124f0b8cde
c78c150278824ca8fa0a2a98c9bf2e01919d81f95512877a0687608a7b85
ae150857a5437850c4a820c8709ca21703b6cf72b37522ff70467f50cf25
c9ff52bd709bfb15ce6861d03451b8161ffe697db850e1e38005095f78f5
d1543abf31709dfd4672d3661745332eb51f6b41f2bdf2e1872723e7c750
02be840740be38954cf70880bc79888e0420fb238f820c65486a8821bd1c
3c0ae78d36f7a788d8c76790bd0f79758ef2adc27273ec391d3c06edd2f4
8cb16cd77fea7ac5b3773f695b5aad4e9eedb2a4cd83ac0bc8e43e81dcf6
321f43686ffd7fb845fe6473a54c7971f497d25461f29a1696faf5707080
429d5db988e0bf2218144648f79a09bbaa0f90ef10ec0c46f4befcabda51
4a8eed8ff884e1cb33391a90218b7e4abe5da06e5373349076a5248b9d58
ccd2d78fc0e9b9323ce94679c8d2d72d1a0a65800c3acfddecaea63d6caa
d4e1906b8fc7e3bea3824946c6abd5fea39d7fe05bfa721d575cddedf608
c7cb9de0801191d977dbf721ecc50e329876329b469127bdfd2ff4793d96
490a6e82b37fdd3e4e2f5f43bd728cc3ac61d16176289e8a981f8a7641b4
9f8105717f253d20f5a67d29f1655dac47235dc6a425f886a18cc89b456b
c72144727e904344f45cb59b9b8cdbc928f75c004331ad97bcd6cd33d783
5b50d6f0cdc9101e19fd5d24f84a424d1303343de016266c3ee9f27f5958
ad9ebf63d76b8e753fad74b729c9d8973334319616cb5afc369dee126c39
9c78f45a2fa6030c284b979cec35a111f3041a80b7a00cab58ef3b191a82
ff5e521302ebef1e30193b6203eee0f384a0a723c88adca461300f7586d6
d5af8a5dd0ce22e49579995f7e49e6881651552970c93e856008015e6b34
2d2aed1fda9c769678d353dd152eba11f4c52bb0c0e55292325bdc1f1228
4a17c146c67b889b25ec0e85feafdb82a4db69fecbef82a7994b8da7a60c
446a2a3cd8fe730c7f4f4e5802f3a5ea3e4f382e09f4d445a0907e7e0a39
a01794cd0fda9a6563bd847ef3f27de4d0627d4d1c7c884e6f0ca0e4d2b4
f6ce5ba1e7ec4de33d06b0d2a2e9dfcb10e1c1b41b3b7b7b18c2a85f4f35
4761ce1d7acb6c789f9b7bd07df1ae2d93fd92251ec8b96af7adaf6f326e
5588e9a1e7664fe0083272d076ed3329c643ce9a84535dd4cb286887dbe3
7cd04bddcfc25980353bd2a97a66d82e5e3a36d9e4929203c779c119ed7f
8abbf3825caf8af30ac0b8caa976fc493371eff831f11794261877feb4f2
dc5f042725c45c37e48b7b3a0991f392fbc71fc0ad0c0c584cfc5a11491c
b89922faa20f287211984d903ac40389cacbb32ceef28a858ecedf5440f4
579fd305d3d7191faffde8a03febcd393119c5d0a56c09df4ad75c083aef
b33254e1b5dc5ad9ee32a1a52a5b63324fdbaf9be546e196de79b400ba4a
1731346ffc418fd59d187984ce51d284aeb0212fbdf35361656f6e7c2a7b
25f192db92f6c6230902d2fef5051e470b3115046bc239d4f8611f68e495
b1a5ee27f728e19f06759f1cc644b9edff036e99b1523134462287d05c65
5abc9217ebb7ff27332134dec32fbc1ea8009dff214ae31e05c5de3b5e2b
7de546b38783ed9938f3815aaa7699b5947466209838d4271fb0fb7f5e4b
46780af2101a6c7a049689b2590ef307e3ebbf08ac736256e0710222cfe3
b014013fbbe3fbc4e8af09e60fdaaab9e659dc2a1223ca6d6776bc0ee7ec
3e64b792cc1bcb4b6857cc2a8a67308299f31883a84918743fbd2023ccdd
52210db0f0be5b30e2c438c2e8e7f72c172d367d4b47767b82fe0f8c6dc1
4a5cdf66cd01222a5ceb4fea9e5295484188aadfca4b92947438c5fc6b21
73c5832aeb9b94e5d931c5164040348308d11140ae66d2007c451656e0cd
c0009ff519d3d262270844bb188bf42fa1748eb725f8162613aba1bd5766
2f4a7e754bef1d99560bbc0e0a47bddf869d8c1c50aa7038ff85b450a6a1
c29f5685cd0b6b7706ed0670bcf5734c4fe9779c291aece8c091cba2de33
4f8dfed6edf5d05695fc1f275b90ba9328f00c168eaf281f0a0ac0310187
851b6bb5bd2ec96832eb45155c4010102b4387ab3b6b7a1807bbd8b29680
4e7db664db69c70900040ac34731889ff5cf28acfee7f584a7d454f8d5bb
621b3c73795127ca5283129bdc456f457bf26aaa2482efb883f7c1c29305
850d9067d98c2d7f50e46ff548cc74c38425690d6dc88f069c4ce70e876b
941ff8967f426f0b13c59416e2d3cfa4d8d70c4041d810d32fe2c7c70368
12216bd5b0f6dcb617bc73d952b8df6222eeeb5283b56276ccc5852b6333
63f43582cba72ca85ddfa8cedbe3da7605ed5fd11cfd9ba495b5196091af
0d984276a6d87127ff041777348b9ddc59408bd1a9246aa23bcd6faab4e0
9b09a2ceb70acc77d179366b74ce0c28c2bb5a829f56799715f5165d0508
583d0bd788f55787df853dc4f05362fc34d629a439af66af12a9cdd7e91a
c0b166865aaa813ec927c2a0e2d10b74d28aa4c906392e2eb2f859b5b96b
4db80b9bebe7d296a31aea664a90c118c13772fb47cb55fec6aa6abc1044
a1db744a75b3ddbacbd0bac68dab62621b1cd6c916f972cea11a467483e0
98d47e7a0dda254e0e564b9123ddc33314039eec3cda298908b2b1af9087
5896b4ce6ad2e930391481438e59330c6f2c5766afb94440c29176f192b4
ea34db735a207312cc3b7d13b19d338d71af4c4beb763fba0ae6c38d5c2b
08449b9be17f3e191379f6fb1cfdb99c559c20b7440a98f0eadca7f2ec4b
da2bd6e3ad5980dd873ae4fd6c0ac443d7e4633b6e6371bfdd0309c5fe46
c75ba73d5e2dbda1152ba061aac2d41dd905c911c93745215b369ae11c91
dcafed91f27cf15525c041b08e13e7eef49d6130aac238013255a822b955
ae86a97ec6f6ba0f27de55fb0a8e095e3e6059008e0334375beb42f8cc02
5d907480c48e1e7721b7d8979e9f6cace20a956d453b06428b98f306ce5d
5e3847a5d3a31985c51d50779b441e9c7a0ee58558f7c26cf6903649b2ae
315d43a87654a999dc9c4101f8f792bcb113b371d6b3f591ab9b06f73624
0c42e1f5e790f1e8200bdfa2cb68a91348cb041f51026dc082a9fe1c0a48
afab1dd3d4a4225248b4cdd5f28d4a59713806e58b63e99046df7bdbd54f
1ab97dbcee4be3e30e1d7d90ed0e8ad3e84cdbc96af8f756592fec8f7079
3393bf8463d5ec1654fc7a953d01305e40974b073a565c5ad2f80db2ed39
909f5d1c144649cd305baadd1c76da33143ac82e497ec3bfc8e837151725
45df94a23184a56afa0948db49937151a4f0ad036fe53705dd4d8985f7ef
6828de78c5638b6c27b6344d56b2e80bd6dfdee27021cb44d1a300258902
170eea1d0323ecacea1f2a7df4af41f3cc9a4737bc28a505587c02c68d96
7dc7a30fde487b832702e5d530290311b1a7ecbd95bbaae3972cfc281237
85fbec961a21f3e524578153eaae02d091178c0d596e1098d2cb5cac0003
4b5ea9216c83bde7bed651f0b0df1948f835f21a5875af1d32c03ad29b67
f8bdef3d91a7fd1fd6d7a8b6b242f87e19f7b7294a9faff802b59427b81d
ebb8623ff87e1ae539caa86a8b4c1a067e80b6de3920f16b7dbfe171bf3f
b8b1b8245bc34fae5101c38aee92c65af31baf0cb20d025623c7ccbbce63
0edc58dc1637318a8e9f349705a51cacba3b93c8e1acc55fc66752faa10d
f7138ffdd8baa8bdd755c998a41552d429577005c7d54d810c54c5a1323e
0df559f1bd86eac059c8db922fd78533c97a224fcbbb28e46b4d8e135c69
a1a06e4789bcbcb6fd869caec33b22429efa0e82a5037917ce122bae652f
5ec2bb95afcc9012453e5e2d90a34264de13f7d134e7bef377cb1639c76b
95975f4a0d33949c83c410ba2d930703bddf1739901efa66f9ab1dfd543c
bce78d2dd557cde70da3425bfd09eb36d495ecb15bd309d6a9ded1fa9a05
ebc6389064152023e975ee01270994f122a48c5731a2af61158149b9aa48
3983ddd140c47a80890722d1adff6dbab8418df384b4c0860dc490732c7f
242bca6b82b0092e7cc538fd5721825a947a96f014679bbc620990594f5d
74c80b38978f7da6c1de9f265d82042204db61386b526b42f892daab4d5a
f693a7134602a256ae7c4586b624f2d10f52d92da9d4b760363e854b8696
006e03cce0e81fe13a3cb6744d854cba981844c022a713840d7ccb392bea
03f7a7818dfe2f9389c435100bc267d89ed0547d6d62aec97a7cfbd492c5
09e1d069f0bb820489ca291ecddf4b0859ac9dfe147b5e7eb3c3483531e3
df996bbf6a506e61207cbb90534b4a5a9583ff6b15371ac36444340ecdea
5060f594cf6caf96c4ff23e91f50bd2289759d88ca155234e7bf81d1a901
a3470cf52af5d00a6b0f2579caf34ffb2019496b36763ce70fb017fafdb5
27c1187710cd145f6e7fd7f166fbb7230bd4952d0e5615fc27c4aeeac912
e4ba21039e8de24d30960c158663b2160212fdd2d5c29f9ce0eae6322424
b852ff985cae3aec9c1363b27bb4c3b41b65f5ea46a0d8ecffdb927186cd
2b1869e8d58c4e46f62f84b9ec198618ebd7535d4fda65d56db0760eaa2d
7270be3e711e7d5ad69f3b1f7c67c22898c502d76210977f7da14915258a
9d97e766e2e445be2d65c385bbe6b4e01758556d13f48176c7056501790c
761049c9625fc73dce0037e338eaecc310108871957d756ead66c71242f9
7b0e33c87f42408b221cfbe92aadde4eaa4488e36e8e9e578edd37c698b3
8dcf4e5a1a7afa80c1621225a259a7c9b051666ad8f129d98e3ad4ab97c4
7eaa882f1c2d8a7cc99c3b3644f3dfa7b5c3437266c0218010e4d5b88c74
7fe8d3a49878e244f6472f4cd8b49edd8e8eb6f6df7c87e5f24bbbb8e6e0
15d186bd42fd6db237a8e70a86db3d54f2f5ecfbf640d05c086dbdaf8e2c
0067ab1febe1413f6d0c7164f6350cc33711fe0f2088b67bbe90bca6c89d
46531d9601d2060ac757029a610b221bfe856e5c7544560967020312b8c9
addcd8f6b8116359743ebb89e791fe40d4b2c1743c1e5d6d5c11afdcb688
1afd503700aa76cfd7f2819b3c9d71f84ff1680b83ff041b96f676a0a508
d8a6608e37977ff75e53fb1f15b1922c66fd455d0c9e9584eb6072c52d9e
cb61245a7f7aae488f7636a0b7710b99297812b19feceec3c3a910570b0d
9857504b3a8871c15138cf875512a503c7d4d1dd0df06ba1c259fb05c5d6
d58f6ec699dce52f792bad6ea59178a1b71cd4f339e9b2abbf773ab53da5
9b8f30b9c0317d382b6b379e5dc3d68bc82312970f4167d8e83666ffa6d2
f55c5b28640307fdf3c8684e985e5c838cd17363133d5180c254a3ecf77d
a9f63a1be3078d06bddb809eb1dd887675c1ae9dcc400b5e3d738bc1cfb8
8c185e1bbc677fc40f5acfe803eefa08348fbc65beb70f9b6bf85bd8e963
7502dbcfbd47b2acbba999a81c23defc8f9d0b7794806ebf659ec8bf5390
19c60a67386edb7fc4a866f4a65277389f9961d285835b69a596e8208970
a09019d0b98baf47674d9909398fc7237893c1a4838af5e07a746be5dee3
3a4eb823e0a9d084c5ebd216d442a73f968fafd906f871db941811ec732e
f1e15d8d9ccb97b0ca8c41269459361101e612007f131aba3e4f5dc872ee
a49eb9d29a1451912f4a76be4a7cfd669066563374ff3fbdd7195f4bf3b2
8c9c53b5e43b38987de0a75f17084226b318ecde8af4fde70885c83de38b
648a960e2080d789c7b192ef3d91b238db441bcf1333ccaf1b6f5fd01802
0acb81e231e7bb6f6dd9c484e3ba371c361e6f38b03dcb22a15792ab4755
5b69b2f6a06a3a346594b2c9d93757863f0a8729065d3c836c9bece2640d
74d046aa48cb9bf165693d6df892c3e29cecc0d9636e83afa4f7f4a7caec
0973d9bca4110ee3509f7d63459324752077ea8093df15413ccadad7cbc7
4cf522ee900daf6bc94044c27699c1e17afb90b30749611a70d5b76993e1
f0e049fd5b9f8cf0364397634edecdd7998fbcf28ecaf0cfa28f67d09553
29b281edcd43f05d77eae8af1f0973f674c043148d359960b654ad84c61d
8fb157e9c4581c7c0a15e5b82936d1a1d5250cfbf28b8aa536b08471dc01
3846a894ef6bb8f756f315981b514f67dd0671d8877419e77c7ec2e28f33
d3e438996e88ba640cc7ed1b65b7d8a2331d1e4798fbb214b34f9be6f116
6e72e1c8695083a815e93b55c2952d9f5ce927cb11b7ac3d8ddee31c5815
352a977250de8737f30c0574c88858545181af92cbc2a892101d1a8a818c
8642118daa9533c47a3a2310886e972bdf3205bacf89f826b7916f384d34
ae563068a22a2b0a7634b74c86c6323786a4aa980449ef06db1d474b6833
767001d397cc78432dde44d64cbc08062509c7423f76a634af6e9d128a78
71dda1e0293b834d37b9e3fd523275e960c93d6d7e694391036b918e88ef
624f5f0f5a0d3b7f7ff33c483b29ee70f4d03a5e8f852f2b18f6342dba83
eb6b9cca236585dd707ce7a0964b7bafd8fd405a28a64bbce706bccf76d0
239c9745f2c4152f35c2f2f6342e230a8099d1826d7cf1186126d382d10a
f8cd6f78c981d6e0481f4f6f50ac8642644bf8ec988a0d1eb6a8d5b3f636
c03d3dde21eceba8a949ba5e9fb39f509e5d07f6d9a2423445007ddebae4
9bbb5a66af809c6843757288d27f2d05bf4f9ab97c7b7b4feeb506f14386
551b5c6e7d00842d20a37348ad97d921e323e5a8db160c5fe4ff92ac71d4
dbda162aa8630cfcf0c0662fc32c1523d9b0f2c290aaff8f137e4cf19145
f9f59196793ef78436f79486c809b8dbe4e9b9b65fc5c25c718c4f3f06f6
3b39bf54a2ec54058f2aae6a31e2748d5734d5e2aa629e3a7131f65b5cfa
ea56eaf71107a7c5cb8a2a96ed21a7659ad36a3e9b1c7d64524652cdda6b
ff4395d9b3073395b29c264b07c4c1d55cc68b7da4c963e5461fb516ca5f
a78b4f085dc296970ee7cb6fdcf959f949f8167b0ac36e47280f5bdd5305
48fd3a8b96a803acc9104c6b498ffaaaf380b106a539e31ea2efcc1ad753
5da0ea1e1b5158c9f14c505b8b7108cb95ce3532a2d17bf5c32c69651199
35fd868ae31e52255032f330c4775292003d9dde1a2f18e90638e2935a01
47b9761f1e15d5ed8bbf955547cbf3146bcbf2b89ebbad31437348fbaf6d
98233496e5ae2ca8bcee708ba9280e6008bfc02ad70cc891337de6b0ec1c
8032edef47d9e410eeb579d9c62c16505687447b66182a15475c5910ab1c
4201dc1e0c183106d719f58996f2cd8481a04136b5b2d6fe8b4439d64912
a90c4d6b9fcc14c2a8556465b3f30884b9283e824d515ba63328892d1c46
018384a45cacffa10c3531ab1e39605b4bc36aeb270d07b8a63e668bf0c5
868e55c240f9b17eb3bec47d1efef11d0634c805a2653ce33e3d3d904fbb
2c070535c3f36532fd238810fd48159fa1d8711924fbe556447e6a69eb8a
5ba37a8748892b477ea0969eba0c39e1a7211fffb2f4822e74fac71b3505
db6603d322aeb102b5677d6c8dda8845dba9486caab3d0e4d6b83f32e98c
2a520e98117ae34dab6a8b9ea24eaf7542ac7389e288eddd21b51027cbb1
f3dce41d92341e4cf2543cf7250a0310eb4a7de85bd425e7d646e36a4089
90c08181d27f2a249b725b4b65c9165300aa8d469c8fb1a6f9e2896b7042
96d099e85cff22499d4947258647e94bfe9e88babfcb6bc97de742c23201
532ad116075c2dc97d7c6cfd40d9aee618e986909eb9760fd2bbefffebab
57d9946b40c90fa04d63e3fedd58a58f8681a1b6dad97b5f53c8da0d7aca
9b2d99d42dfada74ab21ad14fc842ae148ef52d4cbec9c7f53dbb075fef7
a47b1535f2f4b52d8f22627ea55b8f517788f1802aaea999846745d90bef
866e76a64bb1053196428c6aea94a4b95488a897c7d7fb300c66b7f58779
95116c330bae0197f4c9c0ee4bdbedeb260f349c5ed4f104f7f78b8c2eba
5d5a220736d9b5f0f9fd78f3ee4ec70633c11f3040fd2c39dff7f34d3274
a117f3d965d3e6b7c0aa39d1994da8df1b7d43a334c33138c334c5928ade
624f1e0e6b5f1c4b8c21ee5a7af19d4f55eb18fe1722e8a74a32a4be9d0f
0e80a7155cd621c12146be24244410b6cdd8003ad699f72edab85662402c
03dcc340f96424da2451135c127062b060fc1d564a1bf7ee0afedda51b3e
8e55f0255814764cb399ba3d0e535b17a0caa7c249b73eca4c95bf267c82
cfed25de9c6672cda46b791ed9e327e7fd9934e6a5438085afb2b2cca33f
17146a6f460b6a294cc13a97899f3878086a27b51f8dda7ff50e4b6256fd
8b39129c21ef83c919f9e8afc830401de1558d24f1c4bf50af2699a5eb6e
af909d37571a7bec8151c8974221d43b89b30569009cdbe2de33593930ef
b0ea09ef515a6683107f79dde4b202154cc4d248cf2dcdc04975578a1c62
0d30656b33eeeb3b6d370425896980f6fb8130e9a19e58d93edb166f2e0b
970c4017b740fab810a43af7f65245850f6c8982999957d3f5b94b36b909
6ceb718b239dacdcedb042992083112f6644e4d59c7bd05856e3e36b8ee6
0c6eb495d1113d4b9c3857da9255771b2166e481f56f0549f26102e9be3d
593e489d4fdc7aebab407b8e3948b8618d47042fc65617187f6dccd6e1f5
3e89857ccbcc962b49e906eff5bc88473f2c729a76eb7dbe46ec724de0a6
4575984d5351eca92de17dae96d8011b1662329650212b7ca795c5ebe438
d2b4ca61eb443fa89af28daa9847d3fd5b1876f37eb390c0b6bbfaac180c
ff68307be56477aa792b2ded650623a0e740cc1f45fa0654474ea8f9cdd7
fc6501987eba6d4484c5178a9d685418d2b5b6b36722cfffdaf8a8a72ac0
92165b2cf8a1969025d6172cb42c148785e292849f0793bf6cb1ecf1697d
4e1bfab41c4622ee41ad9b58c0ef30e00526f93cb6d8d6f80f6854ee8de9
fddb68d6e63971291002e6389b944b99668fa284c36e16900cac491008a3
5253485e5d3fd81e4854d5441b3af1283db992aa84d192b1a4d42824fc20
0abbf740d5bfc7035dbeb4335da0cdf101238b992e250b3f4897102dc1bd
c26dd80f6b7d07933771eebe5bc0eec60c13a000b14b3c23246aae466ebd
ac61c8caed81a41dbfc69e811c527b054965a70b93ceaed4f175f9c2c481
e207f09cfd92a05b943c8bd6ba6fa9fd789f107319f5055ded2bf4ca5876
7575a0b7a7bf4ee01eb4038efa7dcf0594bc0d11e8bc1bce8f0ef374b487
cec644480c1d6a3cba15fdf9bfa0529bb62c329ea8338a5c60dc9367818b
af03fcef2862ef06840eb18893a0905178b66ed39fe0952f9aa7dfa7d52d
32a4760c66bf1f9e34abb7d82c1e870b672372ec12160e2bf9ae14c030d1
cee9eba70bdb99cf7f5977b850a22b8ccbf4a65f1063192f04f4d1aa5aca
1271294d719b304a0f65011d5b05be86d538cc476c1282cce5f28c2682ca
ec8a629ee92fc11877cbbfd3f3f6355c7fbb7d5bb65abfb102fdce76a8b5
c4b533176ee241f673c48a77dabd46bf00dec654d63744322e032a6e8b9a
74ef47fc0b2f26170101cd3a76b0ecbeb40ab89da8fbececdb967fe66268
d03912c72225c31959783433a00a8b689b9b2dbfc1158a3d7086593fe6dc
a89ba192a0489b574c09922be0c0ee5f8f3caa1e4fe455bc6293ea9afd16
e433c554bf92247e1ef8326abb434d5154891063145953d0d3a1341d9b10
039d442c9d60b1ce431258a14d0986aca32e4a91be20c03c384237bdd148
1edd3773cad603f0e894d43be339dc56785a33f7a6c62ceaccf9d8afdb03
bd9232f1e7c89d826408dda806b9c6112452ee544180f5382c9ccc0064ec
3c38e2296a49a9e4a0c14192e17a3cbd37945d961b98050d9826d86b6b18
e2cad8100d5240526e28f02981414919fb58d49fbad4f72fe19798801e29
d81e23a4a43abf68c9cb150cca23d7b7a619abc0f4c74da5aade9d1ae050
eaed07fb8650ec99273c7e812a7cb778555c8644464fbfc9ea6aaa61dd96
05db5ecde9d9f8657f153022b83abcf0165db4a0f8a643d156fda619766d
7c9955051cda2937fae5b64c15c95ae16cc8650456e3a1d606dc2d29ae06
40fb8c458f0858135c0ba57d15418368099992f75b9ea893d3d0644160e6
7b7e15c351d0a3cb5a966061556b6f542b7d8c53fa4059ec796d35b36e20
982cb284478f127f4b7ef538d94052e2fc4333ea21579e334d83563e4dfd
8fb54ad5e9746f4370248cefe4b6630f9dfe6a10aa906b0f5fc83a7b7519
15a9c15d0bdfc859b0d1092840628255404664dd3e9d1f8b3881599a4608
95dc4c0c3f65bd894a41891f89124af44b40ec43c83a2a091e0e7c556b80
fa1111730dad8a3c47a46b36c35f5fe6c11a110e21e16732f6b8ad2a49d1
d528ad22406659107be3434c183378c2541b924c8cb44fc945da8fbadee1
d8977596ce6038369a194612f1b3d6f55c3aec07d954fc87db5e534ac2b6
2e3281267873960d62f753a5a296d0bb87cd8b69d70fb41b18a4e671252e
8cedc609c2e9da5ec33de9eacdf9c73c36e8942db0ece05201f745ae7213
fbc53cdd409f91f5818364fc2e3cca0288fadc935cf804c90d798a412641
dba29e42bf3939ea404203325ab0553e866e2c94bf9dd4524cf8ed8b056d
83ce24bb91eb7d35b28c8cabfdde9b6aa44f2f02f82096586d0b1d95d829
a90e03cc9dd60d76bc2209bde80b3a3a27603cb44ab705afe1eeaeccd936
4657b02af6fedb638518110ee8beeecc1a09b1d90cdbdd7ace174ee84750
14a17cdaf9dc7a5fc76d85e92c56bf19825484f61b74f80f3e8394b517f3
5b72224f58bd851cdc6361369f82ed4a0db816868f1fd1f42556b97d786d
84c2e1a455661a0e0472c4db6efc4888508b8fa398adbb5bd66f05bb4d7c
7ad9b14f68d091dc750efaf4db85200b023e3aa6aeb4c5e739f803b8d8b1
bec1422e15eb36e5bda5791fab789ccd5d39f5368ccbceb32a6c31d40130
c68c9ba2993d233d15538bf61c42d587905012c2ebe8e54356c7d3d0d84d
e6d9b9479445ea2057ff719eb7954a8ce58bb9245620bd15fa4f24601784
0d4953346b0320d2fe6deb5efd7a9394c956752470530a7082f236622a0e
d39b3f77b43e24008cf8becaebb17c2ce2a47095101dc59e5ceccd96e506
e9fab7bdd9ae2097fedc8cfccea54528a14adac72ff17267086b8d9f871d
f825758a2e16d96af3d2cbba029fa972cf72f663f0d6e016444d416b53ce
1a469a9ecd6825b47e090758335aea50f825d81ae0e039a4836c188cdb29
0aab02906fee10d2a345392a2a3248dce91a3115cd2ec681527d2a98e0d0
3bc4dd1344a935064215c42441de373b29fd13403a930aa73a23abfc7fd0
b4411b0bd0a23b95c616b45b2bd4cb434455978c912157fe084dd7a7ae29
6c0e2c1b5221133e96e7d2d789c866e3a9f88c58f086ffb1b6ff6eb667de
4ff9613a886f5ea0a1b2e5b76862a7932d44c45f0d477db6be3d8373ce77
d6c831502f3c2bd9886739d615a0738fd77885a43bbdcb82dad344bfa58a
cc30ed0c42a26f12d0720259e439604134389185137b85988b943030cdcd
b03776ac270ab8651e0f85e6f168fde612b754e55329d3c39fce91bb4190
a88e1937a9b356a063cd6c23edb02ff5902f3f8823c6a0278ddd36138210
eb3be7201dd932ab71545dca30019614a338aae74a5e35dec6e0fdf062af
77d8d7aa66fdf93a3c35c368d5a471ec9d43c49b9571afd5295d8d90130c
123834c2b98c3da0945c204f55e8473399ef9c132f166fbf0995b767e522
cf5071b79b28326fa54e4c77536d120a87c5ee44fc6653329a8c54e6359b
a9e96910699011a091e864514231fb1dc4c020c44ab5aedc28439fea4173
7394775f8044dd7904761cc2f00d07a83c0918a38b36da63f3ab2c33af7c
4844f2634b85ff80347a283640e63afa7607c30b1c0066a2b30973c5de71
5590a6656da02513bb4f2909ba486c33e495069eabbc28ba59e01a13730b
07b50a0a69d5e9ad1c017e52fcfd8b00ff49594a8cad0b073f8507eda3a9
19287c1d82544ab5310f3c80fa2e9b27ef828ffee36bc04704e49374ee9c
ae672ceef9a37d158041a488e21438f1a0afe78562edf0f405f7488d7f51
8cd602e56cc9320a0ec0b1c1772172ac1d22c871f16ab3e49022d23915c6
4be645b321b8879c1626ca6549740a95ce256aa1f6d038241d4d064c7076
a877d8232f0a3089738ddf65931d735c1cd2757b3bbdbe9eb8221c233c74
91a95e73519286011ad2675fa227ba5664af2ded572cd2ef5561e6db9e30
cc30dd29d4bad76546a90a3604b037d6445cc1c45104e4ec8f9e192c7d9b
a5bec2904d62c69d81cc2a9a7c36212fd04bce60d6f662301e47db7b3d13
e9ef161139d955b62b737a282183004d8e71ab21c0e85cc9f0244398d7f6
4a7516e4e5fee564f9d595952605282428d475714b4f2b9e9651c670f590
96503b56c1271843e9ec2844a8181c86a7253638b2f9c7317f6eff82090e
25719b77d042ec8328dd9c612071a338cf3c08d731ada698c25bec2d9ee6
9f9a33ed265b5a50921d642e4b7006630913bfab09dd7d4045e49d3d4840
5d5c58d75bd2e5b405b0cf3b8333706d569bb3863a71dcf7c61ffe87be13
218cfeb8d38fa6d562e626a56a2b680e819a2efcd0ed9c65a27a3d40bfe7
ba3707c2b8dcce028ed27d6ae6d5c3c8114b478ca43293a279f8820a83fc
6ff56b15ae294734857d126c8bb542f06b0e1697baa952cb9080178b25ca
95a9344d8dbf6b7c627b3ba1ed214589ccddf8064b515fea27f30a4c7103
2b9525029cd29cf1aa90e4d387e4a2d945af4b814be9b8ee6ad64b7ed583
4f274bc83e6d2c78103df8df2b5f7d239c9bcca51110a8af4c9d88fb6b65
d97a4a86878b87bb4462540edf1748058ab1ea5675f1d7f5a0491a819feb
3d657b05ef3921a13ea7cdd936f40f55305af0275d9611d6757bd7d6136f
b8bf13b69a5049678dbeaf4a5810c6ec0a60fa0bf42b19b4ca61f3267d90
0b514de1bcc111ab093db91eb032340e35fecbab87061ba1eed635a40cb6
cf3e023fa2b85202a8c7c25c06d8dddff23234aa014bb3affb99cca7da44
e768580948144959559683b61b9ea1b24609140d72ee6ab46188b165305b
ebe77668fccb5747ea1dbb65d594e391df922a9ee257f7fd85c5489e58c6
d1e3ec3f55757c8d055a454f5e735695dd47aff3e03e4d47a36143d8869c
271acb8647644aef7843f9feca21a1cd6ac44f44d66e3ac85b75774254ff
46776be07185124499ede06df2c7c009a19d2f902b7bb8be7f0cf1f129c0
c764707e4b171763cfce11d9d916200ef9e577e81fa9e1229d93dbaeca45
60c46d1255df727a2a7756e3f9d63b2d54207c86db9f3cb21af8a702f569
c3de908350876540a2dc3aaa35325530cd89b6deb8808bb9ae70538b829b
aa0883ff870133bee6abf50e1b71d8be7b6d22610f1f49be7b8eb47ca4d3
db4d7fdb289e662dbfca3a78c621b5c2fae352e3b08239705efbac1cdd1d
4312901ec49af54fdbeac6e787b920777d5291bdbf55491b062b1561dfb6
8673c818ab7990f5ad75a0d02daf407e9a54fe2ed83d64baad8eae2da65b
9b9e36a410cb4455a87b2d7b7ad55a089fbb9c0505c1e1b85f41dd8c64bf
af9f6d327bcd284f923a0671d5726c7241f5796966f9997dab475564f34a
810946a995f51f13eb1ae5d23348a15cab7766dfcb98dd3457e800436e15
d2468ab26c077078d703d06412ad56f94ed42f3a1371093ff61622339459
4981066806ae5c68706c0696cbd92fd40e5593d87b85209ca8767f42095b
c2478acf77633583ed4f079b39405a865f0cce7d34dcc2f48752f4b37629
169f6a37356d37503c20b50164976064e4bb8b6ece1993e0c64e3047e3ab
50209e9bd947c3a469b128bedf0df5e8c295966ff0e5f8f293f77da9eec9
85fdc9406c6bbdd6a9d873bbd7c8e353ad2593718f83a27acb2dc234d435
3ce0a46f7a2298706fec1208b6a92cb4afef6680ebda06c0fb615d92c299
49641ea4449c42e6f55c8c835b8e3be6cd0fd9024ce2f327ca415559cb60
f07ea8fd8c5fad36ec5edd5fee1b711364b18895ae53a0ad61bd57f6d034
f556617650a9d0adeafc5641693534b8c1873322049e79babf3286fd8664
07e5e0546638f8182f0bbff15e6dbe0dfe0bf7297d097a0ca7bfdee16262
1041f00875d90fc13ab3d6b259eafd365d9499a4d1735f2561ecd2ceb238
848826b959f5ebad86b4e9589fa9487efc1a84b3e028846dc19d71e289e4
49892eea32c96252611e941f4f456484a719c71d2dcaebf94a1229579d11
85b575f87c6d3e5bc2223f84f8497237fa037517a961d0e5e556fd191445
50781682d65b85645a8c02ba1bc34e14a1dbb0ca4193561ad6a84129be63
0ce2df7c87718432ea04a5c05d60a7aac0ee0db2bb9c0f5c3838964d0051
91fccf0e76b3dc6ebff552a0f61471b209812938ff68ddba50977ab4da08
105ef4589c85b6fd295a373c5cb0079da9628cd6ca6f712695e0c6d31e92
69516f147932dbf4e93fee40208069c06bed50adc4557565e9da39e710a6
0858590cb6e1038bcc423876daa987f8f4e986a5d22a46502f1987b3dd1b
2e4ff182ef20b613dee5f4cdcb0c1115d3c7988d600099c007b2ff84ee35
5bdddc3b096a7b4442cbd1ba52ee36059f863fc480e3d8afdc6c03e0fe8d
55aaf60a8db33984162ebdad23f675eb4d8107a17204deec04c69c71c5aa
3d711323681a54542de094fe69852de291f3eb7adc956e6f59312da38758
03d741ef96f676daf91870a9720004f5bc7a2cc81bad5fda76c1cbaf1279
6fd150b66701a78dc98e21e735390001b111eaf0efdc775fd24b330ff674
8f1081e58f34a30300f75f53eaf51458f49882defdda3701894761136075
e61d60cebae3cd4da3ef4298864c4b985418a2a90b1a4b34aaed95463b8f
7464477315ac6a9f24b54f6f663979ec6019d1cbefbed74affa2bf71cc49
622b006026b7bb5cc678865ff338fd33d4fcb0e9d6e601c3ef9c7436efbc
0a1f3419441573734d9b2b7f1404affd5da808231c79d70581e7962e28d1
94bf51c862a0dd7817e16d038cf1701d2d223b8f26e7f798865c2133d07a
76842609e65ae33d166806cac9c60a254f607f0b73fc51a7e9207cf50cce
2109d78aad5aac3846bc821ba5ed3108739bce84461788f9c15c4d3e5b35
a5c32dc0eb78059f7eb589ccc6376d115cd3857a499871e38fc6cf0c7887
501a0db0f79dd0f22cbf081ef8a1c28037fcc608691601e7740dd085c546
67228968afc9b3fecf4b8bb13ecf21e497e3776645e4e2cf470af0f64800
1bb5f9aa61e1fc9ed4674fc72acf8df2fb4d17b0bf1cb3207a22fb490dde
047a86a4f81509cde157151e7517cd58432ad8699ffa8b675a3067c00ac4
b338727be9502c65d97887187ac6813fc9ed08207fc7c4c727be16ed9ac3
10420f48665555d911a76db6dbd969d621be92eed6ad76ed6adb8ac0165e
57eb66041018c9d0e7213cc7addaec1e2d4fa786b322a6846528eb4aafef
eaf87af102a0fdcd662389f076df7f3a1e94b569c49d4883cb49c648ef87
b8ca65b6d8120046727e58eba8486c7bd53cb32897287d5217beba8fbf22
22336e94cbd249d4fac2aab2d13732ef36a33df4bbf2a0868557112f2164
17fc7adbd021c39dbd09b063793abdb2130ea51985d0397f7ad8691622b9
180daf533310a2d570c0e1416ce2c7715952b3993b3bbacf38f441088de7
31caf5e4b6c729d36ebde975d9dac1ca59951344f08273ce6d5a2b545cf9
2dd85ea3eec548b789df3648671fb93acffb37f747497df36e4be3282460
dd37c71420d52414121ed2a0b62f93f760ad082d8f86853ca647453012e2
72bf202b7379470dfb15f8defe05cfe81bacb5b1e2e13a8d322c89151c6d
01bc8e828387194e5f0ffb39b3989104b02b2731f6ddf85e1a890cf0835c
1d366fdb317fbc4fd18b2bb4208e3be7e72a51a03411dc81036cc9801a93
ee192612110dca56719494bf32f46fef2467506b14affd10252c21a7c594
c415e6f5e22844107c088145a1a290c529841e309df2bbba7586fba33871
0345bedfa6cf85f8bed58a64e6f29342c309e378e3c7e0946fce30b575cf
4399baab00342640082429850d99abca7d2ad411a64ca2de890ede0986bf
3051d8ec60ddcddbe09ece54e1e8e291efd49dc675ed9fdc5371f7e3c5b4
5aa7c2349c34372fdfc79b08b44ff9a132826960cd1e64d75c174940a258
4356e85de2bdabac9c90d338aee1df69045b4beb74868d2d8270bb63d684
0e204b9dc1618809771817c9a120a0c1400b9c0824474d096ce7bfd7a6db
713d2a71463599f669a07dc46693539fa2bc73f06edeb405c7a0bf17c768
3aebe235832de8cd061342f1514b4d3c857238c59a78e60b2128e5e70381
5504dc37441a570fb1fbda2604d1cc7a8d6dc8ac73bd254e864387a4d679
9ed8347def85375ee28d082545cf6002a33e88b5d54408ffee5516c6cb58
6a01b800f691e190228344051e0eb500a637e8d27b7a52eb447d71b6a197
5e4236288624db9b4e946aaa450f4252705e3f045a0cfc9f04dd79ccfdb9
a49e96b250126f626e2a28e34a2aa380ceb611b6aa099ae7c0e99daf3bdb
604936cd0285268106c556611406fe965387e2667211815670804877df20
f63657c156f5ebb745b7248117832ca621f90fe4d6ebd4c49badc0717082
4b1cc7e08ed3087f86fddd63adcb55b5e14b24b40dd865ce302fd0731638
e6c5e33b506a88d31130698e2717933139429e4e8ad974922e3befdea5ee
a353e7c4cdd69885c562862537971149bbf4cd8ba5afd8d59d175b352b5b
daa072b3d6ae2a7bf3dcdb99ef0e1b07f801d0e96777116511cbac12f612
5d6a9cc705ad9b1ef7cca13c739adaeaba33ecf82eb2b1375e3e05d440eb
828267e24fbd57b9b511dae986d718a8f747ba7b069bb61d5906c06dbed5
b7ccd0c6a760d11c7d9aa0ffff78048a70e96dc2c57a354117b6d6e90e70
adf14d10363007ab1826ff2319dca7a37cfc268c393afe1215356d02da5c
d90a9b31838f249eb5c4ad61b95385653a54691898d79eae295b805aba2c
25b5d61e17f70ff273f8f70d657cdcd3847bcd95c4c9585baf67e4560e01
65cdaf553cbcd8a447533edc6bb75fef42cf48ccf23cae279eb6b882c988
72e480eb9cea4615b4039ff7cea30d1f7b63ab9c3f0374826eed2bcecd2d
8fa464bf003664740cfee8fe8b283633982ac442d784cd7889942fbc6dba
3daaba2c9b3414d282eff4660f0870ff8a6da3a6340b69c4953a622515f0
70f61780effae1b544cbdc1a533b40d8facea69f47273dd5561763f3a3cf
d7976129695637cd804d24d56d1afb64ce1f7b602e15ec0d533df559f15c
c4d1e17fbb1608da7b4e994746149524131052c06409fc00a2c5003cde27
5163499fb8803bf448b7901b16b58932b36e217238c9488f3125ceae96c7
81f59cbccfbac5a8ad7a1f59eafd131cd1524098c4c0810c130e1f123cd6
020ca115ddd54e029b7984ef50c04fa5033552e16f7b1e5b2e6bfc8f4f71
78ea0bf37f0e332fac9eb6a7cb2cbb2e043ed09378a0ad21bfe48c887cb6
775137248422d963502eff869560d4e7cdf50e8c7fa38b8d53f25f04f1ca
3eea955d6fc2fd9e79927fa1c7c98f221cabadc163075316040d9781c662
145e97fd1ef4e51dcaba782a2bf247490a4d1eaccc607fbc01d51984788a
79ee9f1242fd01c7dcbb374c0d681f7ce5905c0faa03d4eb55ff8a5ed61a
56a160f22e443c7d267706d16241f197310cc495d03a60dbbbd94c018d41
7598fb3eb74af255ceb27186497f8649dade0d6690d24fcd19f979d27a4e
9ec200a59e58b0c03f082291a7a688de6b061f5d56ee9d20fbce4dcf7f13
c58ad8d931b1b2a377e142432fc95eb21452d49622650c92af8a85edfe0c
2fab42da559702b9f12e0ccfc0a73306714b0f0cb28145c3191b620db029
46e7c1f3cba026ddde38d01c1f1369d251e7037565a46cdb122b78ce5709
3f4e60a4e4d20a1c5801f4c524b3eb458ebc124968216dc9280d77bfec43
c33d6067fc521048c63051709df208b63d7242517618d08a0d139e21cd5d
16a63b994cd7c59dbd1361b47de2cf19689ba3b2a632a87b2187aaf8e9b1
eaa994c82387024bc8f881ad702496f5291a05cd2a19dee014a63dca8f40
4f530548245197841ec4e3e84de2ee4edf105f085df2aecd2743d049357d
e67268de029b3b387b081ea8957212590a32ed5590ba8b6f87d41d70a06f
59407b638a7db135cb84628317b27784bbdf5c45119e4a06298c89129e5c
c2867476b99be09a9b7348158c2d89df586179b43d3c12b3e45f81877dac
544e46f1b98d1a3ba38f2185c1451031e40e5cdba4059ea20b26c9de8a7b
e1064114c084d150194a4dcfdbb9a019fa5fdb3d7ea3ed788f1ff1a67407
71f642dbf49c282f7535f6626b7dcddeb1f0ff6431e22371112d8b857cca
91c2cfc4bdcd7dab7bf17e7d2e475b3edb9a50636158bc1938f1e378bc39
3e7c9e920609a0220c1c2cd667ee23d52670cf67e9c92df8f838eacb89a8
60d7c730274c74fc4cdb79b96bcf54dd76073594724daf6eb36aef3005b8
bb5c30f5ab6947f5e24b44e4eccc9118d647de4b461bc79967deb9e3edad
ec4f45156915c7b4d14107ba6dc68bfc782aca69f9954286445be2fd2f33
a5c7874d60db95cf0c86e4514642fd598363406fc502c7886e106204625b
b4e3672cb01eaabcf34d8ee39b81147f9895354ab142ac5bd5c72aacaeee
b96bcf20564004334423e34ba227a2dbd34e94fdf7f610ec9ec93dd8a0c8
ed9b354383420dfa01b726e0a7327810535112d4f60f7fa8fcce10db82a0
58fc345b22b81abd440df08e1fa024408bf798476313741c575e6666d2f7
5d05161a8c7141296611405e1bf44d946132ee0c9ceb853b6328c1c24d04
4f001d02f2b18a518f0427e66c847edb0b6f1788f4f82bee1c165f1aa509
0a5dc59b9cc5c9f3b2d5436b1ba7c660383047bfb7f0a99c78fbc58f8540
b7f292c6a29c10c5f30c4af14aec9f98cd81bd63a41091a181627f905808
7f6bb659ad707748b22db3401b8545143bcb82f9cb2618f26ecd5a491d7a
37d6e8038b4c506dd8ffd6ed7ab1dd4e0c539edae4a0464575c0773cd5f1
0f196ab6196cff0911f96e3d3e63f90cef0a7599c2fd55c2fc44db8d2790
6c3fd96d5aab4b4f4a0fa6336cdb3522b614dbb72e9d6fb3345bf55f46c1
5ae3842c642837c8e0ca26045edeec9aade708370ab72e9bcfe09ee2de82
d15663f9c790f6ed7da13cc8db482d5a1834803578ba7cb21bd7841bb3ad
e28e38374fd1c61cdd6971478455f9f318bdb266da1475d8d8218edf63d1
843ab341ccec19c342f951ea43cc06361e575ce2d590793bb7dd547f3eee
dae12dd6227d55e90b7bb0f24275eedd325ed6749676b078580cca5acc85
fb7432fca5886517d9579169a0751efe3b9a7d02959ad83e1c039a10a6d1
a930dcd08be93d478dba6f400aa04608979fbcace9328ef49e497cfe20db
51ddaa92cda370a58c28f4bd02aa61c47a3791340ec347da0d003937d5d3
0c424b1b6d437bb3af8d13cf7e14d890e2643f175b02e86941041304fa4a
a8eb0909e26596dbbbf09ba0fc9d9c4f8ab4d5edd2dcc1ce67d80b86bcc1
b99e1f47be09dad6b7a54094e4f580daf740a9cd348e5ddda09ea8c8e883
93cd974e4e0bec1675d71b77bab528d4baf96771a97bae3450897b1da085
5a9c0cb3a8109e2d2db0b6232086ada3fa6b775dd1efc312a4c4364fa757
bbd3aef3b74412c3ec265c54ef176d95a33726aacb4e4f7fc001f315b9d3
cb29d78c661f441ba16d7caa4f002525cd61a7b4074f334dc50cafa54664
4c6ad47532bd0ca355339800750bfb291d8bf45f0481857c90dc1cae8409
792f6bd5b457510357e4aded1f03269862103fc15d1656b7e71b80b81d63
2fdc43f65be511d1b7f264c047ca6ed5a30bc135ddd3e3d4785708e96ade
aa071c37ffc75558a629ae9e4c51a2a53f75216a8bf241dda9aae8cadcbc
5cb2e39e98a471d7e59ebecf925681b4b6f43c79a648c9c19c93b7e6ac27
06e56d226119f6ca9032ecdfc674ae9f23579e3584fe79df404b0b3e565d
b64e2fc4e65a19231f211aeabfca7c40ba1e7bef1a7126adc246bff15040
dbb4fa17f088ac6bbd53f2c651969c3e0f3c6c42d967c8a3512dd3742e21
78847d2cc5014e9596207d16c00fee9dbb849df8da41abb0c278b7c2bb23
fae9ecedfa153d433fb3c5f7019d47e53ee8ce08efc9b4f57df203f178b9
81750bbcc5bee511ef5268ec8e132f215abb8e283e73963ed35f971998ef
b09e926bb0346cffac6e353f449aaadb4c91cde3d615c68f3eec5dfdf882
8877efc37c3cd73f45b2a63494d806c8c0a62c5aed5f689893c21023c250
89a0f6203a9f21234c260a4b37c0670135804db67bbfdd14815b576d0709
d4582d13714303cd33fdd62568c2dcd09dc708e4638136cb1ec60d57635b
6eb49fcfee159265de3de35d410ad832b16989dff6e85e8b3206aa3bb5f9
94349df0471ba81a697e11f9adec3381617c77b430f5cc246f6b502a63e0
a470325f310a6075d261b71736032496aab53b0d65c86049261435c24480
abb2e1777e96260ba132958d3f4a8ac882021b643023deb9bde33efafab1
86b50202690bcbc91f34487e46a278f96217535fad54edb77403114cdd2a
0f49f605be24d59a08c6319c4f19621e9f47d5e3334637df02e125aacdb2
806d744f10121175eaac805f91883b897fbb3ce3de75efd5b28cb67ef94a
c881f413eebd5f92550608fe6988a93c6a56a0a5bef26f7ae1366272b306
b7136ee770cfe8194573182c882ce4253a59f52b31c99980e8e96c93132e
2484236d8e577a6e2c89dbf43e81d9dd24450d088fcfaaba48ba6da191f6
c0b4ed7f54d30199aebb368a35261cc3d96d753de979b03fa18ecd79c244
98b25c3a4134db404015b77e50cdbc3e39bbbe3a3d559e28bf10806e1ea9
bc819eb5d5f360a0d44ee7749656739b63263f44f3c10f79a09a18b94d22
3fadcb66f53d27cead4a908710adb0d07cf708fb3e59fd1dbeaed406c160
aa05d3f30f9cf1efa40592c04100a2b60cc3e89589b18f202a45d8fe8a05
7d744202e7f6f7c305138dfef7b41654bd6e9bde6935336f10c930abc4ce
3d65a8a76bb3b9c8a9ecbd2cb8637d6e9a43d0ce79f50ce1810491fd6d40
358f199445742033c4c2d032f09283099dc20ad96c07fccba64d60e31af8
87544733bf4df9cc02adc2d6830aae128cf3c92d988d5cd8fdb1edc8bdf3
65299b2e9a2618b213aeb4b147c5c6d660fed95f596aa54d6e883087b3d8
c9e5ec3fdeaeca920a2faa6ef85aa06572ecf8e026b8b192a053d8cb58b3
c30cb42d3ed3c000578354df0595947f881fafcecc732c55a010139125fe
9d2b52e9a673086daf9d13fd14f7b1c60d9f88a698721af19e0f201546c4
3eb0243c87db1a711c9c47404b9adb938c05343975c221e6c7370ef00787
a9f573adfedd71641451367f7d94da86acafa8c692a7b6e3e6b67210fc50
557728c1cf51e304ad8406f5718cf656abbf6afbf15876075105cbd9ef6e
2d79b4e84629e854fff4b07f3d843d52a5ac4a997381e471476d49b35e69
a1decce67244f147dc6a37b0803c8a3a60bf246fb375bebf2f7eff44d226
206ff005e1a1396450a41a9e6bceb7657bc9dc6d6c0fbda4e7f17d8dd01c
d65cda061d8774e549598cf33d0f3c57b161fbb9d7ecd0f5bd42dea4a5ea
15f79a25fd0bcc3f6af0b6b8ce2451bf15a2722108ab739ad166740bc6c8
77824d97a171b61b714802924eebdc3e724aaf3515dbe8eb9416e6613beb
3b90f66f5be7c4ded3864a21992a719c87fec4159404572f473046f8948e
5e3b5119a63d559e0cf85e67ae49753b0888f16db57cf5f43b9afa55794a
a12ba8d041daadca7eddfa2b096343c17ef900ebc41c40228e814dce5dab
f8c0cde3833a0c54c5b50b0b18d2942dbdf8ad140c629bee15151e4adda9
b2d76de078cfeb6d60cfe72b815506f3a79b0703dcbae26e62bbec11063b
51bd8b2c0a9bce5078a448c934292c2b105a49daeaab2339d082454b33bd
b01368cf6f41d9b50f2a1c1a96a11cb057ae261cf03b25b07916729b23ae
3ece54c1a9a19816036d1cb8aca7934914f170182b8199810f245f8500ea
bfaf7c76600fe958c486b63471e5414d66c63188050d52ee0ce6f6c2b569
7c966da260f1160d03b08057416640213ed1c05b24e98d7f9760d7c73be8
9392f62b8e8d6d42a8fad78ecb8186e7a23d1b6c959e0006b16949c1d6f8
4a00d21e4aa4ad26ab2187d246907d77eab2059d18bedf7e1405626a7cb8
56a749b455f19d5c93b00cb4d9d253513975d88421e854939c1984de66b4
1da071c05c065ec8625c45223685d6d1c97650c60988e5f7349daf33f075
be7795b696c3704fe7ca855192a1151481970518ba7182eab768fd6c8980
73ae0c6ea8daad79928905d13314f58e353d85bc66bf6aa36758aa22a405
c72b6c9088e12e6cabb13c5e15bc26abe089cf56bc58b8c99547029d29f5
24151aefa0a11c31b2f33016acf42e6677eef59ebc0e16d4658d4eaadfd0
f7d5d4ff19499b0bb1387ab604c945a84503dd47713f2f2b568b92eb3311
0bf7a5ff762f954a30f8705191dab708fc8394a0097c89519a18c27a1499
08119e17f46e82cac99c43ef86a9aeef7b6dbfacee089e416a63ed1110a9
6cebaeac2fc9c7e032a97cf113a62537cc4d522cd94f7575eeccde8f99f3
41decf97f7ad9a22588b4f26e844d9ce0a4ca28773d91b4c15a2c33305b3
c24306a3fe6c4111dc9b7b202e6bf722fe7a8b0ec2329eb4014a8f173dfe
066564f1935a5d3eae2d6b71ef12537b2626050037e74f1303569f3cdb66
4c185aae8c77c3d5fc35307480e37ff83c6603a52ceb641a31c9157b529b
9c9b2ba4dabcd5700b620937baa60cb9eca2d8c62a944c283dcedede379a
95193f4acf8974c78677c989af9831aab2f292d30d92947bae7e7077ffd0
b524598835077d69278db98a55458b6ea778e46ee704b5b511a7732419f9
6723ddd168ab1defdce625d882b9098806e89993a21f5f4154037252db07
87e71fc3967db42c19f1e7dae7857cc486b5900d9832c4985e3db90b28c2
91dae91462b1a5306fef37360f5676a13958de8010e24aaf24cd7edabfea
8131a140498750fcd95bf0bb81d153470cd63511ed7b0c294df49a9af55c
698bc14aedfd03b26c008eeb86ef152b477c9a3185219378a2c0db0827d7
fc560e1bf7d04cd760f5029c96d2838fe98cfabb6b326d1cf1d8775aa1dc
602e5be33cc4feaca673710373f5e53436636900b2cf5488fefba286e9a7
72a84ec2a8bf976844afd7e1f0c7aa932028cf89fa23d8407edbf85120cb
ac2c3ecb46e2e58b314bc2fa2cab55a79ecd36771744341564b550eeba14
d5c21a57c35ed13d34313ba8bd24e282c0e65f68388c1b12a60dc047f466
ee125f2c51ca29859959522530a350fdbbafeda822490e7d2eeda9349403
e32a922572e6329eb4a7285846b2e61697cad7c74bcdd54d507876353e8e
685329ee245bc27e47c33181638042dc20a917ab522291c57c77a0b08899
afb784d8f9388cdb8e47358a64a312bd0d3dc22331073dba287173cb401a
d011daae7ff79e8aa6819491cb7e016987278bcc5279e1353ea6101dbfc9
850ad009f1b629a16c6fd7b0f7760cf51744abe2d13895056545f0fcea92
25e77da2d794a01b7c7214bcbd59907a8047ac38fc735af82b3db4d10e35
6c50c51691c0ddc5207eb4bfeedfbba3a93bb89ec46c6bff3cc31efea00a
641803a323ec336b3cc4527ebdbfb1cddcda6be4bb56093405e1998c5aaf
bef6f091556ae5c421f0626219fd67e04caeed6222e09b30082762cc096c
283489f95462b49a02598c22e3fb162edb45bb1ecea65bbe457b47dc90ac
63801500d61326b04915a8c30b8d1f899169d967596a54ea342d4ed51cb9
447eb667713471c25ca163350c65795150f239d0f3d9692987065bf40878
e9fba46b802c15972484a5acf294a129dac02727bd2fca9a8e1a3faa9c46
df62e1d14cf154b9df865bbd358f3ab61d29a21366c49f7f120620ca665c
0b852227771bc8b36791faa3caf649bd1fd80e1827ddd9bb290622d74d98
01330f7928af5ff2db9102005d7cae8d458e5ef1eb7b578e3a0ea9e8908d
b7df4b7ea1f7c16181e921385b2ff0999bec2d8697654920ccab82920b47
6d38b80eb5452c949080589c010da34aa7f297e094e874fe79d0d055d0a3
30382484be15ea8ba2b5589b03f9ce64a8129da9a0307d9563ea8ba7c2dc
9983bdd7e07bdae6816341b187f0a6101aafd261a5bb9d3135426c3cffc0
2656dae219032a6484ed6be47c6eca8fcef2a594c6be5a5d7ac96926470f
db0a510d0e88e0cf9ef91eae679d4c53432c6ecace6062d4c42495cd0f5d
6e0458f508d4ddd9fae1ab797533ab3b3388454e7a6a174913ca6247922c
b79b5bbf94bbf481efff526c979a72a9d64e03fd6733e578a169358f05aa
0197c5ab504a29f02e7e4f225a30d2f9bc616dfead19adad6b4b2f259cc7
055e90b92a38143ce71a87547fdd09e53f9494ab1a84390c6fa7cdb3ad84
e4def1f0d298bab4ddb688bdd304afb9750fbcc40d79d8fbd321f9a3b907
7833a53701b389f54b4f9ab7a3783ffb39a4df7df663d1507d27c756f886
e8777ea668fb1d299343e4b99d6104b17f33e5f7fa18fe3aeacdf3892288
1dcafb4c1a76e6099e80eec68068a244f75cee07c4e6b46694218ed1a43f
dab6d810c95593a9597c083a42667a295be5b668941a7e097599c2fd55c2
fc44a2a50f79b0a762e6e4d513e357a998e26233ec2c109497d13f29cfa1
968d9711be4201f56c80629fa223ab1d7bc143db81f605696bdc00c9ee8c
9d31321e7aea3add659306da68bcd7d6ec664e0e1f254e6c05acab50790d
8ed0f5c0a0584d3a23937159956a3da2b3950d49267fe941f7f19924cb56
5f4ec33b88b3f030c4db2b9b06dbac2e8eb7e8477b3b5ea19f133ed7efd2
c1b080290db471e2bb4705c98b8134029dd1a308f10b88be9f4d4f1dd353
813a2ef8e7503389973ab0bdbab05d84be3ab8ad44521b490571ea07d699
0cd877b7a17add2ab4e662842c6c4081050672348b710b77a346e6bfa815
2fe3b44fb9ca523b2ab38f218e1a26d90d5edaba029da6bdac7ed4020891
d9e1f133e36bd7b43e6637001bb80b83a136ac7192941c39d1d6e5af338a
ec8ba43d5f563cf59042146976135d331a6ac9eae1e1ead5fc1020418c2a
dc5532d42859ddb8419e16f04a7a3fe702afd167a1cc6305b952a626c909
caeb6056b0090e16eccb9bb8c31604f53316076e9940f693492e6837f830
36bedc327f2e0af2d688b5e58f770d8d29af74e3a889fb81d11782160143
8da4e3419fc8ca78160a7db3904c589f7a4c051537b7d7282d76158659ee
94bf1fa26a2ce408e7c1bf829022ac0099443847da729ba2334ebeb1ec6b
49b7ea53d63c04563e2587e72b6d6bb423006cbd0549da6d97d75391f3a0
54f630fdfd541b3cba7fa6744f2585f8f1ac39b164ef37f1554d9151b4ae
ec519fa8957f1c6e55656c570c62fd89f39b5c98d5ce5775313bee103a90
de8871ab7474620b773dc37de7c543fa418babb752d72b7c051443e2bc0b
8bb41584435a01dcb8608abcda3976bdaa7d678e51957ce560765e5bf583
2f0da994872f913990368d8bd8885da66e6c4bee11a7e7fb9ca8789470d2
e5f45cff3b7f460b00bb394986c50e495a528ea780ec5410d6d4ee97f5a2
06bbed3e52406f3d150a6a5336dcd788d24b199c440fcf529a1b5e107037
f38f5a6bff502d9c41f7fcc7bbe9208e17d7e2c57aa290324ac6505a1d19
aac0f4065eb463310c80e7a27f0a027b92db7bf8b9eac7891a1722d2e203
bd465346146bd6a16805563fa24e53d2b7de42e0dcb03a666b360cf09361
8942e4a96ab22555627427bc00ba2850e592db5a6351af1aef5cddd64bcb
1b740c869ab25c97cfcc7d3d9636f6bece747f956250b848c736f16ee9d5
c636f2b91399eee5503f2495dd7840b7db0377ece11078ec73e5c1d23ae2
7989227757cd4beb157d93cedfeeb2f090c3869f57cc1ef52c45e7ab6a52
34efd5bc2dc61b5f066eaf9b70064630dafd67fd3e8ec1b802f76712b528
4e5501c0bc32bfa43ce1862c3ed8562da8ae707382df9b28ac1d23c62417
7f1ba9e857663cb03078b15d8aaee2b1ff34fa24cd2a789264714832cae7
6e7850419b76988dcc5d6ba448eb24e38440b3bb81128b87ddb337f8725a
5458a56a140d6bdeb4f2b04415075a3c8242e04d043ada6cf451383d7f89
1679bd75dc019117b3dcf37c380d10fe8ab90cde8614440875968cbcd700
bfd2bf15e86f7bd81cef00a102d10a59fae3f8d34e4266a225604eadac0e
3c27c3a414641e67c707422cccb86ddd6055f38b786bd78a06be547be1ff
b699cd3fc6ce9d4b7eacdd05b6e032b1e185f65dc677f5934b4339a36717
2ac4e567d48431c55d1e3bf75a30cf32a3b5aa236b586b64098368e2ea69
0a08cbfeab9888619e0eafdad47a647e6351d1e73cb777e9d4ea4bc9477b
95f3ba75de74fbae1f03de419e96cbaf50e069705b104ce229717efc2459
dacafcadee65764214abfc685ae117636402edc232cac61894e41d55ef18
9635b599cad8415b71116a93e772a45c8ef3cf7fa3f2610519972049f4ce
a5c97ca17e75c49e03d70b7b7647a2150efc23eb6a2a02f39a146481113e
941ceee91d592f44d155628e68a4900a794145ea6267b6049a4b7f7c659e
cafc9fabb0b0b8bb390537d56582d09810df725742a0af442c35006218ed
7094b38bba3ae611c00337010aef87e9658e53cda4205e6cca25a9e04b46
8a55a151a2259d5761975920686034c3141032cbabfaea7403bbf51c0c94
cc09229ff9f3c6868d6ca724a4988bd8da8eb3108156f24bc7c3afe66623
085b4f6d2fac48b3c27e00712a627d9b4653e160f7645a9f4f0c5d7497f7
80d170720778baaa2dfa38257446800820e668ac88479073e7d3053a05d7
421ec7742379e9966000e95e37471103a0a8097a6e2f1bf69f86d6ec2553
f544a86fc42ae1b5fa3ab802ae9e8643a42b2c77885be6c4582f137a02fb
e8d4645f0816452b001aea758b8adb3bd56c1cd3d46d586115bb91ef8eb7
12b854d51873737d23516623aef7cf62a2063d3950ed9c7d214aa3af47f6
e7e7fb877a6ffd792c0210a92294495747f49baf43d88fa391a9b90211f0
b44e72619f6d404f335109ed4d901386a9b1b140d1e720af1eb19dab13f6
cbf677361490b2a599d6b7a2838b7a1d5f39a44d6b8387770f982d728e74
7c55cdd3e480e9c745041051b62682ffae9ace6e42429c5a37ad4e59e045
3104bc7bc2b51b31c5c6a33ca958d5d3a9c9651d5204ca88bd25af0b42f6
40e900f3e6265c3c1b39c1bc53e25afe9df81616dad7b02d94d3dab63371
8e3324464d7992e83e5ee4f7aada378de73c6dd30a4e6bf35775820b0bb4
cf8cafc1e69be5987d5ae6f16158805931901b7b7c5cf4ed161a0a8a8a2d
407781e2eb9943a9e705faf7711e8c675818f4ecece158c568c808673877
1a9dc61bf24227370b4abde216847ad78a6f9dd070257c5cdac6512c9507
bca57edeed2baf9d0dac8e36b50e2b800a591996c06ac71f9c2b51d1ef3b
efbc2cfd0f16935a5266eae20f6852006eb85d52e41b03172a3df0695370
5f1500f4bad42814edb63b72b9a6f35ec6c191c955e2d490b3750ebc4cbf
3c962dda1c56fb01dc36fdff93cac625fd2e01eae8395bae43dddb06e8ab
ed8ed11046b0ed74e521bb5ccacdd57fd5257fdc6df1de5562ee33da0953
3daa963661c71bc55c84500395f56e183524d0258d72311f2aa4e6475153
3dd3b30014c3dd3b05dd7d802c4da8c8197b90218e4969cef3167ac1888e
b18996883e96e91f66d22161f698b93aa2bb07778a1d5a69415130775409
1922e0e3e7de6e20601c5e4e2050f5dfd14ea3fff33442c3b66d8d01d80b
7944b78d380b5e015a0d8f3598576b71ab3a7404805f051483b2cb22a5fe
8146dbc3726592540cd32688d16685f58ecb24e16d4b508d4e7fa0710ed4
bf4b75f04c9b3c24c5749340d90d503b96200929d2659c494aef0b5b4112
b3fdcc84403a7b61b5824c073f338ba57b5f98ea6958fc869fd034e6f083
fd46db51ae148266a8b72f453b3fe649c667c1cf0fa1862129ffdda15e65
8b90cae6b60b4f1acd0f775099f8230a891679e5a940ac12a700c6f5952f
f8119b1e420e1a5b663bc8195ba333bdbe9d6e42c69da1346d77ccd483bd
7aa77755e0a133be009c1abd26aa3ef5becddc6aec8255465e733d7f20b4
530f4e8f6c9f479f3d9e4fac13c1ccce910c1c7360fbaa85824489cf15a2
c85ac4888386d7aaa08f4c61ce3008282e2bc8ec37b719a998a7c99d461a
8f5a6c1ab65a74009371b3f056cd59fe117a748f18f88de0cd96dfed391f
766b2422d0b6806000cd5fc6bbc98132bc6ae70c52d9d3ebafd86471df12
ac11de94e733db4f370cccbfbf16c5fc8d49b5941290fe05d93770010f0b
01bdd37556594a7d74d484b1290788e77a09e7e7728cb1741d8ec082bacb
f299d93c5dcef411d8015d8260c4aaef54e65810546c9c36933b2262467e
5dfc7e8c852c6543262e9688d697c38035b8ca9f335b7fb41c46f0bf13c9
be370c0109ed990fc436290bf5f2637a1200cfa30c7784a7835b9f49fad5
7a0224d6f508b713e982c4289f8e78d3fd8783f9a56a9cce03e2ddda2627
babfab206a10083ab554177c12237169c71207f3093a56f72c8640851a0c
59a431045e36030fac96e7818c354615c5550d0d218e26c8d668cf101556
fbc98f8f85ff1eaf03ddda188ac56147ccf0c143c7edd98876dbcc17fe3d
8b3d189810d31585d789980a788cfe884da8b107593e3cf2b65a38335178
0bb0870792f104a7b0ab3e99b8a7bed2414190d6ec268404b9e0d1e4c15a
366d3359a77dee6d67a3f1fec91dbceae75a9bc4d81edc3a826be9960c9e
28dc9105d07c57fcba9ad3dc50a2dd2e16dfb2f4577bf99be0b85c9b85c5
2743b864fef22d8fe9ee5174c205e7532d942dc4d0b159fd76f8e983979e
a316e041d2156d5c9a36772ff1ffd5a2b6fce22e07623844cfc601013e8e
5d4205b44cfe7801a53d3b756a15e534eed9fc86f2f04c9ac1accbcc86ea
96efb37513bc39dcad5ee90ea9a903fc2b4c558bcdaa1799dba44d012c3b
c4e091a17cc8ca1750b52df1148fdfd15d32337f4078c59334ddf42bf340
ae954e576249ff09ce51642ad6529c86b1a6c99ae7193730492c2ad865eb
394f064b782beda85316a307e911e5e6c4b8693ef6a0bba1afde3c57051a
4fedbc4e8b5e3d87e3758633de6b53148f364dceb76f9549f727614f3280
3a6840c419eedb0511744e447271c21671a4c3fc5f231f9b9affd978d78f
cef59d42ea970ec7d2c427ac83c7be7476d1fb81c51859d8e9e2e1cd2ac0
b4e7e37fc0e0461c4203a02a4de6ebb0aedfb52dc9b42ff3567b2a5ab698
f16d335c8b7336172cb544e6378f2e8bb0602fc6b3c0ba42212229c980c4
27fd45d68708fe66c3acf394ad6df3e17985e69724c0479f6c20717c3ad2
bedc338ef555d0dbe7eab47dd2272c066a090b9472c9c40c06c7f61a98b2
7d0149d026d5cff2c2dbba14100ab5bfb6acf3947c5a20e19502aa9178e5
e86735f188eaf418b520790275142efd2637f8de615c2143fe1397a66ba8
4c9401bad379d41a82cf91dba6222c60a25a26c70b323e6c41bbd90ed038
3dd0dce266e99d96e19dbbde8098e95abf678a82e2cd4b4d62c964c4f97d
ca91e78e87148b94adcd6ea1e6ff6be2c4401a52806119aa499177b4118a
f36b8814e4884979510aeb1650764b968c1e31b7627f837b72abf686630c
d4927dd096e54a8c16c77890d88766485c853f23620000f24efb881c4c89
a0c2ac32c15d1e2114dcaf6f8e5a7a6cf5261029c0d9a62af7797d07257f
a84279de0caa58c5bd98ba4d57fd593215736fea12de7e2dfb01180dbc34
c48e0557ae2c4239c378919880fcf6d15cb38412d85dd528c15e123a2558
3773f2041c8cd42629e66d3387fe5a22e954dcd850f266010ec324a9d565
a54f596d0656e89f6496b545118b38125b0433467f9da520d17829daef0d
92479c42936145ec5b4010396c6a32a1b36640bcce23cc440cc726709a4e
dbebd61c36613d3b680f9f3ffc07eaacbc96575191903c9e9d4b05b30608
1e209d4b5f527af628b9f3000eb8ad72bff284cf75acb30d2ba2ae7d5a5d
2c3d8e84243745315fb632bf6bbf346cb6dbb43b0b100a8e08236eaf4e2c
869c59fd53ac0559d021a21283de965d3b4bb21375a38606af5b6e617ed2
b8f29aac868a6e65b559b035b1c13f5b6233c22a7352d70f6bc53868a13f
d69286edbc9c6b801efdb681d9bdf8d7b8888076f158ce629549b06a115e
ff2f7700a5e4f081ab03b6f731d7af3c54196580a3b2380c3d0a5559fc35
3a069e501f7c120319a93f1da54e439a9918031774a8addcc9b5c6440c72
45c1ff4db78dbb7f18a5979e2cab240c09dcb3f1f733a18a5ae339e2bb9e
90e3510fd78281f77a46da45bed717be255640cb166cf83cb77f1db5f66a
236f93599542795b06e53d3f5c175b4899f4a595641b01c67a20ba18afa6
b708066c8b0dc51676c72ea17ad89562245b051776bcaa7a8b0768961352
524b882be0253dab8bf247f64bf1b201e0b39de0f405412a06722d0aa8f9
066425dc89cef509b16587cf924e00005eb0526dde32239609a4b220e779
76f143ac3057499740078ef59f8de9f2642c706668eecf140a4a1014469e
c23672d140962d1c03266abb1f517e9abb8b84bd411f7931afa5b06a7c8f
408f5d1874bc99fc53a2442b765229326caf8529c12c44bd8a5ec4c4f4d9
3e00c588e31fdcdfed82e71b27332ff02f282bc9323c0c8e3eb190157b9c
b4b0b6158ec99f01afe2256aa71298146df9cc57fb173f543f1cfad65fac
f36c5d454d189b8d5291eddc4596ba7a3c9dac6cb7e24948e66d788eaaf5
2746c3257469b807e354371988981af1ba35d0ca3f0189e55b52130978a8
6c155b0df2d2088ad38ea9b2e0ffcbf7a9919e9a1346f182e13ed37ad0d8
f157e14c7d2c41af4994494e8b4fbb164513d15b09b0d48e983f639853d7
a521072bac42991540637e4eba57835411da0ba8b4877eb5177db5a0177c
68c1a50bbff43a49e15ce68250a23f2faafc6976b79fc3772cabfc00f872
7d55856256c88601fd77bf35970a37b7b61fee31ab2597dcb14b18f3448f
bbe076caec5b4034ab8eb7251eb2097843f9736b4d18c977d3b5dd815c50
8c758b4a9dce817320b79cd3c62f14354b20119491b0d89603fed49b8234
8efd0b14cf381168f287a31fdd65ebafa67a001ad3a337fa286348add2b8
64bc5a6cd6c9efebaf237927c3886a861aa85928e229425f7d3cb6d60b4f
d5d97efebb6cd39d361b63fc14a440ac3cdf22849f4d47fa5d337c8bd813
8c0ce12d36b7a263017b860d568e2133e1c516f48c17f1a8b7fb2afd064a
f6237e3088e0529445d85e48ba3bb83ae2ff9ceb3401c87d0d0ccc864dee
5146085093cd5fe9e8a504048f6c2e9a7b9a8576936ed9e041c59e934a7f
08221d37a46ee917530b139c9678ad00be398f93dfb57495ac211fe49019
3e388cfc2dc81597f62e61ccbea75a7006c5f3840d12ec1e5559bcfb5787
70139919b380cf1f2aee0253efe9770c783ee4963efdec58ff4053924fe4
b74530e6d2ef267d953ccef5798b96ef8934415aef286cb0d51fa515f2d1
1e5e3014b41e8c0541da5c9a4fba6f8d5fb3ce4f950521803f2392c55737
3984a729f339b4ccb0f4578d83dae9196228f518757c508dbb9f64915188
ab2abe1e6a62bbaffa2d28a5fd42d19a6d629440c7fb6266566aac628e18
c3cd8f07c9719620bbaad59b11d6fb3eb28140fe65cab15c2189c4f65115
cd6c95df379266c710b82d99f29aa4a2d69078b0327644d59119438dfa85
1a022c11b476382187ccec5b446a8fe8b5af62e361d8a7f68e1632ff88ee
a98ae34da7f50ded9e2ae31ff92c1a775c8761ec649c6b070f100377eb33
b5916a78d228e2e7808d791f2a7256c464341d3da9dfaa027600df3d327a
4c220c4fa88fd573ca41e1363a3483a464c9b26ff7e532ce2ee126d848b7
bdd5f30d65f6cb5412205585e9fe60210a3974ddba71c3e6d00315ba701a
29dd1e5c55292a2deb58ae8fd5ba49f5308e4bbe11ea7669edd03f001267
a7ada03d348a17e118a8c58a497b2f24c13a2bf614934e017ba62273f2fb
9679863aa83a79001394f8f637e6565757e8d719eceadcc3629142a5a9f3
a2ad5512b0993b1e3108d0717d69cf2fc2e678b5ddaf88c9b1c0bb84813d
56ea4137507a25df29e9fe396306db39928f54e4efa7396557b181b3af1b
608d2dcddc0a9a89d3226ae2b26def730bfe1bf26a89e361d46c9d37e9ca
e91686746618b883919bb2a8a21e3761e882b7b4b73b38b2b8bae31947d1
2e1a79465ea64030fc5716f9373ee6660d728eee2054a451a9effac053fa
3b73cc02d9af9b8392bd291144d9aa8bd792b3c6e735e7f290dc4d9452fe
f92ac158ba886ef1434df369f333aafbf04a8b1cba5760838c5d0c417e6b
04e9d70a09e9d5c5ab598637b4f6a75e035218c18fd2c6cb4cab9a1ae2d5
9a10b374e2c79d8b4eea9dc9f18a4639c008f8c89d2f1a4c1650c2578778
5a424fe882ca0467926fc56aeb8094391e86237cb4c04b72fd0cac464593
18929cffa98fe11d14c5348ce16d046992a56d91d9a9e37b6764e13f695d
ec697e284f695be6c6f4c810595367c676c33c6facc780491e710f284ad5
2916823dbe37f8bc1e8b230986f4f2c0c3892f08d6b4c4b039565ad8d7c4
63f3a5eb6bf64dffc157665253de3374f8a75178e0a71af6c519aff2ce90
71ccad812947ab780eb8ce8b99e07fc5b5f9cd31ccb2e6660aaf242ebc93
4c0a14bff54773f50c7ed98ca403ba80e00944c9d426daba02f72f4f9508
9af9c95f9f53a99acf5f678f2ba4b506d8a04198678550ea03a88deab352
14e84d25ee0abb8aa64b5f2d50a6eeab0f4e9912e9e0f9eab12906fa3800
d2a840d4718f01ea433ab09d8954367111aec55a10dfed578cdd027d813b
fbe05387ea4e245cf31770501c6e263c48eb38af3e848473e754ab844cf5
bac7a5afcbca038d237af264f1997319c1eb90b121d095c4774f45a840a6
759c6c35373a0553ff6255937e9d8f0a9f9fbf10da71b1484b7472d67ca8
ac6103361608037854e3387693aed2d213864a473d83106f348dc6c32f3d
b6196b1b156b990da26652e06f42ef64e7850e83ffd3d774f2ffbf2c1ebf
7323795f00aa10921fadeffd849c97e0b2b4bb1df3e9c0285d4c11fa019d
db58e22701b4b5ccf85271423f452841da3d4cc2445cd1aa1475fbe1efd0
2ff07a05ba915ce08c6b1256b16453a655108c73d27a5f9617804ef45462
4401d2959bdfb2c00f0586bec73c9f4fc30d31a57908ec7076d69fcce96a
5c78619e293ca3ca35e35c4920dbad46c85d4d953ce7bd601afdfd3cfec5
cf86b32f074893751d9cf14ce248b661f3104a863a9a17686aa5452f1386
b09ddc175299e9e5cb8101986565ab7ec6062d18fbb7b8234b475d0ccdaf
ce1752936e6bf5fd7dad16895bcd60e3b1efea5f00efb3f81ddb668bc457
837d1b9015f301da1d9fd83e1fc126d7ce7650391d3983b629d1827b62b2
23e46f316fc1d6277c5f11de4eb874f90a2200b8a71eaa5f718571255b72
04968608fa9c58b9d594b43e96329df78226c80f058de08ed921714fd2ce
b246eaa8c4337608d720a6ef5bf0df4d6f2691ce3427144b912e83244842
e02871f474395111165a3c8f95988f6c84d9567e041c6d9ecee8e8175187
a4df8ec0f2eefa3fe9a1fab53fe18c2908e1608239883423b41a08977e24
e63c8a22abe81b94174764954735aaa1d17d7e79bc617543f86c89692e8f
723ea6ea3e3f0905a2c66fd611dec760fd02c72fd8b83b331abf007797b5
74d61f59a3db8c83370e8bc4b4119777ccde0514071633644fa1fb46b234
47cf876c9bcd17e481cccf3e776dddcde646d43fa2adea5a9fceb8098a5f
028b97323d0f93017db456ef54ef57f4420a62d309add5132d99f873397e
5473a4f0925c6c15e27385f42cc5dcc060bc547122a4134fba4ab1ec248e
12d93c5734495c0db436c0de0ee8e57677f39f3bfe1d99d58e8af48b91e4
72e28c8244eeb7da5aa35ff5de0d596f6ed2b08ced9aaced776ce373b598
4987fd825fc51b2086fb428ac2d57501535d39b8ce840d4fa58afbf8fa0c
a77711a5cde117a29e7c2bd5ec7badf4d54a57325d6b7eac08dad9f9a588
76e00d9d22b2d28b3541aeffe540dca63f8bbf9ec1789db6e0fd08e3b883
883edf1e1d68e4a937a98d45b209cf6365356b57cb0be206d6c897e28070
21e0704d23d9d4dcff5f0aa82c4a419ee0f233848c63f7cf6bd3f458b9dc
563ec8dee060bfee720b4f869d453ffe7fb9399ef4252ba2efb226e6765f
d9fee1fc1fde1efe112ef3f04a4756cee4b8bcd7adeeb2d23ea4656d3119
8adfa6f47d596f282c6764fcacaad32154047649a349da38334765cfd21e
60c891a9e8716f8ffc368696ccb8c43f43fc9d176c041d70434bcc3cf343
92c7f75d69a483efd03df145b09c0e433077ab4306200c865da72b393144
81a4f6527019485f444285122b01f225be428237e0633d9654df4bff23da
ca6a03d494bc9b5ca802e0955fac6155ce94b3faa92267c0c94991fcf589
f00b5b1dd94656e8ed30e9176b7b80e0f5314a2d1520c26ba3087de711b1
73186143baa5ec6110c58ad26074c41e2bde6599d0a53215c6e2832deb1e
c2005ef06d95d7c4fc22cad16bf22b0751f1af5ee71f49fccb03c802ad80
c61f26008d6977801c5d93226ed9ed63a8cdb1424432c92365f141b62e2e
e1b531d9998ed65a90996b7a8cf1ce8db4a7ad907e9a0a04538ffe93bf0f
ffec3526d66808a109e4ccd39dac1b56bbfde8eb93b19d702c702c4f06c0
19e82d45bcc475ec294d2e57ba3228875199d97baa70221bcf2df2586742
4ba1aac2285ab2bb5215a8432f2fb65bb040d1ef966299bbf55ec5e2feca
be178136de1b63c94f1a8dedee92e365429be569336672e831c0355847fa
b75e7ad22694634693b704c3538f4632874a4e640c310ce07f27aec96fbf
49aa9736c794ddf7cd1fd723cceb8dc777a8726664c5a15d9b28b7f2b45d
0eaddb3d74aaccbfa766a4e76cf7353af2886173147a78c0a1569843f8b9
6a7bc7d61eb1ad836ae6b250227c6442d4a2a6f2cbc0617177a8409ad7c7
0b0ee4c7874a207ddcfaa7c94ed4ca12dfdac727928222794c19bad558e2
c1c7f8788cff0949b09386f19f5f9dfea63e45bba758d462404505cf9d7a
dc65a9b72dae7650e74a380a73aabcbb3723b83e5506f1f5d4cfd599a8b4
a80f44a71a4cf5ffc2d0f3c43c7b376d0cca1ebb4f18c17d6fe5d7200589
84986125e87fa8d609bc977f5db2a3178c3b6f624a928f5dd779114008c2
e78a9604e935aadae73c6090319e320d4ee9d254953e6bfdd7d8835d2a97
c370cb3483f194583d746b83b2dfb6199bd8742a09e1de392e8129463ba6
7011534e60ee02cf724fa72bf263dbeeda31a7c9e4a3465f2a7db48d36b5
f2eb58463c2d564a739f89024d8a1735a66e30434aa776977d4466ab0acd
fff33b4ee830f85c1dd2a6fc55b4ce892d7091ad9957a532f23c345c84e3
dc472fc7060064ac204a12bf6f1e0eeed47ae9eab2caa193dc4d1bbceecd
d67e1de257f64d9ab694f7cfcbd5054a120c95894f5b6f9e71fb4ffe18db
9c66dc017d2f29e8742a6d9ebcc0f20a0a999388900f2ca317d01f6ff8e0
cb9e4447aa5663fef8f3139fb6af34f4a200a2eb1428d5f37a5de86c2827
9ffa73ab0292e87a8476b67cc7fd5704a6c1d4e35688d8c87c354c6bad95
055f449593faed89e7dcc46a3d3ad02831960cd00d09fdc6fd82abdb1095
4ba317f58d25152d64091b45db0184b077b8b628fda4a551a520ec5ead6a
ab94cff090c4a84e4347102cfa8e56be4a995ee86ba2370c7bd1b9938d31
7c0f5b64d722d26100ccbb5e228f7eba90e816e85b26923a8d54854da7fb
c8be734f0ed949c4be48d0df5d24f254168a9d42eccc8702915586915554
1906325a83cd6822b18f30fb95a9d844df1ebc501a894b07b0ca6f237ea2
9b7496e99c146f0f26c2b7a55664e0d012673517796ccf9788d3d8126072
b124b14203c5aeaaaab70c4026ff31f26c2441d6868159ea7a45dfbbfefd
f4e0b546bedf1142bbc7eb156cb8107f2dcb23d3c732982e532526f4f643
a236aa0152a7989a20045afb04d9f6d8f3f5ccc05e87b0f7aa52943f2843
6e833513a317ff5526d3f244e1bfa453a5eee31180fe5c5c2098dc7b1526
d73c98f5e170aaed0fb07cf78ca2eb5030e074b9b57b3b89cabf6b89bb60
2ec74949f5dd04271c4f8c011af94e9e83a9e18e52a065bb338d43baacc9
74574dbdbf6c8edcaa74c2dd30fc12c63714c86b7be2d0a54d74435c1efd
e74a380a7382efbe98ffe779b839d66ffff9dfbcc9f5f319b618e73a4704
01ffaf09c892fd378a1b5655d046dbe7d1f5964d256ff0cf9cc138307031
affc7dc1f1cf0b24bcc36792c7c9ff82f24db40aecb02dc22d42a60e3da3
9dcc819cfab54d5dc0e10bc27d92f0f78c24a8eff675ed7e75c26b30e8d6
bbe9fbf034455fa03d60fa096eda75bcf3c54ab0f73ac2df36da27e8fc06
c5085fd117147219aac75a28855ad80043fa6ed545b1885158115c789337
8d58825003bc797f0bffd2dd957d532587d22a072d552461dfb2f65e4ae5
c37592881ad8b9569d6626b52f2cf0211269653b4710be6e0b195e7c6de7
3fdaa735f80e4397defe9516efeb53bdbd4600d4439dc9eddafc33d2ef70
f35fc8aa74e8e8a8842d7db5652a73e8064b7042cf46ec540179c1e1e46a
cd35e5382163311f74d248ec606ac1bd789ae8cb8e9b7c87e305322c8fa0
2daf6b82009a7878488f6291241f071cb88a0f4ff17c7d60c8e9a123ef4e
677ffbba5f468db8b03eac2861f62eaedc6ec695e18cd7c1c16137348faf
0456cde27307841b8a44f88ad7f3ca4ae59e04555d8586778da984a322aa
7754def67b3a006a33d01964c5e3990818de09dce5aff09c51fdc80a28ff
78001c66acf95c80a947c7bdb34bec390f356a5c06ffb0716164bde061de
20275d121dcb965a8e9d871daf7dd692a2bba5c6908e5344d715a77a934b
7f4c61e91b58827343fee208f239ae37c9820e3c10605a6a688d5d699603
96aa3184a00207f7edb14e87024a3b9accc7e595da607068a334d57347a6
74d469f33eae84b045947e03bdb96c54e7eaa7761f34c2be5744af8be2a6
dc2f49fd3fde52aa1ba67f54c9f9232c38b204fd57bdfcdee29f0a6c763f
8af0d9466f9c77fc2071d39c80eb97d1a0d797539fad8b4f77d2070810a1
ab73f7b7301f220c647402e6541b6b2746ed7a655d1c7c1cc8d33a6a6fe7
a12048ccfdfd13fb510b4593faa0fb3fcd628906444bb5f7416ce111eccd
0cda8ab3778c99aa47f594b50652487b75abb905a6b012b37167f32a6aec
2f205db8c196d04cf4bf793885445bd09f8ea8668fa9a62c213517de8b32
1c65797411e7d629ca2651225f2dba1d6954edc1d69b16fdeb3791dc4f5b
1d61bd29edfd9986997f4f1949e4b52331f78d88a2d9611a2543cd12f1cf
706948953767b6c6f2793778240aed63ef5ae5143bd3812810fd17cf62e7
d426c676cfb5197132654d7c8dd967f2d75dbf0e49bd8a961e66282b810f
0944a6660ee5834f1d33068a10fe27b0a0ca1c8bb1990aaff79ca7ca20ea
3a15012832766260ad46cda681c2f8ff0e650be8666f964346e9f86f3b2f
1ca2c7d08c071ea281ce4fb0f5129b8bde176f8a42449084c8444a845799
aa816b7855ae39379a91460b82c4da80b04b34d68a2194fc98e19127993c
229dcf8230290fd24e2a9fa71b0991de574b475ce1ed20e2f935ae679df7
709056c928e5b61e45daa69dc1587ca877dd5583429abb74b093b00781db
8e1f6bae91646f59c2b2ed7febc285f8dc29e513701d823fed42bf026904
c40de050a2e724ec1eaa6c07490736e26f08d307b8f9812b5b34487d5a18
b2aa824c4168788aa8c0474cb2b387fba04aaac54867568613e222a3e836
f24a46bd8dfa64b72f3aafa31999bad83b1ffc1770e11d3b8a16d42c97f4
2e9bd163fc7dc7bb8dc44f356ac61ed74d8fc09fd53f1eb133b91c510d6e
d9e370c10c3148e1ab2ce3dafeb3837c646ca6e134b776d09a11fe049a3f
5de8954cd3a85915763f2c59b6ce987386be62e80022122b5ce6fa35533f
2ea8ad453ab87a1c10989c833d67a5667982d2ee3206ada8ce8c17fe47f9
17c42f58e8de9d4df44925c7734a9e8183aa3a34bd4a2586031672ec3d36
9d97e62185e5a69b0b86e7ed7ecc37ec8c3aa5a15f13e26c73eb39550af7
882c57e63df9a934bfef1dff0149e414ce4ca4ae1ba08d0b35cce43f1702
0970af5973e08bfc9dcb0a819bb90df9dd66909d36c6876e26fa0d28a378
59444a9fc3cf90cd7236e7c151af44c9c080f3c2b2cbb14781296de09716
6aebac7296a885e904ef33ee01b18eed92dd5ba1206261156dc6391dafce
a05aa325b6bbcafa4c1b8a497ed08b734edbbb302c0777fed5ddb0903bcb
fcdef408b8c280b2f5949d6cb5102c59b5950ec22b5f507c75206c8443d2
b00fe11d5336d8d99b4c8a77160a0733ca8f7f5804b61d5aeb235629b405
c9c7ad83983ff0347c764dee896ca554d530ef771b56624e2139a1051401
c722a88826812889bc74f5ce8798b1f7c5a23a79dac5bde51fe7eab50cf8
fe39a592238153670f7d0e08b306f875436e35fa7620fc1116bf564bf5a8
e44378733d53fc7a323075adf400c2863260ffd3acabfcaaea2dbcbc7872
6463c977246e9a498f3426ab74428c9cb93f99c654015dd7bd6395bbcc7e
385b93a6fa1aa01d45f4e58b9968cc45a6700659d8dd86a248f253c46c55
d7edd47847aed8f1ef210fc83a1185461538a7d0b69471d86d96aebbe059
60a142f22ed4fe03d9248d7b288b044e713d6fb406e272b4aed2fda1c152
9acfadcf04140954b5cb6e9c75032885f714addc0d28db4d00eea69078f7
2a28e0674d67fcd42858082c3d8ac1a349b094eac3be3f96b9b076c7768e
6db77542caa2aa1454cead6466eedbdf84506954a4bfff52e301b4f68e3f
006a6f146b2c1fd4af23c0664b269b65113749d40c08c8fc6c52ec11c1eb
c473d85d37bdcf8bd9113dbd8d379dc3974c155c44f6e032a0a69a1557f6
0a7dcaf61aa5763c07cda09a66d8ce803eaf08d99b6cbc5219eca5c59acb
d191942cca330f08303684929e0bfadd37b64d93979ea15c59dac048cee8
f0b93db343c4a0f3f69bfe681a3b1502ccb145b83664d92e629344ce9740
d10b3cba36c52005c98f4bc9a7ea7b2cd3a1d17b37ecc2819602a303aae4
083e88f7f99113f0451e9633f32fbf753506389b237c0f111e6828a0ef7e
4de1471cf5cf2fa265c4ad836cca2a04a2747d5de0c725bb41fba8c73773
c06c3c1999d44b66d09b52aadb23eb260c8e7e05dbee6e012408d6302fa2
3bd44af8f31ef9e0e95fc1d5ff1516adb29340225d0be1246ef2123ed587
3e855556fd1383fd171472e77d311bff47bdab933fed119ead34e9b2eb35
94d82295a39e2c4f9e9d05f1a9c64d2bd342463b57aecf33178b30c279ad
835b78ee4e021d68bebd1a18586edd9ae6b71569e71545430849b692cfe4
80521505fef293fc079aa4c29fafe89e83864a99edce9a9a35553f841b8e
317543c765cc6eb57cf7f938c485cce6ac4f89ebfed910ffc714d8b10974
99a67a14605082e25c3dbb3facce885b9db85ec3cd2361933e45ffa88794
b629043ab689367dc5f673b2d7180076382b3e409f620886b1f38116045f
005fbea91e46bddfd75ac5a601c28dc44719a2f5d7bfda86b612160d7b98
d4add610e581cee4807273d3ab7ef43e505110afc2f747ed98f78b79cadb
3bbeb56571d8d804323043452c3fa1deb60ac3e7e77937107ce87d168a11
495d435c81bb51612e441a1aa193f678c3057934ce271f37b4e46fc02a7e
f291f136ff1794361cccbb225edf2a9a7c3d48666858be3c5ea486189207
8198119e069cf8cef0be6748a85414377c42c0f71b846ef34a0259b16545
62998f5c82f754dc0e50a8eb95df14533443c21eeea75346e6d4dfeb6d2a
cfbda908d2da899b188fe7029e0d3c32adb29426f08e5da8085a0ead1ad1
0a16d3ca57d6a63deaca9125e3a2018898111bf936a05d7d41f0f57b980b
1e8b3a4b9927c6ee0312ec4ef75cb8a51ecd5b70d4ca9665be0f43926eae
7c17b313a7e5a3c305ca6086d5bf8a7cc5a4e92cc93c6dfa45d9fcb7aaad
c2767bd2fda24d4f3d52a78468cadfefb710b3587fcdafb518703d5d1bde
1f05dcbe72a03dfe81e6d91d65ef8b84cf25cb2b6b49a50ae6520e6c67c0
8f1ea51a36caa9883776f3ec62b0170c777c20050d8edc4e5538c17e7a20
a0e57a415257d8ba1054cd0bc1c278ef8a1880ddb336aa0143e67c39c22f
f3db126c53f88ecedd9ef72aec7f502c58934f279cdf44c47c2bb6ea5650
fb05b34fb37b79d85646c87540b68d44ff715d317d38fcb04893896860cf
7b7dd41928cb486908975e3cba8012b733f3e59252ffbf0d7d1e765bafd4
8b678de103acb2ee431042116f44e07c4fcfb6e464d2c9a07606668f8161
f5a0061e4c2fe8c27d772d49751e7a605373d88d4e6c41956e4c3b402901
04b55ab69dda1886d12bc89cdf1a00a63185c43d2d245429a4657be83793
6287ecdda0899b4fa67a58f82ac297ca3256a9805e0c9bde36993aa76bf3
d17859be262030436c3536a716a626e5e75fd89ef3cc3549b430aabaf204
330d70b236a05c9ec0bf9f5e6d2b9ddfee8adc46f047d40f4263f6182b3f
9d2657006f3a646ae38dd0e8f7b0c9be4fd7b0d03fb6da1bc06502f32629
2d2c6da048e177b32b7486b8e969f4dc18f0ff07778fad0eba7d2ededc3c
538e90442b4425f217c7b11c605054cc4ec987ec407d6290a741df7faedb
f77c4cfdc13d0e80202cf9fd2a9bc7dec2dafa112030c9f855c0f6a87e4a
be5c51bda0bfd9291b23621f80e217e29038c071f0ea99811dc6de7d33b1
b115cdb39bc0f6bb46c51bf0299341bda6adbf3e5a3b8b34217fba1dc476
caac5531fca67f8907ab9fb02ce336f6caa58336552483fda97700b1437b
c580750ba6d122d3abf34a0ddf15159ed92f214e9173dbf9bfd6b16b6af2
98aa626cccc6553586e17746b59ae57198c83691eb5228b408a735848f6d
6b842be0f6745654bf7fd57bae0f46a4df776802edafbed723fb1f58d090
cbf523913f8667920931a3c23fc35e9b2e04ff03cf50701b335a85ee5e7d
5bedae443601a768579a753886406f97b749c5b5869ceab1457be1ef128c
733ae321db29183b8393f078c2600e1e52f0aef8705d70cc89033d9f1b95
b97c5130976b28d463315d8e09973e190b1c339208559aae1f3393647049
3c5fe8f11f957980aeb09dc52b358da17ad99a7eff51682f5c386b3300e2
745e651b1cb45daafc993abe2e23ee2d26ee43a27d8effbfe228a5007910
bd3e13e0053ab9fbfadcead3f4d4ca88b03ecb32bee6f4cc3268d0e85d67
11b1ec7479c3a0b5396b7c3bb0a8329a98decd06b5dbd4393e060df409e1
78c8c6d2cb1d7971b74c3b4eab4876027f2fcf79f493de545277028543f9
40250a44eaa2d30f0901e6cd17731284d65b8b71860ac7d4698a2ab558cf
2312ba6cb2ad754440ab5d3e21716395d312a1b4c63666892fd635ecbb58
25cf7b355d5bbf69118e79dc126b2da406deb5e7cca2030350a60890e136
7cc4a808465de6fee91b084341ed4c07669e39dc6421ec7b125da2ae91aa
b1319310556ac8a8e1cdb4689e94040703c3f3d6f9f19e29eba6d7df92b6
635e77d8e32f879105b821f79ad99f67ffbf82888fadf17fa2ca4b37314a
87ccee36aeff0e63e3ec58213d4159238ed816d20ac2fed60f35c4830507
49169dd8892a8903b0d2de231866814223b2116e6883ce4b6bfb353fc1a6
b63a00323b8cf543f3979a410fd9ed52c8be16ed1bf861b08a3cf3ca998f
1f18a4799e7af196d4d2c86beff966eb08b0073b4fbdb5aa91111669c9fc
9d481e32a039c8df4eac81116d8ba938d5653e1b3c10be6109c4d1d475ce
40d9031b605fad17f167ce4951a49dc0141f8c296f85bef61a7191644a71
780ba9c36820dd1ebfcf5d7f6502dce52a8c7c6beb8b3c37328ebf235c40
04b1b4daec9870588857461cf01e6c461229ea3fa02c72aee97f8aefc9fb
dc046212c4c4a599703f842afec71b1301b3e2d57636bafdd19438ec8394
7d644f18859f9100402da48c02dae251c25f824540d0e21c84535d76ebed
7f3bd65cc1e007f536f565707291b9f2a85eadb968391b29712a91a808e5
db17958ed3e9107ef004ce9cb62972929027e0de08559671f82074eda6a4
3a93520cb3911a43427a7c9a3e268e7040ae9f7047676080e2ed32252e8a
5a9fba176f0fc02b9104c75143be6ed18dbffc58308bfb4aa3a4acb2b30a
3a482a04cb3b5c8da62e96c9ad66bd747a5641a8f7a86fd1d7cb0fd9fb0f
31da6907f8df205bec08bd48a749a4802bbd3c1eef39b6cc4c693298ad2c
e0a2ddf3f0bf73a6ff0492fe26deae9419772d6ab0198a9b055de4802e10
c79037f17f0e714b8bf44e88beea12eb23137c240164de5b325591a6d112
ddb968062d8a109d00cc6aedc88e57349c312aa67c043195cb9fe72d5262
bdcadead6aa9cc93045416ac8d79b7b88501e01d44e1a0535592c41c970c
4bd2aee6afb1bc65677de0afb74a50086d6979688bfb95a866f6bf04f638
1e2722183da48619760bbc0c10205ee07b476940b81d2c7b3913d1c8fefd
a26bbef1aed360bac0fd254d5f33bcaf9a7e35e0d21914d9751941197412
912e35da130301ee17af95abee16beb0ae329823ea6e05b0d72168e858b0
a87939f9239c62581929027e1785aa083f2ac717b1e24cbdbeaaf26990a0
9bcfdfcc432cbcb8add6409b58bfd3
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndResource
%%BeginResource: padri8a.pfb
%!PS-AdobeFont-1.0: AGaramond-Italic 001.003
%%CreationDate: Wed Jan 20 17:14:40 1999
%%VMusage: 43802 54738
%% Adobe Garamond is a registered trademark of Adobe Systems Incorporated.
11 dict begin
/FontInfo 10 dict dup begin
/version (001.003) readonly def
/Notice (Copyright (c) 1989, 1992, 1996, 1998, 1999 Adobe Systems Incorporated.  All Rights Reserved.Adobe Garamond is a registered trademark of Adobe Systems Incorporated.) readonly def
/FullName (Adobe Garamond Italic) readonly def
/FamilyName (Adobe Garamond) readonly def
/Weight (Regular) readonly def
/isFixedPitch false def
/ItalicAngle -18.5 def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /AGaramond-Italic def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0]  def
/UniqueID 44301 def
/FontBBox{-182 -285 1150 851}readonly def
currentdict end
currentfile eexec
7bca27a10b61444f95a6b57724177576765af5240ad1de5474f5835b84d0
20fdc5f3a862514ece1365af1a677b7d4543e629992a03b7e970ce4b1dbf
37f6c5c58aaa7764156f1a18b55d20179a0be60a04b89753c6f04aad9785
3a2568a08638d7e4885b526653b71c0552d8116b57583b23a95dd7c5c39e
5d1663783ac5e754c69316427ae1a21d7eceec1214962048c317ba4e9253
6afeb9ff7f1ff8ff7021dacc9133f37b50ec1244171ec66cd1ff9e1821e9
3e5204294ed213dcbdb2e159e24ffb5c5228296d45dabc3a69d803676427
7c399aa336ebb42eb0d694539f6d523c1a3b872cd41c231e423cee4a7318
ef1d991a20feb30d0e1f9dcffdfea9e8010d4cb6ec7ec16715dfed6a0939
06de744fd610fd5249e87d8a61636e56ceff42af5ed894d2bb708098de93
8af9eb60a2aa530854bb29a19264c92816717637cc161c4c03ef4bb8247b
6fd41a4481adca285f9231bdbc0684ee4def154af92659072fb0c8cb82f9
cb26366aa525b621761bcee3dfb42d2639dc9fd6507280cff3ece691dd28
e5e83f0328d6abdfb14921269c15b0f774f41623062876c15cd364fe2a7c
9db648c631d5724d9fe8ecbb8011cd6f52bab95c31a693e9c6307ce602e1
e9b116f4627ffc0c0894c937d1bf1c8b0c03486c114bdf4275016225f4a0
b070571f2667d0de94a6ab3a4f8fc08337d666cd52e90ef230ed47a6e779
c74050adc8016323fe01ba19b1158092ae801816f92c783df988dc498ba4
29f01c14afb4e8ca060e7de906513ebde15fe0aed862f262dc0396d5cd3d
e4d9de478b19b2e949481e09cd3b43d92a89c09ed183bde9fb258e02dfbf
451c47db3fb9f4c01908068bac6d9d8a87eebd0ef474d0ba4adc6564561c
2471ddf639ae2362557bf31849c3722559ad39f442ef42655040377b1fa9
7b0aa83b68a53d6430609f75e15a09024fee9fa73dbf5f7d48133c35dfc0
831fef0058416dc736b933c4862fed6e5592a7e8fc7682f25c3aa640c718
b9de37b14be9daaef08221b3043f09bdd56eda699240b16ba2ed2b3ea4bf
a62104ff71585e0b2c0ced64bc588ae6d70a90d08142f430a64bf08a1b0b
84d960ace9dfe155779faedb63f55e1ac3a7e87bf8979dbdf02537b6aeb5
dfee1e1a66f94c6ec6f698e609e6feb869a755ee1d09cfe6b7835c218d46
779ad28babcb63fd05e5072b9cb1da11c808b1e5084a2749116e658dbea2
c58309cb64b6c4d007c5e4f4ecf5425994317a4c2d8ac1687d882baf7c80
ab09fb6bfae56482c96dd74eb314d28847aa6bd478064de3ad9449e26584
b74f8853ddb8dc34867dbdb9c6c7f18d7767ede33704cd1a35c0a1c7ec9a
662de75824cdf423d6edab250c74ff4986ebf28b78e5c694c800a7e9e856
42dbbc72eacaece5510cb26bf54502a11a5ab8aa5ccd5467e2f413304772
f77884c457357e4d96072f491e81970102eb42bb26f18411c01430b94cb8
bd1c6596bc5dd9ec81f5a87a562d1d0485ada3d8c8e7c1e108b790ec372b
8399d4bdad2920f41ae2e7373369245f94065f7855d2a0be85ca37da07cb
d7471b90a936aea72353b128545c8955b6a61fab002b95cf699490cd761f
4f6933057904e0179a3f2842e754cdfedfcf50678184051172514d80bd4b
a2b79d7001dc9d47f9b99e8d4477ac2ba3c569eb8909e3e57c89bf566a7c
71596b7015036a269630d41f3c23a470b4cf75770cbbba3ed42f21b39877
3c3fb963258e6f72a364c84cb494b86c920601c0e21b306db612c6b782d7
91c8faa2f981fa0e38fcb96203b4661cf4e4832fc12ab809837a6fde1e08
9447d514ac187f71fb54160e4aa35f8143d5069638c045f8f82a88803fb0
dc6247d9da7b92e2d5eab4f94ffab37411c62b9b39db30eaf28ee9d33baf
d253f4907221f96dc1cd215356d172737b34b86d97f6f5895215443b2c4c
c5c045c63b52b2d290ee6d39cf4ae484dadd4b483e72a267b6e74f1640ee
58c7090b4affb6e7de021103ad38a6408a92ef3fb862f9b46a06d8f83870
a5ea947730c5300033bed89d21a8defde65e02ff971d286ae1576a38baf6
ea2d7fc767a931ed38cfc5cbbbb74296f24d17971038a12bb3ffd6df53f5
15be4eabfe35f75b35c7d528ec1f5bea1187cde904e6b14133f36213de1d
dda9c087e3e86a3a068f5871e5a3ec143c209b7d3c2b2952f239ac4e73e2
1fb479494a06d39151e3eb5ef749ec07216f73b631d060808f9bed521f07
84cea652a0ea6e296085e2b88ae5bebe538ea5caf520fb3c0404689acf92
de879e83e619281503402b344637c62983150ff98e9c8fd20ed8e8a45ab3
ec23567d7f894e251ffe9865106ede04216f628f0697712c3e63f1080452
1bc88dca8750213de15471ce7b33655ebb0ecf73b184e47ac7d079589953
cde06473c2884617ad25b028344ea983d47afc58e3189f09f698b6e6e1c7
9599f39f8237e69d56c98da9df23ffe45253891f04f4acc2849704340179
42623699f1909db5229beb797df03f0a9e759459b8d4f1758bba83e14a86
e81784a53bce140837f7c1b0956c459a13e4a8a198b9321e87ab94daf952
9a623b54a792aba8ede142f22824f37b0e09a1b9a7f3b18899b5d4f43e5d
5a5e9e2eb107324214d49d945e714358fbf3854ab7d5db8b26f478743fc5
9646d33df1a4d2bef4553a1a3471645dd51793b3eca7c6401fc2625aa51d
bd3e68051f5fcbdf3dff025a8ccdc8759f14ebb77ad0d1dbcb851b5f3974
a274b79d8abc3d603c4370ffbbc81fe158a84135c39c2aa77a5530d211bb
a67326cf09db7abbaf6b0dbdc88b2d03aa3d96eb7528d2d85b8a2f348371
bc73cb84faf1ed9cf58c7b1516d448dae5deebeb32a17930acc0aca12413
12a3b2b05a70133813ba0bcbecaa5fecdc183a14e453de786dccca06af5f
0f3536810fdcf05175707c13650d90d617c6eb20dce3956b87971b7053ca
496b6ecdc66ae38c3be4ab18f6477a54224267966786b4817c01f68c6b49
c209bb742f091507a7ce127adad97b3f23a4d01dd98b6305524a1518b23e
07357aa871ded4ebacff9ff3d966b516fe4687c946d64859c5cddf0bcb9c
fbe578c3b27d860b408becc9e7cb1518b61c7ca549660dc21fa9dfb23212
7b4a01b6776653bf1c7796ffd6c883525a5a4384e7bf350c846e14b8be84
f5e1e163f1ba078bbe5a04005ffcf91ae99c5ff13e65a3d86835def56cbd
54466cce5f8c47d585c19021909fd8315ed54376df5e83ffde556b16de0d
45a69f3a4ab3c9b1592645655ded6ebb56d7103a8f0cf3d046e575545628
8f2c7b1d8ca7a19487b5d5f32138f2484985fac13ad53f97961eef9cbbe1
2443e9e6d0e10b8f2e168961d9316390736d29902cc56785b2d6ec2c6798
261a10f6b34690aff2e1ca6faeefc672dfea584b61b9ebaa5ed7f86c8146
370d06433a8c6d5157bf1afef01054e41b9ed9ed455510611186d6c74fe6
f46378260cf3828035c012f985543b155ccaec1743bb83ce16adc4089722
84263a86f412ef19f013394bb80566ce0589671553f50623807e9519ae19
1f2f90d3ad572921fe7b6f693a41d1a6fe41f6dbf484cd2828da6409270d
f2df4fbaccb584ca19a8eefc1f92419dedeb8694bbbfa9ce048768ef4d8f
486b819ab47c9d0328e81a1ba30ee2689f18ab3c2a490045c55955921c7d
5b9969c7ac73d8101c69051049863e7655c541ead203fb02143ef6e6087c
697fd3cad1aff825240f4c7626293f6f6d9a81a41c1d55f3f29c4a7c5660
9474a9e67e7749cb182a44a315094a263ec923c2490f9c4075a10525d484
07ab7d27b4404333852675f87c7db73a010b3246c7460ca9e086b3b75fef
76bf1e47492acfbb749d2f57505137f143760d0c67e97be8233c2394c976
816c78d9f599e7a65c031b03ab1b58b7ce7585e049feca90338d4a3e1e03
efc9c1facdc23eee6bb497526ee9fe5e902335295c136d6a41146990ec19
7dc3d3b08b8d09bfd4c78e5cf97f876b479220c22a7c6f5d2a511ba608e0
156aae0768111b954e1db57983a25c19b11ffbb0062b32461deb08283e7f
11b2441e57d0b73db0796130de22005234e689ff9b1ae8ce2064c1cffd2e
8541a1d5e4784dbe5047b2c4ca3507dea4d6ad2d397d0c82eb98d54a359b
9f6b7f606d3ff234a38de9e3025040fa3c8c14301abd37667d64515d2bc2
f1d1f543d721cc8ea8ca506f65ebf87650bc0722a6ca818d79567fd72c8e
014d580d51256e626005ad15326caa0076792f23120f6cce45b1d491b0f3
94f30e43561f9998eb4b93b93ac3d7b81c54de191bec15c8302293205b82
be351b702fa1e9e326b0576fee6d3bb75949f1f7211babd829f634f8efa1
a4c2999322a72dcb519092bfba16bffae7b0ad940b0003041eb8198bb4bc
0d15fb4bb8ecc63c7889140f193dd5d8228a955dd1ce96e3236f1069d6d5
b93468776e261198bb0a3632f81227192de539f6e9f44dc453c37d8f4140
bb6fcb446e57f54ba21f03cbf4efddb132424ecd922074956cba23c00edf
49bd24f8e0cca81fa7277f993038effdf5bd5be256571fbe53d8dfefaf01
7fdcd620c7fb27b6104e8fae30fa18df5bbfc6d10debff29a1e3e2614da8
49888848aa57f4bb4ae979da2c86f3cbda453c3b5ace05bf56d6076de6fc
7858d095217ef8ff603fe101b3af4cfc4a584cc7a21d866ae1c7b70eef55
7ebdec179b0726a768a487e7761bf9146496af479028843219256e7f69ec
f94b1b3493ebaa5627c451c335e5662c6120fa8d03015e2ccc9f26fcf584
0d3efee7053414b2f1bda91097ec83cf1f2574500d6d47defa3342a62b7a
f7a1cf99cc23385c0e4f8b1f3e1de83bbae2eea011c9c71788886e1a6515
e78a62781031f0aa01754059ac458dc0a006f6a268b6dfda12da3af0140c
6ed95bb55862894d0089c6e3865d22a21d757def12e8221b42692f6ddb7e
29bb49b5163d36a2bf056b097657e982ec92e04436da23a653959aa65078
a2687d3ab5622aa25c9546c9918f14497991a6fe3026515c59097b52cd33
89dd869da865c47082b5e631cea00720454d9ddcca6c96cad7c4c32e33f7
ad280659cfa43baa5227ce9f89f691a50f4df4874ee2a8466aa71e3cee8a
fdb22b0a397d471da8b8f87223ae3010f378bffcce9354d9f1a6b6bb1761
9a92303b5bda33c1053fb231198ca01e7d0aaf993438648e1f06059a2847
14350a5931ddd775085c855b84ed453d1d8fded51aaff4d6c94082d8379b
a29292e4bbead01b33f4d22ada180454f912837891c2496938bfc0124be5
cc88e25f1153176bd36789d688474d8b6c441f56f8956684c4436a92c818
d52fd07045f056590a736c797780a2b6d5bdac0cedbd784b033e97e91a35
81cf99edf94b48ef9a9228f1ba6eecd19359d4ec95ff1e57e12f47f10f65
2163b51f8175392c2bc8d0969be3abd0f68857a3c2aed42bd2bdb03a0fca
b61f7b081b09f54dd7996de9ffdc1e7b61a3503612660f50478bc46f5ba1
4de94a0cf2d38160037d8c9b6ccb4dc080ee0282d111d6ffe5446c37125e
23455941b40d593bfcf670ba69dfea0b96a56228bbe97296e842fedd388b
c5a5bc9a49833d9c15b4898f3fe0cd5b33ad7147106ad8b90e61f3e9168d
8139f14284cf1e77413ce3ad6f6a35d5959c292c80091d7c1c0e73e0d536
72defe4c810e2bd60181e9adb3d42c9b4d795e595af4f60bd930bde96ba5
f082c9a9570a6f96fdf8be7160e809f86e5c7baa2a69a6611e75be3cafe1
ac7b1220ebc9f4a2632dee0cd247028fb6054e3f5cf3da8da25981c648af
e630cc3e08f77744e40198c345c14ff457af4b76a28a415de7f22bc30d29
9fd4c0fcb3ac7a07cf1c2c9bb13df110aa66bb4c5fd024e4968572e342fc
779e31c1eb384779b2b19c0b58cd63d74f9afa4d6239975a830f56274d73
ad6a4e8f0e3e9b72c12ba7cf1130e8fcb75bf740367b7bc4a9a1c13b288a
c276b240440f75096fd1a04e4d33f4f6f97fda980bc59053fd1926b482bc
43cdbb947ee9f99b5e00b2c3103e7f691019ac20c2ca8118d8183827ecf7
92914e10c75503e5f1b734d2c5713abd8c516a6ea50dfc49d94948719e78
c0adec4557a360a0f54d9111785175b54aa47445dfff3733c591c0b1a13b
0a7c7b891e61d08ce70e265fca212685488faea7f38a19477b2ea1b7a3ff
8dcb5dc212a471d516a5ceaf95461b62f5e415daf01b5e92fc8288ba5caf
3eff2d84dc38691fbcdd04df1dacc55860e5086886874aba6206c228c58f
6757e661c4509043215b973b0ed78906862568ac7e89f5751c267e930594
c0f11f06eec84ae4b4104cf736324e367d82ed71f3bc145607b39cee7f37
eb12434764af4c6b633206fe8f2ed3d9be9ffb2e7836d9d94ba3d370e66c
cff07fb4741ff56bb0c55285508376e04c621dbc6ddb2e05da0b981d4e2b
880ddcc957b9271694b87651adecc5da04c3543f66bdcc28018d7cd43fe6
02c7580fe02fc16f760245ce7593a4487a95cb207cabe73abcf2e72d8260
2b35494833344eecba062ef0fb59fbf5f79b420d8d2f832fc5e8f47f5456
0d66d37ed7860703bf5ca0d48352a44357fb12615b28fd7dea06ea66fcd0
879288f93338a0c208448f1a6c5d6fa533a517cc94a38f0623b789c24d6a
2f172491bf5f72096aa55fe37607c1d59f8ccfe1ae4a07942871bee0d706
9ee2fd6b5414f31be7b84171a8d1d3408a76e4927dee2a9c240b2a5a6229
9b2ff9ada96524d708c1c616433eecd743b275b5cc4f92b6436bbb1e235f
de04f59c12a35423f65091321d653471f247a13547b9ede37cfbd304ee99
c7d5df8355abc65af42af33b685bbc1c6a31d13d5eca609a3ce7e173ddb4
83b1bd3f374f2dc47a0c5c0798777a8bfd7cb060c293173ef5d94e53a9da
44f557e4ec5add5b33a638189bb59ebdede6c2e68077a4e0cbb94408e69e
f8f4cd8ae0f17f4a0e3890be113f33f773f401ecca6923aa714a670d56ef
50c98fa71ee39741d2cbb11027e05957ea41c4f0c0f64941e6a006433b78
d17d53700408096a43af31bf52cf5c41c774add79eee0d5a4494858d3af4
5c46882baa64163daed20f40ceb425a1c721eb82dc2fc0e75c11eb38e95f
943fa0840dc29bb3415c8bad7640145f5523e4209745b85635fec0e024c8
6be000506c303dee68917bbfcb999025f38ee9d5c71a4b240c0d81bfce2f
a4b936b1a340651bd84add35b2fee57498c7d13dc97303335c2b3d1008f8
e1219f39205deb90090de2e848f95577bfbad45609cc694bf6d5cbc12880
2f473cd25da68cc8674b8a7cec44f5dde449125042dc886eb6543be43c3b
eb3d8949b17d0df31334edc908e64ca79538a741ae3ca22d3bbbed543445
19a99a22bce584b2be701f86cc1c2ff8bf987cb64106058c3379e63ff37f
e9d1498c1132d88585f5183a91f0669e68814a101d5355535a36f49d2a27
541b3908a40ca93b71b0ec424e99913d5897d02b0153b3d8354811af26c0
dbe66650fad718abce4b986ffc7378c32801c984bcd7ad67f7f58e173cbd
2ea43cd62ef667e5fa59f9caefa188fe1ee0ecbe477181c46b48fcdd2dc9
ba700e6518664961fa1d4faefe8685afbe36a4425bb4d9d350c9c02f9309
6cebe11876f89f9b1e6d1eda530178c595f9e83efb36a5f9dcab764fd01d
523840117811bb7f8d884191424fd9ce27956161211aed288ea48eeb8bd6
edf4df3a621563acc6f16ffdce31ffb8789001dbb584c57d26343068a4df
60952d534a83d3b7cfa9ef4f1207afbf4f722a5960fece9c0a625cdafac8
9a86007ce5cd3ec287f8cec60e127d369c7afedeeec852dde769a9748839
252b90caa462db80996a12fb8c8dbdd04e574bb3a7937be9d6a5922fd7c6
afdc23d89fb7fabc785830dbd40282d2864091f787ceadb2fb88589f0eec
7b44b7732a7893dbad37085f27b7ffb830d0985ace70cdb7211b94c24a25
113d79e5093d3e40ead2591ddf82c3e33b9b64212f79dd8991432c2cdb23
f38fd7914ba42d5f355e1e2bd52be4111fa45a02ad8b0d7cf11cf1f360b8
3f065b9a95bcf1f415ebe90c87e213d1d17dda9fa0a717174f99a101e179
4f9a30ca0ee1ead0d146dff1e58e8ed8c3b36fb02b74a2d7cf4b40b21665
2cb9eb1a015abd6cac50db178255a02e2a3b07e73de2c6bb2cd26ea3f1fd
6cbfe4bfad30bef51ca3abb78fa99c4e5cb80644208dcd5696079ed1f1e5
a8025ad548ba5f419245c27332a992d5d67bc8133c78d762822b3d70fd29
9fcb9f23a60006ed30d4fd9002b9dbf9ab7aaace0b12acb04187eec8123a
fba2376bc52839f2811eeb5ea34faec32f313a5a19233dae18b3d59c1eb1
2c09ed1b4670215a00bf1ecfa0d00b38b2f8595f4f1d7552fb9f925b1ee8
dabe910e11e75b845eb948d101ffd55758cd3b2fffc9cac4a6a0616d6533
2036ddfd609d375f673fc0fea75fe1e9e278f81e6889d52a9ad57532c2c6
5dd7e6c477924ef9941d5c9c3ed25561a05e2b5cc1df5e720cc918b06561
7ace96e533b01a2c6796b7040d2cc0097b95ccbe68b1eed4d8141b7d1da3
2596763bdbe5ebe69a3066ff3b6815f3c08328cd4ed2eac6b725d220c791
738a6d4b5043f7a8012a2b5fb1652c0c0cfe67ee106d109e0019675b3c8a
d0a81070f7cc48d05e5acafeb266085d42c67b8fd635db025fe8e971dea2
323bfa60b94d25db2668731e96f3459272be3ea58ce466133cbe894b268a
8c63765afa2cd4ab71347e5dd3d149d0ad2495233b57aaf594ea08efe8ed
f429de136cb5100b02c52a3ef21736c74fa485f4d92f69b6d8aa445bd35c
0a63e4851736fd575eb1fa0b37510ecd7c91f477990e9d7d766641fc6bac
fc85006c7354593c5951d105d65117f39d60034152319e5e476ceaad7bda
6dd5b27823d7744304d05157a3c3edf2ac2b228bfaa7dd41abcbfe6ab15a
a645c5424549654433fdc90ca241d0cdef4031ff0b8c4d8bfe14bb9ab6fc
343c7eeafd3097fb45761b9efaae8aaf21156e4dd51be56502970bdcd7b6
ccb81e370a610d4ddaa8fe44f903937ec449ee225f8e35dad8e60fdf64a0
987a24bc93da2d46d00f1aad5c7cd358f6e6c0d614be7aaac5743f13b46e
c288d4e1cc5b0436849a0da6bd86ab1cfb8ff956002bf9cb78642c1bf3e7
e2f9a2b89179c999b32bf03763b9133ad3b0ba30356dd41db3cab189ac76
98ad2de330da29486dc74e026bd9db41bc9d4a4c76f0b020fb33ed8f4c54
86501b447ad731198dace178c4b7bf668b84cbdea7e0b77df125fdb44aed
2291138bad62db170ea4f583bf2db9d2723d5e69243259107c72a75e5941
efc2e9bf2b469ec9f5a557c5119eb9730624cdb7db4d6663d1d0bce9c0c5
33de593276b50e82a904904d9e3ac26b6984821ccd20f7b592134a552ccf
8b83ece850b0d35b1915f2b4b393ac215e357826aa88941dcf07d87a1be4
d3ca0cfdb897524dbdf58e60c5e1b82bca783642a3d130968418a72538d4
62ad6b69e19f732400dd62e6f061598f7f34c2e018da65e0990b9f36b6e0
fb79e614ae6b27ba3ee5eb69f699ccd85dcb75d43db563dbc2e869f14f8b
38002068c09fe1775f9b638a4b25bbf128e0c34546a8607c7ee246723c7d
0b21f9a864a75e6683895d068670c8f238e7e314c0609b3bad0284dc8709
8f5252b10dc70a68b7b05e2a8e412bd81212877912d3a3fbbb44bd2e35df
9229f6337075a3767be9d0aefce22fafbadc4854a11ed8bdec8125edc0a4
3567c8282d24d0cefdd7ddbc7d064394d9bd5530b202736e90e8b1e82b33
857a72889a0ff0ac4456160692bc1303c2de3216ec2148db0bbd65a6b672
270a4b15d2bae085a1c4fa659fbd19017bf75a33ef0e80d1dbec625a9299
dc87e7c6843f4c7e4180e17953aac7fdd73e7a1845c588b39e6e563b9789
db4ebfd3634432a649405da30f56ebc68da9eb0e9735ba8a48f2c659d5ab
1e21a18ef71c0ec0b35966656798c9ab6d080c092456c7f7be956ed31ceb
4483294509a4b1cb3033391a628456ebb92f16b98bb8c2d5cf869c0a938e
ad5acb31ab5b923f2aa63ef2c89784ef715ec691b7224f1516c6734ba65c
a1ec0c2286ee78fb29fa0c0f9ad0a129d7c47de9d779d49de618853efe85
d04f99c31c7fa194ea26b7ff5259a811c56e44a4ac7a72044502b07fb756
f3c9b37a175d96e401d1ea315404af961dc9cafb072c7ab42f3f26ca1840
0e0bf4a0f17d9e9d910681530498fa64ea8bd3b44552a113c4963baf2a5a
34f50e6b8d236bd37f8ab87d7e0f89cb792a0b6423b51758c824652fcdb0
e90bcf16a4e8a0172db724600c712eb91ba3b1a15b72ba194c671dea1cd6
63760678005ea63228959f428eb91604a14726bce18f8d375d5282f8ebd3
2ff1dbb50eaa69434df37b1064e0fce1d7372aeef4581034c801c6764c50
a54850644b7160bb04eb45943bf4b04437e5154ad1f69a72a160950204b5
d6976c904446e5350b281caeaabb08833317ec7f9448692af5e88c63f207
eb058c2f2e0762a9360b260a3908c26b0fdb8afa024ffc6754443ef0774b
e07acaae94c5e4bc5724067c5aaa8bb5172dfc3b57802e694b7080a7d06d
9250ad3eba5853544494ac685e6c4f89087cca80764eeff2366dd8316b1e
bef2c076ab6234af7d7c63f6482e81c43605f2d8316f4af58db298cbcc1f
d4f64b0472ae9adc5eaaeb0fdbed8135d5d03b732e6a9cf46174214bd742
155ad998806bb457d724af598746ba7791f27673b2c5d91556c3bfe5e622
027413794a1d780bab66d6d0fd46e59e72046308e7d2d35ba909669e8de4
661be65734e5118b3d2b820d71c940c51646447e7f266f9ee290b7bacfd2
b3aa4fe35b67876280cf987c7cbebfdabb0edfcb038f3679054e042023bc
1ce72ad4935eab4908be478fe39c0f4bccdfe591ccb5eed231b3f4738d4f
a20905e4d8f92d1669e5ef7549c38b6ab151a25f8e5e3bb32ec90c2cdf9a
52d0849be7d6220a41cf5ee1d7bbd1fc1e0c1c0ba23a0fd3fd3ee9327065
f15f81acb2902ad3c45e82a723a39d35eeebeee8d07f90030b71467de408
dd8a6127fba436dbbfa790dee60f59d80965495145fd0e21d8b6b20a750e
7ef13759f2e15b6ad1ab10289fa6743c0f4d1cc7f8b82c3bc6f36a6b3d41
667e707a7456179d1f1f4e4112edb4f81d2979604965f019d5ecaaa8d8c6
6dd0e1622d27273cb5c1c25ed5f7bfd4f84d6b70b315658ddbe3d6b3e96f
606499ac12494c66d5d8b71574d72046214424e4797b440fd0c45ff9fddc
27ec4ba7cda51fa5978371a5b9c423f8498a4fdaf046da8862526dd5d647
4b9fb7bcfb64288bc3f7eef94796efd6440e514365044b62a1c5feff4584
ec24c9d1d083f58604343105f115435129827c11ac5737f9bf44119e0d1c
291ae65f28885638e190f50d27718098d7756ce31f8eadd0c0f76492d02a
d2d07b2b283b2ebc1bf56b1f98318d0657bdcc15b4ac1f182581b21d29fd
4329da6009ed8de016e02466f4551245c860345537ef92f6bd7b6e712ad9
bc61d32a57e54be706e14a8a808da6648e763cebb6304b085cf2d3bd1302
bb092f500e6d7016f6c6c78c1c4fe46c335e2bd8f02520cae7ae58282175
c085bc00ba0eb2a9e9097a48f6e3c6f959de611983bd047a319511a944cc
dcef246d7a76eb3f8c596e32f3c00637a7a875c852d46a4973a8a6a90b26
7e46f92001d0606ceb6b1759e48e9fe678cb70f75ae3976eb5021545808b
4d0e9b0cc9a0e20445c04e4b4caf6343cef594908fa4cdde9dc3dded29f5
a0fbf247f592823a4fd66516885aea41f5a14adf5d16b79ba934a6400b03
d21aaec5f5a52e88b2246c1e69fd235299193268c2c85f0484034905a774
4ce67361c38afd787113209c468a53793902c886fdfc13748e6bfd5702b0
a376405690c6f066e7b6a84883a2266188c7015f36e00d98d13c4a070e72
9d1027c9bba5bd07e5cd147fba7b3b4259cae7b61532946ae1f3fe26a068
fe46365ed0fa92c915b06e9f99a2223b6a6e009e70900519c156016d9ced
ea5c04e96260087f7bf6ae29273ee6f73859a442f3d6f5bd12eda7d2c95c
8392b8c3fe462bc1f863e80f79e14b115274a312a9e59df186b473a9578f
aa2dcdab7601f0f7aed2fbbb24c31ed01a8502b0373993120cad8e6bf0e6
2294d631c11ea645f908ef6a12d159e798dd958f588e2dc71b4e6d041ce0
65b563d12b164bd1e147eaef87e41e2167a6a280131e498455d11149b34b
25c2103cce3a10c49b2271ec82ab814c1566afa0b0794a43bbb2d9ca0333
2a2ec977529e7948fa94405f8d4b11f196c4beccb9907cc5e2d54d622dda
627133ec661971c3baf886439bba2969c9e537010855c091403c0cdc63f9
de73652ae89cdf27b0f2405c4adddf343c7fcb79320c08de7b30398692c3
1ca0013c4ff9b4d7e285120d97e46e70ef234c82d893e57e48291b85378b
4cc339ae530d5bcc76d130e5ffba53ee47b679bb02f0c4d3bad69a08fbc5
ebe865b9067836a649e177be1ee203353dcd771c4d62bd0829627bbf7950
013cba4f2ae0196fc9a52e959c636db9cb5bc97eb092e8b98e8b73977a77
aa3ba566138d691ee19544d09b28e118f32b465e20189e936f6bf92ea79b
55a8a6e044fb54ce39c19e8ca64aa34f5891ea3dd3f452fc336ec7136ed1
c13861a5faebfc764d468018fbbd56d08606e816fe82699b6ad1533fd0ee
35606d61485998e6835f29553f6a0ca13aaba554c3307973ec64d51132d6
1f710f6e4a908db5b179a03bf9bdd07f8829d8568d46760e43bcd6ee2f09
f5d42d77350f754553099dcfebf2a7c10e6e4b1f5799867e8eea490493ee
fa7643edbb06d4d02fc0dd8f9585bad6b23814f84a2c0728c6f1409a6812
5ba318b134ba5e65c569af8976114dd5363d788f734376e222d675459be1
ea28d4262eaa1d513936d49b935a69095bf3205f832f9b3689b538a8bdc9
3d400d01a509f5fd9453a9455a39205377bbf28ef7bd6418378094e00235
5dc1e46b4d8d546414214267a099aaa04f132ea3fbcc0f580991f23c4f03
91f1a62504a20e6aa4bc484387084ff5bc4b437fc17de80faea8a6b6002e
9c8da6769ee76e0f59894a1185780457a820d602facec94b27eb7084af6e
0a356982b72f9eb2959a335e14a830a2c8bdd07ff98c10a74eb28b98a548
617c496df7f6eedad2550ab8f7bc9b57d38b98ffbea9a22d81a02cbc9c91
4de3686a36f76cca33926ed6daba60136d0bb513e41909fa21005fb9ea15
00f37d1aa6266fda53c2c0d1bfa5786fad01ffac7b89e2e69fc7ad6a2f76
414f07f8741abafe7fc0132567ae9b80a159a1ac46ae9b13f3738bc8fb57
9e6cdf0c906c1e2e295a8be50faf7ac886c5478410a4b5fd1c6344dcbb7f
d5a6d039bdb66d2cae7e9bd660a78d49141b908fb915246dd1a84b9ae6f6
5576c6bc9545728a32309f6a9a89404d83dbb25108e1bee901242eacf36a
a3585cef614812566aa03d188763f1adcd7e519d283026be80322d8494cb
3734deb4c88aab5f01bef83a2264c4f883d22a89bb4a7a1452db9d3b0f80
568433640cf50a6670fe1a5488265e57d75507d92cabfa7268453d0c4bb9
918a450169a2b4c9c585219425ff1756c2ebd239a094a2834c43ddf2a2ea
fb547a9fef14acdbea96d134f9da6d124f73ff91cfe03615a8f99b6f6dbd
adcdbd9d8f075d3ea660b9b9e8480feefca94c7e992f3b12ee9b8cf61a1f
e31d01d98a078fdbb2e6b49b23dfec7d57cc9c135e3217f5a4345e194ea4
6d17c294bcbf323c8145f36c66d2c8104c36e110c79f177d799cb33a2b04
033657cd25470de4a16b74da47824b07416070e1693a458ab5d41c508520
e6237d50e186204ad709c254763cba8646e00976bbf4ff9c666e1119b478
3876ff41b3b4c3326ddf645b4ba89281459a2519d59b16f32089b06ec058
dc1e5facde3f82296f492f0feac06efc9d1aaf7bd6738fc175a8d4cc1d6a
838c3eee10413d2adea271ad478d91e2519835b140cd6db9e90e19a81a8d
45cde2db2825e161af89b4313c490fde825fd8a18dfbfa3294e9f0ec0499
bd275fed0187421ff2065d447dedc83a8b7bfd3dd2519f2dd5134c2df0b6
681f7e8dca772c4cb72c5414c1e03584ea63fd4d891404787dd4be2a7a63
cf259036dc461add66a3519d002339da0d65c42183dcfd5e329c2af36d73
d4434feb6e29d28a7e2f2bfb0be7704b66a329fea6aee4e895b8ad27dbf3
5c5c8e103932c53a56434c7f4c0b854f7dd661719d4a5a115818629a07c5
98e95e7a34b3368fdc054e9def9e50a6af483741587f638339d7804585a6
be19276c9efa560666fe6770af6160931a8d4034f8ca528d6824d7279eea
4d1d24096daed97bed4031bb9f5e749bf7ea599794a56238bc1e9d72b8f7
e80a005a6bb8e33276313f87b7dee26646ea04b2fb56b8a8e1484f452f39
8e7b09b3f8fc26b99f77305b3aaa579337d905a9b64c2c4cdc7e6e3f75cb
6bf1365fcd2b19bb4d5a168a1a4da047bbc477b22e2f620165a614ee4883
afaac509d591fa5495e57bdc472c93a04d32168861f717842c95ba04c5c4
b86edc87c8acf290fb14a2057e1a12a8a1d8fe6ba185cd082303839061d3
c9809bc57e64287b2be4de02aecd0032763f5b085213f71565fa8c272bed
2a505919f019aaa3379afe7abd975a8cb5fbb83ea15934967ac2b19c480b
43d8e25b3f3a1df65e9dd464d49f0ac20cc5eadc32b3515073586fc1500b
9910da2c68dcddc98af9da4f089816c67acf82aac16d40836dc9d6cbe2d7
6c120e262991236172ec821d82007ffc87b7f9e889168cf209944ce5c107
2ea4fd4d3ef14a17564b947dd78961d130d6c51375fb26861845484fbc5e
a8674c42d799dc0d2799b9a441625b44562731ad85788d208463e79212fb
d0643b8b5ee29748160cde931cdf3e3623c43ed27cc11ad003599d48dd23
79bad8ba9ddf800f5861ccdcbdb75f4fe12af847b506efe26f2c613ac9de
b59832beeeb81ef3c168109c07d1135d873231763f922caca699c405bef9
6ba25c905a93fcb0fd58e06a1feab48574675c441769d98f92b183fd07fb
ec1ca2dbb501e6e9d7d190f7dcc3a8165d6ed7cecc7c2c15efd5548c48e8
086c2801428ae2c486e023f2486eebdb45df825fa99ba6a02f45db3947a2
225b7741ac9bfe117586424b58dc19016b2e303343470770eefe3fbe904d
05b35ca24fea1895b726e8e675beff80d9ed45a0d06b820971fcfe06be04
3858269b4c149564801cc51be0ea907e1fa1faf5e8911263fa334f5c7c75
9ffbbda57c00eb8367496301a91a75a2cb73748ecdcc86c55c11180cc1af
0bb8379ec0ea7b3803b8edb1474bdfacbcb1a5723c6a502fa998f5beff89
98f0ba5de7c57e4ce50e4a42a422308ac36446d9004859edb9d667fbb90f
366f49ec47da7f82a368a05dac1b88d6f64bbf3bde0b9f2c9bfa63ed3f5d
f1ac9a3dbf9430beb76ac7defa52eb390e7f036ccc003beb0307b7e0a7ab
99f60798867f94140e46196af4f5534257111287ad00d2e822bbedc6bccb
601c260379008ebb0cb9c8df21bd342f6207baea9f1d1094e29d5fbfd00f
2920211ff99cb9d8227affac5d2678acfeadbd4a3e6799dc5e525e2d7f31
4f142a4e60670bf29086f19f5f9d8b1b14d5750ecafd53052cfbe132ee8a
70d205d419b08ee09424d9a307d3dc13ad50581968c19a0e5ca281c085cf
48fbf19fd0ffc44baa001a5fb3265b766f2fc419a9ca1e92517b21357e13
b0ce703bb17b31c18712533d85583de1cee9a1e82e7c903ae04590721564
db16c5c0b3f8a7b030bcca544f79f54314ce6897429001e30828bce06e3e
ea9572a0e115beaf3208d5286249290f5517f73f0001c9f46491ee865497
bcb5a9358dbf06a797bd5a0f092f5a0d30d07a7e61962743c339f6c4ddad
4e7817c6b93620d3d94d85ba0e1f520854cf896f85fb20242708f391ff81
0c74fdf4693f657fb68aaa09d5e17476483027361215f8cdd1660c38d588
bea882c071651de128fe3b0f0e7e1c6a313c30b3d66bb76989f52a8836f6
b4c32460c6cff549de9ef8e5c46299d7aafd6476b189be15c3fa96cadbde
32ed1b6abea4bd998d2a730e15bfee56e27d854dd24b3ffb5513de000a12
e26a6e3e511f7b7762502fe51845edb776376cf7a3a7f5f72b8015c65f3e
fe4b307b23ab28e3fed66df67d9f0ceefca76020f6572026c9019fa42572
bb7dece8822a8782cdf9e6956cd571be856d442438b149ffa78949d19d59
f719039006bc732bf8766cdf1519c73463a0b02792c2010e901c32083a5a
ba980d397aff01a8b90c03f52fce8bfc53a11f70fa5e609a15dcb8d5c0d7
02800e6585e396d3b83de8fe7a7a389355bea9923ab0fbd96873b81e9571
4793d3126019310ca9df0405e7e8631a6eb8d508456a466ae62b86969b9f
6db875c69fedb4d616fb429b2ba8f52517dc41796fb3b4cdfd8a28b08138
9572a73bb9dc0128568c3e399526556803bef8753156c3364a8cff245d10
ee2cae636d0736e0c418b6144781f3bb5a85ed085042ddb0c46086bf46a6
18d8f66d65bb566e38ba0aa73932e3218b887a94846f4af7c66037a65053
013a6ee1477773e3a2c13adbcf48dfca8883d6e4b667236ce52950632e1c
1274de7b144abab8ba56f72602d07587aede54f620851467ff19efb811cf
42e7ea12dc19a38df39dfededaad4c7df4dfe150dcc5757f487775dd8139
f8934efa4a8738c8925dfd5ef2d8b654a4919f5380130fc90d4e1b472baa
0d4fd0106d44febcc79c8c26d8928c2e0701f8b5168e259c3a1ce160293c
6073eaa2b0b60cf6fa6f07681b66a3a98fb245a328a7db69b62795207ba8
036ad28020b9b52c98a93cab668bfa08342d7c4a197d3f2f828217ac85b4
ac602a1a98c502a7eb2f76d1368334d4cb8871536363fa7e663c5f9d5307
e63244d5ded90818e1bdf4cac27e3aefc2c4d9e91c031bccc625d07ed1d8
00ecf47ba2a0f3f3a77d3bafe74cc7a2158618cf1bb9c57ec5fa49407f55
9c12d85b649c69f552c9cf6a68778528231a2654288ab0e15578ea95a6cc
83dde233e1b59c6a4a60d3fae58247d82099f4d9effea2e40f4a60c69641
c0c3c6d8b10a016f5827fd5989732d655dd6b42ed055852abae008117c71
ec058bf47f2bc35bdc8926bf3a53238e80cc94494d7ff208473f4990b49a
c5b1beadff2d20a2e0dd954abfe0ca952dd8cb5802460ffad4e1c4d22c8a
c6a2fd0e489cc6c45b51543d3b771dee41137eadbac67c0c4b6da2fc8242
2058988f5fea5af6530d05607ecd5d844276a4b4f8ba12b506df6b333d5d
0c4cf4226d1a544748efa4708d282e69b89a1be0e982897579ec296474ef
935f81aeb8619167ad590eec26a5016da79af70e9d8f295727fc8fcfaa25
a5a2e6764d2443eb3a0f7559455c9e384f5245ef8d6f49c422e76c4e6777
42add015842d694df8bc7128940371667af5302641f0420860ce240ca567
3217a389ccac65621fd4855516e978282a87c3cb4a7d21bed31e046aab10
0a3ae4a9c453279987d70cb210fd8cf82663cadaed447c15e103f718ec2c
35be6f7abd9391d212bbf5c833cbb1b1b3414f5ba7a5708e280a99fd7018
1b32140ae9cde216182b44f5ad9d90c347547238b940a8a0f36929e3eb07
6b48c57c4d168de23b5a6ead9f0e03917eb2c2cbc8b7f2df05e63ca91a99
d4eef43763caa0c24f6cc19100e2431a00ec68b1c737a4a599223ab56bb8
b49aa6d22a71f09f9b1b0b1d0563bd089ba49907c44581c24ff8d3af6c97
782f58c68099bde07fab5a65e21d49ea8df28b91bcce98a9ed738f710c15
0b0ca5bb67f7af8c6a621d27156c648446fb829ddf6e787ffc014eaa565d
024b22b49486644f63c22ef88417f6529574617e55f07906c342ed568841
bfbcf6f52343e0c83d558a2087c6d1aca2e09d402045b10fd3a7c9121254
8c286374763d655bc87a114d5a2787d1717504e99db0d14e700bcd9e5e2c
4ed03600cc0cfba65677440c24318b25f3ac4a317f6c524adb7b506f8ddb
9f8015e99cd6d959e20de839dec66a4ae76c74b5c24e7601fe18c8a08f11
ce885ae61d31693cc9cff26f80bec40cc7cd343c7f3805fe1644c8d8a150
ed833fa4c62fc4a9623fd1605db16920b94337ba04ebdb33d558d702c41d
09d5108fa1084f2153e5bb87040b12f928f69f9c72be2c55cd8ccfe1313d
783c2bc3119f14db47b73a263b8e6cb81a7267952de672b9d02d8f132678
3358c4e9cd2c7579dbfe01006ddfdafed2b158bafe44a774850e20cd8dd5
9fd1c7f22bd6d3efbd4fc65df4fc04a7fa15e65646ff13a69e7eec70f2ea
fe7b625fdf37a292e60d0446167c54b9be5281cbaed8badbf0c3905de402
221d36a6b30547145d3409de5ceeeb09c5646238aeeb36fb038c08f009d5
30658b842b78d7003a85e368da2cdb2466502c52d209a1cfc38b87bcfa69
c1638fd1bec69836ad8e947af5ebb7c1c139feeb2ffe9e9b951ac4a98d17
1f051c9d49340c5289cf959c5eb99b4a76dfba15bb865a9912e33b40170c
5362c73d14a8100ba1a7a4d11e4132fbbdbdbfa6fac0512ed552b37d83f7
dfe975f975c42e57854166b4b3b4d27d584f82b33d8f61fc31b2a2f68cb3
999b814d50658fc0d8a6b454706d0f6c6d7f545e2d73aa1cdf17b8376e3c
4c4f12bfb304ee0b1474c9ccbba6251cd43c838386894e7988a4a6534f67
81843d4a3c1e25b8b7a26ff50f792f6db6ea13bceb2b099f8750aabf42d2
ab07b137ec12cec73c8345bcae8e0726b62920f47bf5c1882cfb880ae467
62e99e040a1daf2c0a0fe841d4fa63a4068418f41a007e67e1635de7c6cb
3794b36523967b296f92cb801a51f4f4ae7b8be3d62d3f78378ca104cc83
79aa252abf5a6bdf5eeb66fc7c053716faf43c308404cd22a9c3761df8f6
4ff62a6caa01a20dc03491b291f0f487bee6f648a17d337a81a43fd34594
261135132b439b3e26c314870ac4db214768133cd6bd207712043715e3c7
a35baafa7e3fddf96d70eff1bb9baf9477467bf0886172dd875acead7ca3
0456b1f74c4687384dc1da3747ff54cad093cebae2a01c184fe84815acb9
7099c0371f8ed6c56474ca3d22d9fdb77090193df9529b9ba37245c96a7b
068e3331577c3bc938393c35009f36443ed8d5fbe09c81acbc6c811d4169
e79ac3ea33b9523164b0901bc24db383347621414f30c9ce3a1fc93c6c12
baef33dc7033fa1c26fe440e2a5ef18baedc878a9425e6b3de60728d8492
6fae521421ce0c69502e2aa039410b4bd1bbd0802152e6941af434ac6633
baa3a64efe14397681f7ba47785d57ab4b9c41f4febc87dd27ef12e03f20
2df0e29d479c4b8bdfd1ee81cda9c5ef4229ddf642fd01b7ecafc15a5b63
326d75db09b6a14b7c3c93e52a7faac17d4e4658751c3d2e376b503f580f
6b202c601d71ef810932fe0d7e4b260ae07e2085e582f03fbb1b774c3429
69a637be242cc5b0976a2a13ce6bdf00618adf38ed03a24eb17c99f377b1
85a2bba05b4a215940b57830f942a5e9fd6ec2c258f704530c8995a69d1a
c6dbe5721e8abc6ab4d041902fec0dc10e20440b65e2399342796a313654
ea7db9bdfb6aa209d1cfa5c8254cabedde9922af2c02b137a2b9d77ded08
be39b63d152a0f287cf6262cfb5ebd8f24699f23257c3faf79a8029eb20d
6f3183fbaf941f0b0c687525b4dc4ffa002ef353866b14a0b80077725c31
a91f7160b6c57e996f94d99b953a7ac12ab90e86357026809e68673c4922
cc21bd916f534c48f50788f4ca37cb8b60ee1dbe1f54c6a791c1311047dc
ebbc7856f6661ef5c24680c5ec7ca343c47da34a07306fb2efe01bf11f2c
e1e99220331d0925dfa82e9c6e5307b843e445a63db804ff6833511b9cb7
be595c06ae6929c18c4bb4813d910263b9ab88d54cbd6483b8aeb296c686
e8d95d304196c42cf0843d8fc55af5ae654bd6e4359e6e0b0e13c0450761
c7312c9b9485379b28e16ca4bc41669b5348ab5c03b5d3e6fd5c07c380ca
25ce5053977832f8c305c7c40af1c5c9d3c49bd73551ee33d3cf640ba063
d3250ccd6275ff40554faf6a6528337489439d1c767f12d8a7e2d3d2df13
dfd615ee3141ea053693f7f4d361def54b9d7323cd5a98428e82d4145492
a0960d438f2350910f6ff0317a5765c8304065b34f7668b5b6f98ede0a7d
b399d2a883fc515522c449dcb336738e215d46212d30330e71f82a5c12c0
cfecb7426524223548b5373760ee57e29a154ae775dade7ae60d81f93973
104aeac8cfd5e2eead6ffb8209174d430adb1f798606975ce94208495e1f
1a719148220d2d5804ec53330dd43838e6774844bcbdb28a7fc4b062b73e
ebf53224b28828916bd56942c39e1e566ed4166b5a31b506f4b5e57fe4ba
90dde1a13aa34ee18b17a7aade625277533b7c408a3609056149a6816ce4
e108dfe5e2928c7a526bf2d7a853e101fef0d14a7f4bcbf957315d8066e6
7de9dc67e1f49ccecf81719cd65ef7a3277ffcb4904d11ad9c285ef803b0
bfd3bd01138408f115caaa57fdea0ebcf391be9c97e41b4d171fcfc797f4
ede3e8fbcfb926b42b9a44af40d8234d0cede91494c2d33a6977d6c20414
eff6c943254da397e15b0fdb3926ce9db730bdd462af9ea89c79ccc0e3d5
1cb552ae00ff339f4b95b34bec5dfd4715747e71eea42446b03bc7de2a88
4afc6a97d4e543c86c27fab6341a2e0a8d8a5774aa3bd71d7a6f23006bfc
5d85650ebce7b0006d997229c2a86767d2874cb30220e25d650a9b682dd3
084837116b2b8d664292b7ebd752414fbe5d07e5d9ecccaa268c29e90a51
aac93463ce6da50b6f4939407dfaef07ea034e6600f347c43b42a7d14334
953f0bf99a1c54e8cea1e1d7e68370838cc8dc6f7353c2d2326b2ba96c45
ecb2744bdfa40dc06f04120c99d13c3a2cafb14e492c6e50eb2bd17d346d
cb56dd8881557463bbecdfc2c0753de8169dfdc6540f4617a73c97dc2dc9
49686b6d30a4f509f116eb34aed1c34e11ad5ae1eab985c644185fc450fd
72a1db04e54c847242c555bce2f1a3c0f3424dab1ba169734219aad4b2b2
bb2b1e54cc591e55440fd29c20c9db45ad8a76aca20e04b75b2b4817168a
d6aab2bc2e599ff1c8c0c5b106250913bcb38a69696dcae112aa8a99844f
71f5a05165d3d1810b741c9ef68365f56be2cba53b5af1376530ccd3ee53
266df50683a1802266b547e94fe321848d30183cb8ce5a798bcc8826aa07
dba71766b6ae17b746ffad758c1b6978789cf4c0ed342eef717d716d656e
bc0531b2455ad36363ff491cbe10749aedc2d197f8473d88c3d90a82edf0
651a1efe33d6eebccba265c6494ffb9284df83116ba72c6488ce7fc3dcd6
e46b059e591679df4a7cc57869c3507206e73290e29a0ced561d2fcefb8c
9af8dc1fdf9925ae805b5a0ad1889b213190bb3b0547523a64532ea6a2ea
62b7c3158d1237c9e03ac0fd5b85f6c30f376010a319cde38137f5bbdd15
9c8327ce2a14fe3fe0e5e94e69e45e19064d942b9e1265b959bf50c5dd11
0972b8de48f546096e71afbdc650c5d6d0ccc20892d5b73db015c10cb93d
7fab95c901960367325f623d131c92737c275830c66e0c9be9f38ac181cb
9a57ed88259fd159d420b3537315897863be0388139244f0071f967d1e9b
446964818d98845512dfe96dc1bd35da56bc6dd0868012e1cab3cac57484
68f8173d8e1d8915ee170812214422c2be521072bdb79819dbdfcaff8445
c3779eadf237ed84d2eaebc606a16c009c5bc43e907180fe7000becbf33a
28bdb444f73a7de9df8b66a22f2158e91a24992d1fb4ed111db34f31a2c8
b5c2dba66850782ea668be81bcf42ee46c22286cd8a48f9de7c9060be0e4
d2ae3d195f58bf4069edbecdd8f377d410794a6e1b7ac4f8812a92714d44
8e56556814b5f5c178a78ce9daa49f2dfde61a6fa9d6d10151ff96e6ca57
63e6fbff18769143de94a7776768a6377d0df6a84995b22aef06a988e3d9
6b9561e9fb0b1567fa0fb6dc3ad451f14f3251a9a902753ca9f1da240d7a
4525a8cdec77fdfbe07d6873c09be6312efb94189e0441798cf203e582fa
3d9f91223361f613ea3735088db61f769b5c388884c9619fd3fa31f21d74
6104a7cd48d16d17c3b7da87dad6016359d4cfe2e01a543e95182c70a03e
439081644cd031d555c7f3e2c4a8ed7d7e3dc49a4b9a80ada06d5e04d448
bce95545ca1952000059b4c2a57ad60a51033fe47be51845f336f3bba296
25accbb8f166da97c173cf196d78e6a2b3d2982594858322ca67204b890b
c856767954178ccebd1b2c8e2eded9ac68611f1bd5374f955e1eb4fefe1c
f6314ae77313572ccda10e3dc40de96f527e1cc336c3097aca756ca25817
447665b0d0dbe41c2df3b6851cadc5a9c51ff176ef38b24e52c372623b12
ef5bfc863f1aed0bfb9a039137e7ca5dc909e4087e91fabe3afcc4a10190
6800450880649f6e31ea2fd2464e6132e53a0cba8b27e6509d049da95657
2cffdebbc9b645d6233fbc7d46960fcce16c49d5b5ae4b54cd66677f90bb
4d3d679a5973cc62bb9264d3c2d4cd9792cb5113b6b14a9d9321875d897d
fb6175e02d2ef5cdf2cfeb5a9627715291662749fdff8acc0393d191b28c
72fde86cf17bc2a2e82c2c6c81f3e65c9f6bc48a4a4b61138d22121b8329
e7300ff26ec5cbbda242490e994a64b19a8241eec77f788b5b8524a38a27
e21ed98a0ab7b6960bad1754623cf1d04e25e1edb89f6a377b0033e012a0
0e9b1324cfe6f8ea70c72b18163132cb2b0ac4bc554e33b0d3d031f070b4
b72c3d8abb882c5fb702d62872f146155e344d5853fd58aeb1aae502dbd5
309cacf24c55d6eee91373aa89ee74ac4adb46fb3f3a6c06fcea6ddef93a
a71a782a82ebfcdf05bdca973658dbb31832ade5140fe6bf3189135d89c1
7c259c061e3a71a9eb6ef9852b64943dccf8a8e351f0ce3fab02a674fafc
aced3fb23860d75ce0efe26d582505ccccff086148a455b15718fdbe91b7
ce8e3a28ebab2534467b9e63eccbf5c71ba64197cc5b5e7187e279f6fc8e
5e30710c2cfec5965e5b56b38091713334ffb05c0f8a11becaf600189222
a40dc449bb207bda2337bd1ba12405b751bf1a5280785b222e5de753d17a
f25ff336224100d0f5b34cf3e861c70618a29e709de6f296a7aa54abc7f4
f16e786ef2f47b1d412958720d82e5f21b7901dd50579475b8864eb31198
ff2a3836391a1b90d61dd54fdc16f7689f8b1c50a1af7d8e2fa207d1cff5
27ab370e9bef894412835ae88fefa1c661f025d8f5096ac8cba8cdc068c0
ac0494a34308919794681a4d40c367cc27a6a8e0d7d1dc7d4121e174b64c
8d18c22ff8c1b620a24c9ac9e1af74e32804cbaa13758bfe03cdec84766f
d88dce857eb8ef6dec3944b0fabdba14202d54b2932be6ae44e02e5abd45
d1bbc9a9cef359d3e21fcce6ddea5df0aa35d6e4697e42fa195c9999840d
456ed2e04549a8e6a825de320058f57947c13f982e5b9c4e7663fe487710
f4fedc4a5aaf83448b03981354ba4c60a1db92f09a63c681536affb211d6
64731504af2cd26f5219246fa65404905611732eff56b8b2f0994158b0c9
4f1960a34028e7e246fdb292b9b4576a5fce93df122136f1976b96a63677
9a834f6c3c7f26940c617f525874193bd188e292abe5c58549de60f56dea
7252bb0518390379e49a826c8bd35738c5afc7c22e060c38a2a617a4b9c9
b96dd0303e846f49f2f83f38860f06833394c0c2bb5ec36290092d5e14ed
351e5d116a396da6db79e1c40463615b9983e2b3c570342bbdb3503cb6f0
ce94956873d251760fde4e6b135b1e4dc591cc5b80af81815c59404b8bfa
06359ba70479809c1000adc4a8a6c7be3eb502a3663dc29046c06c8802e5
8da3528d8ab586a8a6b9f49101509f8391444f719f6c1a8a0534193a4614
64846d3c2e6542fae20c8bc469c1cf8aae46d5dd4d5ea979a03469ec5db4
00928a2388232147c4fb0733b6152de5f5b4838e0b457c234970bb3de562
bbbf0d88dadf00dad22eedcfb12b2c7bd6e5eb93926a9d1294288575c7aa
a1c38a7fae5fc1680f658f5c62e7af682baa5101d704686c85c8ea06a6d8
7e12e9a057347ac9dd3e68d032d7148b9dbeac6af5e2e319c9d8566fab58
fb48976bfc7525a9da758c49c8b152610c55394feedfb5323392138fba79
5d0c2e0f9282e6bf9b7dd8e1987192d1ad937937b0e43c3e8eb98ae6d17a
4083425e0bc52928b05d123e2f77460f4af7cabc35833348905fcd6943e3
b276e97dc787f73c7f94971cd8c244b9a75976a27b7c2fe9db78cde40030
816785a366478031dfd304797e143465c907af3862367e4b80cb0b973870
3be4333bfbe1b3266db661fc18011ea6df76b6ab4bd05cfc0d49249036f6
383015ceace6fe7b48d0c1c75183193ddca689f6b1d162693f6ebbe20fda
c9cc3c1091d0910387d0e9f5acff08b48d5320ddbaa872e03ca171468b46
5d5c2e1ee19c44bd133e4be2c20a7be30b7bdfe38f7262f90cfe76cb1ee5
a0a6d90284fabc3a5f0c4c70a67099b5bc1642487b79ab412e0e00fcc6d7
9775a045248b93b5b53bce2d5fbbbd4eab4fc8b2aa96ab72c2188df7fa4f
7e38038b3d466466df8837a1c0d5d2ad942048c4d3a0e315b5b351107860
0457821ff8b9797090aa0a84e17e763edc29bb129515a314180bf8e83f1e
3b23bfe9b1d3103d8ab8902eb4c2985f509fff558796b0d73ed15fb91cc7
0c4e6c6664a86bac3af1299bc11f070fd1be0f563811d92e783aec461bbe
4b11ec87bea3e9f50d35ec6ec0b004a967c3509b359b06f4385e721011ad
756ee1260489bdf604be1469166bde7ed6af32e3bcb93e7879506b662a75
cd6c174532c1505058a36365a4b672e858f1034358b96ae89b27bf42c099
1bd8d3dc0aee5ab586ac9a34bdb34b8227e5f350da34b67ddeb402b77841
35599274582d2274b4cc63e6354aba8647ad538050b6661668e536487f6a
4b6fd1d1d01320312c06c5c2ce7d25e18789905b39bce78f8de274c6584c
1fbadecf7ff8966875a9c6f2bef863c846d2004760cb59019390ee6a093a
30c2b103392efd9618e4dcf7c0f1141ddbbc23817b4e6cff5d0d10ed3a21
a6b5ab587823157b62d635605791980dc153449e59a7b19dc09bcd77ffdd
deb18dec5eb2033cd23b52d3a15d6aaf7e32929bd87d744bb3240677f648
89d4f00934e8b93468b772262fe18e5bb88c9825ea75490fa02976b9e5be
242385173aa637334f9bb1150ecbed37434534e8c65bcded3df1760578d1
85831d40aeaae7877d91f5c94f25d16f48f387e34932fb86da928eb1f708
ca30640367577ded2080532d4ec67a5759b7a838ed4ec9ce9582dffe138b
7078cb078c9c9e88df9621e42ad70ac7d85a83237488a06660c9c6dac21a
316b43ae5e7bc190b903958c6256e7801bddf3d5e03351bf550b99c1204a
128492d421469696600e4643695b32e94e2e781e12c156a0c13ef8241031
baa317cfbea508ed5b428cacd1abc5920a668fabfe5d28d07123d48c64b7
fc23eb8ccd3d9222291620b278fa6c2cc8ef3d831dccb3ca076bf1dd4e69
ab89b06338e7f13b2c50b5363b0eb150b4135a6e6a2c4bb31e26bd325fd4
8cd9df2c6a99a1475d432ff3a98f57c75b7c47bdefc64160d9371d9b3045
2e0bd051aab2e98fcc0265b1a93d80f5b89439027ba846638ad3177ca690
4b25e848799c9216c5a5b6f7a86841c568ad19bece42dc1b137051a97b82
690aa086bb93a3ceb0fa7f156db026abdaf671e589f5e4c78ef609fa4b4d
a247d3cb77452783d7be6d5049d30b568fb47a95080e0251988c9e272728
7a29932d9fee80e797c0f80f8de7560a858659eec64cd05ecc36461d05ad
b753b11aab8a19c1c03f5ce7629e500a12c3283729df7b9c90a401a093a5
5055cb2f859332fcb11737c47ba02decf6fc60083276d042993bbf3fd342
4fe808e37d1bfd7243807f1ced417c64908c32c3b90f0dae4eac9fd7493f
47415b0003667fcb3506ac086f99dc836992a7f58de53fd70ba357b6ef75
34f272298f308dc72d6f5c6066afaafff8a682750faeced19f8e918e13fa
3cf392fdf57a2c11535aea041879dd7fe11363e8fc87318ef080b6ec8870
590cc22f76c4dc669cc880f62f1a249482e116ffe1f8a09e9fcddbf24cc8
816a4e294edb412d9877a83b1cd6bafb8f426c6f19c3672d903c1c51e7f7
6fb7c6559223695a85d126eed1d81a37cd7abea4e4c85f67fa5dd61f74ad
cb5daa8482b0945241080cbb3a09c4fd6567a1c718edfe3a70732de7e09e
bf200dcacbbbdfd9bc07972df268fbf1bbc2b8dc2777a9daa1a0bfccf3db
7b2877aeef39c46249e9c03d37f0ef3ecfecaf0e26bbd9d304f1e943173a
37466343bbe9c9cc2fbbffe5f5406f461d5dfce396c397d66fd8117f2fc3
01bb2aef8824aff96c84071892eba483a6fb9d4f1e8c0c3cdef99b19f975
df97b1e09d1dcb70caea1c3f5befcf8c7e37f9117e9f0da51ab025af535e
b2cbb40cd0d3d507c7c17657656e5a4b0a237bcf9c02c92125075eb7590a
c08db4d0320d0b61c23f6b1402e60cb59d8ad75c509e55712de055206c18
2f35ecb41bcfc0ad763b0b57c6f710db304dfb709a11d701af04c65ea03a
8231c21300f18059c065015aecac6c08c5aace685f97294b5d6ab09dcf30
32910ddc83196d3a0c7977980992d25be08167d4fa7b1a3067ddefcd598d
b4b79c1b7ac914b313ce4bf6cd2f0cc67d6f2ecdc50c909f61b8c0b6449f
a98a525e5ff4b2c6a6226a39db04a6e8f020836c12a1ba04631c9402fcf9
22cf65141b1f8d4bedde09ddc1bcf2e83b3886cf68e8b8720a9c5be753ec
c44e60f13e5240882f9028079e7198ec509510b67413793e66524951a5da
3f99a8d3242b4ce3d59328dcdc4fa074b44b977c28313ef2cd15508ae4ae
b3fe8a5554e1ba620b6438075c92ce6dac0f1c36194d5c712abae4cd9923
9c188181a5b6e1e475a56b899add8001de3d171bd8df5bc57e563c368862
6ad69fe376d33d65c171ce918d17e93e49fc079fd7396199f184579b57ef
ba122423a77789ff31f30a9aebf3ce0ea2abad8a93b4a36cac8e36512d57
9ea6dd504a9b6b806efafa8f314d8750d6c67da16c3dc4e769e67f1f749f
409205885d0216440c6e9a4ea2030ad710c02ffc88b855453c667dc85471
5fd84f59969d9324c94f417ca5131d64839ebbf8868eaf7aa6b8d93a488b
a7015466a2d88dfc00e1e54b3fa5db4b2b5f712c490c90a9d94189bcaf92
5bca889d37b4961e5cd0f04ba96d4e5f2d535767c3a12b5bdef2d24770b9
ccc04203818e3ffae9e39939d501403d7cf0299c93c172ab371df82c6328
8f4c80e5c286d9509763b810f754781e68bf56667de2d95b4e6678166f76
597108f245273097b68594c4a4c0863f9e30a6cd84301cda07e7bf90c6bb
9610d8969c4ef04e4f08bacbee46f0f1890e724c9907545069cd37b94171
a3536da4d89e1ac7dc34b3be42ae74d07ee6f78a41ea02296eba95e5235b
7b0a49d298a48409594ad545814ad30d5a7e42662ed3843b9f95b71e65b2
3302fe808ed306b7117fca9470bb43de8dd9b5cae8e427b93f71564e409b
560802e27cb980e00258ac4cef3b25acc7d560e0f74f55e0366cd94d7edb
931969d35fbb71850923304875b7b733d5da21e554773206604c38145314
cb469ebf846bd324c3b56dd2227f93f279ea288389abd78c6184d69a8ead
cafa8905c013f1963ec49f7306036afeda3d0836bcfed2154c0bee008186
f8f7da96eac7eeae7244a6c3ef2fabe1880c55676acbdcaa6e489af26e6c
1f09a53285063dea9dcca1728d8a6cf5178bf1b7ee895b508bd8594369e0
9117484bb1f0f990094106866b128b7ee9b3e22337f6e2fe44623e926fc7
4253463fd960650741829140c13f79c0e215adbc3ca59f282c0403fa6a57
7d0e510d0d38bbed1b428e880bfd205a45a1ff61e2acea040586f49fd91a
acb2bfaeeb4fc86d06e379de2e6983f9a10c9bc8efa4a831384fb4bf5794
a646f8864851edaee6cc6e21d699bcc99b9ab1f624f3b6b103028a84298b
63bd71748111c4ada0384ab32932046176ac0ea6f009bbb1d9257f7afa57
bbba0e10bb488b7ad398c98594e66e7a3a87c46d1a8f862219f5b368f93d
508c8bcc627de1f148052b47240973ad0e775415a63f302b2ba5c9c4ab28
2e4d0a0effcd70b6812e882ddd714f5a6c5491bedb8281572306f9adbb6d
d8260b08e08e3030c575b396b35e3be39167f89ffb415efe601ed240e9cc
2b5734381c878b14833398b7a618651412307af69d6a1d78ceb5a9638275
f6fd743da70d215251e1e2e0e257baaaf94e759a6a3c1c547cea33999ba0
8c604c30583df965483d80718f0850863216e5771126759d2648be3ba4f7
1c698b1dbf6f1761b48b5c224f5db7cc0fe37ecf69ffbd907d40102ca523
9379b8bd792ab405d4aab067d04f7971e1b7a3b8dc24bf5c3a0df3cc3f09
a4277b408e55261d04d74fb3185af152e3daf60d96de9c82c956cc16a125
26a75a5dee49178f2e2bb2c9d1fc0d6696002a8c326b23819938e193922b
dcfd2820580378b6ec5fdc45a4592c3090255839707bda8c54fafdeabb8e
8fdd2468f00970934472d95a68e01710d8cb82e5a78f3faaed923d059ffa
a878e85561f27bc665fd988416197391af1d869a2ccc302c1845d8610029
f14a62c5d907b0c7b5f8923a14debf39f0f5b6f7af1ac14186c3f5c136b3
b189ce55cc599603fd4dcaea55f9fbdd09e960cbbb265e61666343d4153f
bfde5e61cbe2f070c4f1cac5edf1d60518ea6e0037a2c6a864cdd1bb50b2
1ec3c1e935772c903f58b75b2bc6d7510b9dcc2f2d71127ddc23dc5447ad
1ef5acbc4b85baa49db8c1ecfd58f4fcdffb8a211aaf54d88d27831269d6
9b9b3883edc6128a294755274835e3e10805f6bb9d39af47dfaf9dafa520
686427004383fea980831bc0b4426bf2374c516c71af39df40b336a7f15a
beb43ff88dbf407a738ad939d0ae0cbdd9c92ce8e7084ac661c386aa2c63
c9667e5705f875bc05f593922c376f01cbcff69636fb777ba44f32613e96
5fc0b2991c09e938354a0ecaebc4392a2bf219eca15443f4c2c2a7bab147
c27e3168f6f60693a69b334635c00b5b4d6df1b748fdfeaef28c4110761c
69cc6e60e24ab5b609d5494eb9163a1a2564b41730467ad9feb8b643a5a7
49c2dab0e7ddc032926faa0021141a3dc7fb2bd2ad1b0d48d5bf4ac14d74
a52d93df4d7bdec2ff5f93e3ad13bfe9597372f6244aa1c83ca6d2f3540d
6d4dc1e1eb07b19037d23ef6f4d289497dd4bbfb9c74c36ada948f4c547a
c0792a819fea691e2e6aab1ce3714614139a8be89b51a19bad9d132f60f0
3b8ee52b641d2701f44d04c8f05a2a1386cd52a85d720871b8d0ac8cf262
48b772a40010729566d398d627910443b0e39518bdc21e66014bccb61b44
a9737228ed5e434f65a26f0c41af11c492b82a2529e0941611dd87363263
ced9c7369dc01307fe22f724e3d7cccf223977e22d95acdaf5363b12ded6
26f2a57f34c995a3389f135446870ab2d62a12c6052334fdf457befac9d6
2d4cada17b89e00fde715a12bf075d15a849cec89629f8ac85cc1efe277f
bf9a89b942d33979a039e2c417ea2438e51fe64cb9b5c648dc8df589ef55
c0612df0354a9a78a216450267f59ce8fa877a8a828775f5b8a7e66ffb17
fffe8cadc35c6b5f8b7b5a2e5df5ee472902dd7660fccbdd3fdb9308091f
d6f1392c4674cb385d79cbad2675f4e5c96cde68ea217681a12d6b83ddb0
19073774c6415c9aca587312bf33267543f05d94b29b82faacb606b0c022
ce6204e443cae21e05f8152b22c907483a11aed4b1da18b96ca653c00912
5bf789673e04fc97c6a8e7ac3c0663a120e3c7480ecbd618f51bf1ae0de2
b3a5fb7d4bf74deec81833adc3fe3c3334a2f270de19d7d779240822df68
bff332a75531575db65fa2894cb4e96d5973471c82243b712379090c3937
4f572cd4cfb8478fcaa0d165392f02b51313dc4c91cf30a75b80dab1ab5a
6a3513c42d13c4fc94dd6e5b41f5d799e553640812caa6b9dc9feee1c790
7aee5f02224552a07d3f0d25217e8c59de86b48cea1358f78179655c328f
e5c529b41519aba889f574b881a56ad8166fcdc2aeee1911edf69b79af34
5733c96dd410df0f933e44a4eef0b117ce36a079b0e2bcc5609b71b5798c
2e260434dbe3d42c0cdf7cd7dbdcd08c4e676fee0fda76fed4967b78d6c0
e9456d4aa23e3b76b5c0ebbb3f94b921df8d97275a434d6815ff714c78d5
c32f7dbf533f4f66ee7aa57f10ef47e14fb875fec0ad462f7e4e03d1b7f2
49cadbe581c7239ff806e5a434974eafda5d0232f0753bdf9acf9b2d951a
e00d8fdd0011789dfa9bb6de72748bb9cd77d0ed797cc02792f4d21d710c
a61f7916e9d885b7eff6d6293769397c3e1ddd343ba4f2517eea9ed14bae
2ed75af89f949232fd4a45f3ab92cacf0fc1dab4d7d256432f24b5880c43
24a4568cd3aa3429ac1732479c495ef2a2f067e86e67de8fb21ea0a8d865
eb85b1297f1012e70c8b1fd63b002f2bff11c907923458a472914a6b6310
9c6da2c223f62df6449380a9f31acff6addb1079f4220866501e010d69c6
81fdf4185bbbfcd9bce8990c2ff4bbdb2f7c45f0c13b583bfb09682e36a4
4b99447171caec9425c3ad3a634061b2dfa5d14084b55be9533d40aa6b6d
eeb5a384058f4c768969fda74d38b0ae4c80e5607cefc3504da400217ebf
ce6e63c0881b49180b3fed651f055dd732b22507bc658e070cced8fdb4b1
a7215824146171e666eecc54a1175c16427ea2c68e50efca343182926be2
d19ec8a5ec3cad0b619e93c511e4a99517724069138a834d774ec99d2609
e1607c62a75d35b63e9a4a30ed124cebf91ca9e309d5b62b597ef2230a2a
3246205eba26cd8c03f9127c6e2b1844563e5ace15889721e706b3170592
5bdcb0505bd953284472a55004f11b8a1e9f9ea2ea4112b85c1fe5efa156
c6e885cff20664d49aec59be87ea781b719069f939b6d8f5b49b478483dc
e790c2ecab70ae3ab9ccfa9cd53202142efb87a36f914e98d7cca743c0d8
9a4f290a9b688e078f76f1f4f56f7c0c6e34de1abe542104f85ac22aad83
90e96f4c07dfe0b402aa01f5218484809d03bb8d5ce1cd63516d991d14c9
895464ac1ec5689bf52856ad4cf4d10e8b22db481d2dd4f897f1a5dcb38b
6808c3b6bf83b5497ff399729f37ac27f37733e8ffd9358b929fce768386
d1077c171959a8d515ec0d50b37200a208faff9b2c54e2b44008ca8d8843
24c7054a1ab06a04b309e8ee520c6d2823471bf672579d68786bc2f32ed4
ea6e875df0d5181f041aacb90944302ee58706de90c19d0d69e002e18e06
bfde6749bb6272f1fac3b4c221aadaff8315cffe2941f8b1193a6f6f6571
c628793b71d185ecbe2414669e32becbc0d43004b197865bcfd9c7d68f6e
940562ecf572e405f49b5a7b5377164e918ee6f7256ccda34f68eccf356a
11675eb2aae536e7702dee1eab12707ec7bdad635f466b7206ef6c9a97a1
384fd4edf905cf9662ee86c30d08facec4f66e14ffc2b4229f25dff26bde
63c5a3dffc3d6dc1057a72743e2d6549090f4652ab3beb7af9283f7ca5ce
d546fb219f47465231691c29ec5dcf5efde12394d0b24ceb12bd4b81d4e9
80b5193599349a912fa358178ac9ba4e3e80219f1ff2823acd1d369ca6b2
aaa692dd3f434232b4798a5b4e42423531827459e17f31d5869115d7eb8c
8695729b05b3cad1b9267a068a4b6ca447af416d37187498da82eb8801e2
2ef834f0e0103fd9e0e23447ebd31e60f69fd4dc96772178852d3160734f
017d453825991182658725cdeec6abdaf38cad4b84f19f3eb60243b3fced
0aa9d78d00c35291c721e3ca63bb6de61ba4d68f4c9abbbacfd7a4016917
78c339725851d76aeec25aff2605d77fc6387b0707d0df00a0ee725ff5fa
e264acd31ae6995cced5f0b3982c07f43caebf8d8deac40c556832ffabb0
c5cbcf69c1952d6530e4ecee11ccb074406118a26feebb92152ed882b634
7338d95f09308211e5d27909b65f2cce9df168f24836bb6907872fc400dc
da321cf48a17e703b5cab4acc52f14da0f66ccc7f084cf66acf7193d58c4
ab17977a1a7d47dae9782e4632a68693c5f70f0b3d36603f9bf754828703
75044da59750a14389fd75daf0a597e07f366bb99c376f406db50c15ae9e
6efaeb3c35aa88cf0d6c176cbc968560e25cea41e902d772001cb0237878
d58736fc21b0adaafd78db6e47e385ae678d388feb7c6287e83af6dc822d
f5ac0474efe788dd1f7980d19ea134359f41405689a616f9dbfb299a4275
138e16a8aefd1ce367d7b972b5afa16c3c57db5e4eae187f3a1d7d2b8c39
16d388c511f06aacb8b8fcc5407c72cca137ecc98c6cb93221b9f988d07e
5793f4b82e869820df6176f44e73b405ceb46be11cafb8ff3a66d09adde5
c10a4991d6a105022758987a34a3f32cee02a65894af65d9b4bb931b108f
622c2870bc8fb833a41fca23cba6c1499b2251a5546a2278b3372baaa474
25f8c3f81abbf62a516978583836894df65f2ff36556d5c61ab2569e4ff5
abe8b9659c6490479a9c043ec10bab2e5ea8412eb9fa1776f4f1243da02e
772ed4696f3891d6077c62ed73d173322a47d8f6788a8ad2b21c7cb49526
78e87c46949606ca9b59707d0f17fd586de0a79f5905fe4caa43ed448762
daf6f01a582a92283555911b48d587e12ed82154c4ae0cfa839044947c4e
6a4947d401e0348b1660e335f5f061f793c21f0b86cdf02e9782f80179cb
6860c0103da920d1a1f547ca0774dfcc3a724db4bf5c8a60f263262f9da3
95744862f0f72e73512f8443070889a1a71c3be1c2027fef8cb42bb7ddd6
2d8144a10794ffedaf9f477c3e175ed271e95d2099c88e4c4bc4a0a97d3a
4346bb4e24e5dc52c7c3b4e154c0a1b3c7d67e7bbc32c26cb2684758787e
bcca91e1faa6106abccad5470fd0216215e274e5314a2a04f309143a326b
62122f3646bca9e0ae0e6608879e8ba76fcb18b101b6b3d3279aa85466ca
1dcac795e7c5e31952d55b0d5467ffbed63105a4a174949c005e50eb4832
30d483512a1c71d413910ace10b99e1ea57a2ae503dbe6635c4c6b632241
6b6d3e2bd28b6a9a0901541c3b91e98e7635f141ab7338234c70ca05ba66
5cdea0485c66448b8b3fb121caa37ae78051c0ab0e6fd0f46e772f29faa8
27f20187b5374f2a0c163ce98736eab1cebe18c6a4eee99b4ea9641554dd
52645f46633f80c09cff1afc04d1e58b420a8258e1e39fd5fad68fa210ce
472db4d00514339393f0c6328d92a85c8a93ba623b59103bd3966728a15c
563167e44083b312e4af0d595d49b6cbe029ba157724d06df22cb9c91e4d
5159a40a456e19dacc83fada162939b3a41cb831ee39ce856f9efb58ce30
516a9b8f6c165f6278dde844a551fb8fd934ebb702b2c18d503c34b78e4b
07bf49d28acdab12c6ed5e4ccd1fcf098253fc8e975609ca4ee8f678dccc
0813199410fe2acfda95d29fbb2d998c152e80f105d654162605f0479e2a
5446f76534436b4cf4a224bf301d1f29f86c927217a7c87166abecdf8f65
3dba3ba2dac2d9a55c51b04f26146457a6469f7a29443e43845129ff3ea0
0f107e3b1016a08635cb5f10dc5fc55df77f0687869b0bfa7bd8d53ada9d
c7fa6043aaf950dbfffb9bca58dbddfa806cccda3e36d7cca3348d14ab35
e5d28b50733671527462f495a7e3e547a418f6f44d3b4a4c4f62bd5b7031
baac3fd975d25d8fa41a5cef810a613dda0c472b68a5dabec307f37c3593
90602350564d41163ad98621070ac739d0c72e89b55afa77da573bb09235
7dfa5ddcf30b2286cb267b6a75b2e0a72055783ee06cca396669d02cf1d6
b7e2961a8a5e6220604751229f903c60869ab18a16855c8b0f5ed9d0cf54
90f560be32cb0304fbeafd677082c7cebca17b281aa6e2e3b051608c8356
f0703977c98365aca67b47558e1dc6141e95a8126a8301aefe774565ed55
71f1d312355c912ada35cddee4dc00372535ca80d197a47420264fdf5af7
8d66cd154bc1d1fece321e761f1b7e45a6584fa07e6722dbb25c6ca4081c
ede9fc8f7f0a73e3e7e8097a953511edd162ce358a1583301d1d63bc9b0f
cf429a52a1d39ecfe40419e144c77720f0ab48f9c5beb65127cc7fb2b01a
f2d376c42c75cddbdf529ac3c6b0234f238cf75e7b7f5fad164918688a7f
952f625f55363c7d9442f94c0375fd038548a429d2d073e53f6a0e16a180
036712856eecf80c851e4d571821cae75f0fd68e1a58194ac2a44ab71b61
b579c213773828cd00f3c2d15590fd0025f3b42d9d08c6614927426c458d
936962ddd48eba93d032b4e3850ec579edab683455fe776cd8457d9ca68c
7121198b794c2ee6109ed38a094027b58634dd72ba4fe4ffc9273625c6aa
36ea1ab1e2d87635d3816c9c0f492bd390f3ab2cedfb014af5ce4e5df157
8f7b78f18604af418bb682628cdb014a3d0015c676b9bff9bb49e80d6ea0
3edd7a5cc059c3e8eb0e88e7a7dcc3cccdbc4821359602944f6496a49a3b
a099430feae77eaa023a0dbaecbf2840ec66a80ab8f92b010bc98e54e222
121d78aea1f10e0d463f5a3cbae84dffe465d094b64e7769b51f8c697700
ac49255155b3207f7b0fd047ee0d631775c50e158090999f5d72be9c271a
0299984d5f19d77af446b386a9e62f3d45b74eea18ca0e8b334d576b727f
27637ff113eb1e99d768a04733f8bf291e800717831e71cf79f9e0bcb1e5
faf730e1fbaec50f70cdadd35fd1f3e38c633aa4fe0b26872348f78df057
37c6b5d49edd6be80e979e1da691f3f51341308ed6d2c46acdf4c5745298
3df408fc79a4774b2bbc768267311bc9900c1e92a4cff4e0089f6731324f
da332658334f5e9a820dc117d6011ca99e3f90caf68e24ec24e75a574419
531485f8475c1f03ef8c01e3ebefcb13fe82081dbe18700fe110ebbc11c1
329a3b4eca5fdee40a3555f57e7cd5937daa95ff557872c39b50d37c3979
a8f69fd538e378b3b8b2566b3995eec029da3af909974c33dd2e89a5b0f5
76b02409302c29cc0e7e219cd75a4977c36b41d81e92c18c36a336c1560c
fc26bb11b3c7b6f32267460b54015115c31637030d1e45f24450bf143869
8174570536192fb1050e4ad8e8b164e60d8fb0a58053fa85ae1820bbde26
8b6ea46bc318ecba37fc847e09b2ebcd00c4fe758f5d1233aa431fb0ac83
0051e6b3d6882e51cea4279a555bca53f78eebe7e6bf68684351114d72e9
6a071cee28d1550555bff21aee7045b73de92d4b9628ba6afc7bec4a1434
bae602124f90cfb4200f3279c869663cf87f4ee1a9f8e52e958b523b88ad
4a1ca9cef3ace3e5d96ca57f59d273c5d030c05cfeb40413078053ce2457
ae5c2e8948090b05ef3301da8000cd20bb1f8d1b9c5231ebe9b914d1e368
09562b3036b909f2a62b97802997fdf83d1f0bca1b295fcd339e17fb2aee
07f6a7f01ef8dbacacce6e5b6c9f95ff65227c94ad70f8ad75696a8b8e48
fef3f60bed908ff249301bde110cd393ee634dd3d987dbd7a0be2e26091f
cd4d7c7098456e6b4edd1b2415e5b0cf5076aab1f34eba6ae9d0f0658aa6
c2c3bef0603d12a67942fa7d54e022a4ff7f6eba0561b7f8c66a73ed5ae4
c6faf98d64c750329a89e2e47a18c7f4b65e6667b83f42192cd5fcb83443
d368952028275649861a9836f53d541829b13e789bfc50a24089d135d1c4
473da548e9a35d8bc4d4b6862144a5490b4f49d9fd04cfeee5c728aedd5e
2df792026555144644464860beac560c99bc3ae06fba43fd3e40db2280ce
6e75fcbf13fd7bd818aa7c8c55a5101ae3c380adfa8545fc9b7d5de1b080
3a2a99cbda050a314692b29060951f6a7d8804e73f05415f1640ac8ba7c6
7755625700a10f5430f1f70303917c7e7df023ab239e1e9647f29629a56f
b182e36b2f071fb37739f025770465c40d0d622099eee42dce10e56509da
210e991bdbb581c29aab5b57a8ab8285ec676a8b843d010ddceff3246c74
fa2b374cb74ecce6832c070c99a9a63d03c7f1ade2967b787bf0c0d6b7c0
4b630ea2b900af94743d016f490fefee9ee5304412cac681f8bf2678b0c1
0859945134b853697643b26c99e75b214cc34ee0ca1643cf5a8d0cde29c0
55a45d5260eaeb6fb133e74df6d429cfae9a4f295b5088dcf463dc5ebfbd
5efcf4bfbe3a8abc1c0cedb822ed644e6901c35253916cd8a3a9fe170b12
1fa55bc92235a0f2b0c35794c39f21e8901a7c30f07633bac77f5da06dd7
56fb06866e3b0e9ce03dde3a9b8124b46ae0f8f07f4f62479a7e2464f380
5ac8021052df65f033935bb3ba7748bac604f11245437a4a331b23253247
56e13c40b9683357c833810ba074db29b4c7eee0ace93cfc7f4930cef851
68bb4c10c93d2ddf04d67c4aa5bcaee58631a09e8d468c9348e0c34499c4
a9a664ccf0a200cd186824b594ae39e9d8edc74923f6203d3306f58d3add
df76b646e5d98ce38793fb8e2c0f57f6e51c6ce3fe02b99e3c2cc7fe45d6
cb582d4950606309992360ca7c2d5853696fdd6c680afe47d9a4e8741279
da3ef9a3da4ab469df5de007419546f8c9f3732e715fe057d489151666bb
537c12ddd60a24b186773b664550881d4f8c5815748ce83ad15d4245cd42
7f74e151c88319ddb0fa4e0034fadcedabbbeb2cffbb0960c7831df003a9
869e39b81b511cfbda019faa5bd1663bf69fe95b59cea1a508690ca22bad
957e6c70cf48c131f8490b719d3d8ffa2f70a2ce269f62afc9857b2ab63c
c47fec7baf39b71347ace88f36d30221d80d19722cca19b5bb1c47bff1c3
3904a9fd509ccab0ee47a48d6eebdaac2e59569f7d1631defe6fdafd1c03
7bbbbddeef8f81dc5b2bd0af0dd0437a6c3ffe0b2b479fa1ed8c257a1935
d00369e03a281190473a13ee8ab543176e70217c3cf796e2135576a1884b
576e19121f313b904714fcf61cf686eb8a9ce6d41024ace030ef58bd3a17
b8f37ecbc03e8480d6f608404d9e51edfd80fbd3b593a70aa2c028c880e6
d7754c2d99697375970bdc336d0354e11cca9afb185a186ca750aab5937c
da7d3088edd7c34fb16c77a7b632e64e21799ed7fa14e3b826ed611b2012
ac9152e5359fa04bc19d6361441f56c3a77fb3dff86aa4a1c07072f5c350
45ecfc6d132f713ad25da9b396885210a2a3d85ea5a8055485dd2de2b467
cdf5f8d0cc5175f117670683ea7b9ac2ea3ef509f72968de8dcb8accacf9
df94b10985b70f4e576fc286d7d37d60d95046febbff1bbe98c2e771f559
1a35a53380705a1414bf05d3abcc317c9ec298833cf224acb874bc83c340
590efbc1e4521860503edac93ccbacfcefbdb5351c57ef51fd051405cd4c
8abe1a914a85b425c630017bafcd3b18bcf349f1c8b432e1f3a1228602ea
29136cfcf8d95a9c08ca7ce55063118b2585f179e69a1add9705f22109e2
f2390dfb5f0a17e6bcbdd36de5d4ae4c63360f6dfca877f65d560a8788e6
6161883faef19aae5148b48b95862b9189c21b6edd71fd91b6ddae2ddf18
675cb6f9f1382b01238a96d1f18957d4fb6a435fe8a178f099f02b3949e2
ee72fcf8b51f56bac082d3cace9052f3d221e8e944d6759256c77f587a8a
a8027052c0976a0c5fa361e81a5bbe95fae6b4a65dfc4a026053766c5ba2
d5ff51f2b602444df93b8d610a19d290c7f030e89082d4be468fab6af7ad
6cf9a51105743033433ea19a3407a9a73f88efd7e135b3126bdaa3b91dfd
294775003aeaa6a05339bbf186f6b46bccb306f558001ceb6bac0ff901ad
1585c20f827fd62690c4b35c081a511b2ee3a14521765e680d235c05d236
ae3ce871632d7c3da767f51963bac64abdc7a499d0a9c208d36e94ff7bfb
4ed9f2ef6b5f818bc3ea927efb0ef1c3a794b44048caf71d41f8bf18894c
13d22903fd4d7f6c280225463d6ffdaf2ae1a0d48ac479a1a0cfee75ad15
ebcd03a54052f4c100d65d872d6d5ea003e44d32c07d9d06266fb94317dc
c1a8072632eb67dae57efeec8472c6b1fdb7ef5d69f961bf4f95c49bada1
fb875cdc851d059dea75cde5d63d9abf9da6aa81096a26f5b4b3a784f2c3
c78e30e795337c365abf26220c5f5f44377cfc92b3c96285d4a5c3f94e6f
848fd191e672c55bb30437e3026addfad150511390ea31eb94cca974aa10
ecb6d90f28a46150509eac4d49477028ecdf84f1ec551810611ec2f33493
c97b757b82d154436d28155625cc8266f04308bb324a16c9b038e5be0765
bec5ef0628d229a11119423acc50f83c73c6ce35ad94695d7cab5ef257f8
13e72ef2345e96e68411054049ae9067f00a115698b3d1ec23f9ba5dbe21
ecbef4d95e8f7deaaece862ee54956897c035cd3916af7dc8189f19aa348
88d7fe689a5e7fbe399be48c83b8a01dfd1bf2e9e6083f3a193b64451893
986bfacc808e99296afbbbfc9fbb4b22b230d98532426eaab62886ddbbab
ee20f9e5e438b314d039aa4c002de263fc7d701673dff833a40265a57800
e43e7d03351dff21352cf7e4705fb73850f622f4eb1ca4c6f2d753771368
238fbf42d2b5354590ddbe103e48ae2b67efa86fdc19636d1e26419a98be
b2511efbea6ecb0ea4b6dc460f06678a0ee57259c19a455703dfa91e24f0
3228853db3984e334527c35829f3563046523889a81dd51c6f4249807329
bb4d349f5e946583a804a35be162d422070feb9e1137131964ccdab880ea
88895ae79f4fd7053dd2328e778fb5219b3e563186c03b0eb82b0054c211
c255cb87d5b2979ba7148bc52096d04473c131b0e6baea610a11033d6c3b
63e220080720f1ef51e96237247e68fcbe50ccb39c7975e6e5a036e678d7
ac86448692983755d53eee1214e70bff6d8d83603d77b7e6ae1b11492e8e
7d37af2e64bdacae040dd6c214db001dc688e346e02ffbfc561cd5114578
4f503ebe632580fe3e85cf1a9037c96f77f9e3d0c7d1cc260ab4a7155bad
62a3f10a0b430863a25ba220021f7d2704ecad509bfa14f309f98f710778
5be0b1cb40ef7ce9b20ac18cee42afd340f426a986c1594ff86f49420c85
3500a7184e8c76824ee0a31c19c0dfb6456ce3c6a9aeb1ce1861308095ba
b45dfd077c023755db9bbaa78c5989e3a93b89c0fdfdd71a2133738313e1
371e6259db9486dd709838b4fe6d1ed688b23db95c7bc4d9bd13558e8a5c
3bb5e5e14259a9aaf8af8ae74b632c927ac251cd144365223178f8d44ec4
aba035d408a1a752bd4919ef778a3a57ed944a6073306622967c09dba1b7
c9db279164fe82fd348119957abcfa93cf0ab98b13372b3367624b8b0ec7
0b1400b373c2b5944338274d8d8ff3c1827564bff18790f55bd3d0175558
447b3bce9176e2fc1e8bfca27839abf2493a456e3d0831420a35e770694e
cfdca5619a8567e04b9db128d1bc5012a9c26c55e0dc8a0f90850b8bf194
4366f8a72f419921dce28fa1ef53f15cf50743d7c8657dab78ff9f1ddade
cb9082ab516879a2ae60de279a071ece68acd95c920aa15c44b825b677b3
604abe0af8a470aa3387a623562a13ec88526459ff9902ce8610f2d163a6
c69b50336f70305047a54d69c27f141c7acd07b9bd7e00b5cb2dc10b8333
9183526659feddbe1189aedd16b639eb5d50c939a649771610f6bf852088
b8413ba9bcceb10539d54bbc63cf02cc85b201307a4a0252feec424c7aa4
80cdab2b3392702ded2d70e68d9125d5d9b4c2422a995b26a6b007d37744
935e77497e80608a198f3a2bed674781dbb60adb1f9357d5e533c49ff5c9
cc923cdb42226fc9b524218119b3d80d2f2bd39f8f07db2d996fc2ed50ac
356d692ae8febf134cff8e888ce0976ab39f4b6de3dabf3ced6ff9e6e308
1f0fd2180bdc9a6ca98908b81b51761c185723f5a08993d3e1ad7bbed87b
f3bf1b8be4c8b3400ecfa3cc00b58c0e7a0f6f346f8c5584f3a62a5b2b07
86051dfc5e8b4b068cd29bb82d77a6f23e95312d175c1bf043eb205bc7fe
0fc66ee83421e7b101c5749b2063c72064c3a8355c6001d568b9ee5b21fc
986425a6f2484f6cf89adf6121bf304e1707f8a69838e444b9bff80d9854
a3b13faab00c4f2b55c3b7b7db3d49f9a62c89bf8d6dcea997edd78d22c6
a979262ea4e83e05885f100edda06c86da4f8fe036fc0b78dbff6db43ac7
4f36a25f32b66bf0d3c726bfe5e7ffd6b8d257379343e0114683164f0adb
df0a52a2310d59c53d5a9636f08aa456e5195619c2d583accac55761148c
490b102306fb7878b360387a13f67f1366abaf8d82ec271f4a2de1f785e1
ebc789ccfb707533f61d7c0f8b6655aa45a407063758f95189a13778d013
a279739286b4b3d2c1e2942a92de297c26fd6d0dfb08805f4ce20e1f71c9
90917fde1bc34c78996d3dd12728466a9f757df8f74429a8f1ed15fbaacf
757858d6b0b231c2b7e996cadaa4db4c147ac72d526036be6ef506ea6a36
9b783858348ccd909af55bca65050b1874fd818347758b396b2376e5ef4c
50bfba4621eccbe391023aec91e44e408029ad29e25391800ca7e0eb9178
a340e465db1e7dce9a7e0654c0266a0ee0f04ba976c880ce64af71719882
a303ef087e464fa745a9ceead6b7ad0bd5b61f002a8909bf4aec62bf36d7
dd0ed489db912c168c8fc827551217d17d957d2ab2fbc7a1b1194d564412
349f826a95132796ac4af82d17696f020c2494662b8f7a2f98c7e8eec6ff
b59abfbacfcbaa3dee5d22201ee201a82a29fe595ce5bfd03b0049679b53
42e2cd693ff4e81a9e8390253afeac7f4b73914223b9bd415621e82f42f2
708523c7f1b56b73453f97aeae7f634e01db8d42274b1c0f79a67b9abdea
22f99cfa6b32c506af7f31cacde4dc9daabc6d69471a6e27379fb6612f28
d6d98c0467842cf7fe8534599c18b7d78cc3a8e8f091298d016b697c3a3a
9dae2f3770b415cfc52cc1d75b795d9908babfb82521869e318327e32dda
abf3b00c47b4dfd828842b6466ca9977949b99c60de25c593d8f1ce8bcec
0142f64dcfb59d7c516821d28e5993a0c11e39d55fe22fe769f3afc7dcdb
838e4e58ded8965a84d4cd02f10eb50187e08c5dfe7d5104335a2ba9c628
148f5a0615c518ff0d79ebd3a7f59a5692a305a0767b6ca3701378723982
952f3d5ace17b979ba69b076055f58b2155b9dbfac7cb518e8f9ffea2af2
ff1570e6d4230a62ba147d60ec09d168fc53165abf8888e5bb58eda61c33
88186b776c4c1f20c89ecd5ac5dd12c6617985ce94607de10ba33f317354
8b2ac518267fddd29c30c1d3389b486d98b786a037324436843f90e778f3
1b0f99b3d98a2d1409fe2b54413a5dfcfd7a407fce436ad400a5aac38d29
a6b631bf10008d5db7bf2df482e3abb0296a3bfac73a4a1ae07ca17de3e0
e1d0c80fbf5f35e4d75116869b6d720cc6b4d23a81dc51161cd27e3d2146
649b8dda51fe9b7f333d09579e3dbc4166acd6b6b723d235cda85852770b
699f090ce39f98137531390585c01420763baeb7c02d89f40f563d2797cb
9362599458d5078b54c2b34128d8771017a6078f22e98f2faceef46ac5f3
faa29b7435cdfc6dd67bf518ec480b08c0cc00f2854fbbe232232010623e
59685f1c36e1342b11b1217bb8c85ad7fac216fda20508a789100800a846
c9301d95e2d79ff3921ad5dcbfea93924a5c287352f9c401a0bf56a81476
e50135d36037f88377a3931c4d22aeeca36877fd91a49bc47c6bf77dc6da
dda133c60d588d17133d8fe42049f8e45c794a5ce2d9be87f711753b704b
cf1875271919b1cec83d9612c991c6b07123ac78c6aa9c63fa815453a464
a07772f5189872553786afb1836928d4625b7e1a24049e677d156bb99931
9d158c1f1bddad8c47c4bd9b55a8f1dbda2efa78ca841d8bee8968d29faf
1250f6d450c6e76590156bcdc0b45a438357c6bd471d216f0bb093d05ff8
c81768a2cd0222ec2bcedf0ee12fa957af7969ffadd5aec2956127c664ed
4927206a5e5b42de26434fbeebe5d95cc9a00d76201ae25d7e90b346d19b
ba55a44ce53266047b13c1913e79f90ad3d44b2cc399fc07e50d7fd2159b
b2cf0acb03ccc0aad200bc3c121433948d48fb90db5f05cca4c693ec9720
07a12e21e89d96854e539a458dba6e3fa81dd54b9babf180dc51a4063d91
37d26e1524004431fc344c7225a511e7c69a16fa8fdc993437cfa1b84956
f25a42b75d72d27ce6a62e73d77e15ef3ce971009d3d9294cf2b06f3c3b4
d6a8765fb5972c0cc71b2b35f26e976963a974ca9d627afc48fc68215efd
3cfca5132c064e10d4effede4277a825d0d56217559c54ab0bbc1078639b
c9649db904b0df2544fdeba2313e99d7e4fca701c4e091e338cf60fb506e
4f882724ecadc917d3c7f53ae46bd6d13a23a2500233b8a3d091f6782b60
13c23d72e059f7403c962ea93d083ebf9969014e0645007427669a131b50
0a81590c7ef544a3a6c57aaf22783f9c1a2b7da179d3e06ee1815ee0b714
9265630c158ba264258e2eee62d1b29694b888a3c88ffdcf36d0986d59f1
5246a1ccacce8f1c0fc64dba6a4bc3a5889eefa8f8fa6824a69c2e97df0c
aec0b0549841dc9504500caa32ee4b9bea20a7b9c0360e2665471114ddf7
6ac3ddec435b16c3dac254f6aef8fafdadfb5b0bbbab7639b349ecc1346f
9019365e9e97996c8b007ce498f0067148b1ffa58f26efdb3c19dd321454
50a0b1210803ebcda6ae4dd2be9e23c10ee4d9622c7052db2a33c3d3508c
fe3be13385b32d7945abeeac9c49d05eff91e9a506f3f6866b2823080a31
4cd710f5df49c402dadf16ef9861b4cc8f9dc86bf7eccaa7054321be3f02
460a9305ed33af09675fc4140a69ae25574be21236563f30921d32451202
11bf01192b357f256bed9a203b76a366427a26d1b78e47da2c83b8b250c4
9f058574207146c44c4b6f2b52586e03e81b6a5a1d49b1d94252470dda97
806e63959ab45b38b9d80ad0f22ef92dd983bdedcb5490782d35680f276b
65b29e9d332479cf8dc6cdd96c76fded7694a7633f6d50ecf196984abbad
869d91cc82b4bc48785a9d966ad94b4f6464cd8e7f161f91ae8abfe0a1a9
4015bd0b451586f42ed1332034513c3fd37807cafe6e8ba14882b434b548
389ace5a8d9d88677c6b1e79055c007617427b954282cbb8dd3653da9c34
66bae0691ea658437706bb508c056d8e2be064bb622f73b26577ea8952f9
9c64ac68d460a7a4609838b8a8dc71c10b2bba851fa75a50718a934e0e82
895ead35d42152aa958b3de8447519a9fbca1c29ef164626fb3dd3c73529
990aa4c3fb4643bb0be930b242153e0d421bf8ea5a78e500f10f5bfe37a3
33e47a202c33f33b23d60db1e0e34bc40714b2a52c73aef03ae85f9577b3
5c05ccf8587cf6008104bc4c2ab4d33f6405b01e49e6d8b507872d8c5de5
35da5b8a9832864ff835292f82e6d2e0762b9d454d708d74570958db7400
aa6142741ba0de904cf85482353538b656cd605873d6bd5daa5c8aed24c2
0cf13e3531c118bc47c07b0eac43b3645ba99ee6373f77b12e4ae21064d6
3589dd89ad3da8fc3be12e6c4842ae2e0f9585ece91fc745abddee5ebf69
970c49414e9c7e335abc9e96911276c1f6305e058ae5ef9c9fa601edacaf
0b6afb6f9b7cb29d69121447e361fdb4175b139ff6fda3140e7360029263
a86664f28013c63c3f67bdaaf095d05881c76122e43b9b05a3dd1f5574f1
a0af19ce3c127fe4da0b1fa455c7646bf1207e722faabd3e816916713f0b
7c4bb2ad4a2e9c1a58ef56ca2fa59a0c513e745a7e9ae667d5f8b1886e30
9cc722f802ceaa07d854d09f8bacd247e713a9030490ee9fe0793d166e82
ee12c795d4d71f629790aab3c6a2e0615d226afa7d0609307ccd9ba7abeb
44f68822bc03bc1053c182f2acebfce5488b6bc5a77c92f26b0ea2b0925f
20901e5a0f9d55bc7b7e38cf158fe0c164bf84b05bed1730564762807d80
842960d10f5aa9997c0f50ee2623c8f8f7948060bbb61ec4cfe06b0d4001
1c7e350704f5393f6081bb68ea121d85cadddc87d90caf165c54173b35fd
d626b5b3ecf74fd7c5a3679bcb83044d28e84ffc4eec2d641e4f6d97f3b1
a30a1916bdf5b5cad7f3b3109ce591d6d37d82a11b1c73fbae1a49cd8e70
ed246d324595bee4cac2deb78925fa588517ae6861b0292396e011bd247b
91f77b9e2f55262a290849248790b544a1f4e516ec7f7310b3566cb3bceb
e01e46d53b79ba50093fbdfbcca9c9dc13cadcd8dbccd6ec9b4400e1b958
0096e0e9401fa0f5142d724eea4784d707e75dc6cc16cd036c4b615dee30
e1fc5c33a8eb9e1c6d96e7f8885f6c686228bc2cb38c98e0c56a91fb9195
aa30f0bd34951f315bc8b99fa86aa62a298622a66f98af6b055407718594
812fa69fe9db525ebe26444d820f4422a19a15776039e70e85bbd4d53be2
dc66fa6e54e4de3f2d84cd391aa9f52190f9d3f512fa6b9f1b9262fb9b94
fd3ca675219045a601bbca23166635bf5d03a2562e30eac0bb343db0eb23
7bf1f2865392b1499c5c7a010d846483cabdd752de29ffcbf11de88920e8
f532d9de050fd4393fc0bad4ee583e3a51905291d4384fa752d516ae9c01
68a8bbdc95393469b96c6188bfa7a6f2a894e5d966b1cc131b7c7be393f3
f1dde255bbe26a32d7e6d436193f813efc0bdb82026133943978eae538eb
6f5ba856cfeb755cae3d36a7494de52f6870a2ddab27d647bddf3dd4775d
260090be8bcab68df8430883596a90024a74089659c71c23b2c0b3b78f6d
9890cecc7952bbb39c17356fe992c6fa3ccc944a24ed53ee151bde4c3771
e37e036be891513e699e765b931d5ff9dc831cbcc21ada851be1186a3e21
ef9b9eb1309fa3b1c23285db87fd2b99100c4070fcb3e48747d88fef2f99
67696ed2087e79c5c1a5cb46266a092a4fb4f67df39b8b28fd3ec7a23c87
3adfaa806ac4bc0ed02eb8b4fc1429bbeb003b4be35c8c0c4eb458aaf565
8798008a12d088bfaff8271aea837f909641475dd06b2cf51412d08c0788
9819471e7294f18a5f3e7fbb334f1c3ccc72174145efe3b661c54bb63a18
f4880732f94511147f524af57c570d6006a273de95dd58660118914faa37
69a7f311436cb8295647778feffb899bf29c5e6ed9eca801b6a3ea8a25cd
56ce164f396d8ee3f6fa591ab3827faff6f305c6056ad9178ed3e29238ee
cb0ffc28c3ec36c0066e182542c3f9d0770160ee59164dd100e957c372be
f7ce1dd946cb7a0182a685a4db2cdea76523bde88788c60c6bb74959db46
a390daf036bb4c3274e4694112ce476b32cd46e57bd1cc5b4235e95cf456
be2232ab92c03c48c90c1fb4cae4ebae8f9ffd9a414d9fe9b0f082f8043a
768490d402faf221159412d103c3bd21e500054e1abbad554dcb762199c2
462b9d93666e43f7873e3279f4ebd4184a98818b4d2a62b8e4b5fc2c3590
c64609d96f01ded058811ea20993ea6c827fe9e3ba9c0e41ed6d42d7b03c
fcade73041401f908b85bc3677053074275143e2405f3e1022478ff99ef7
b877f7b14cc2c996b92225d8469501eb1e3e11727c91e257fb3b07337445
72ef4aa32f737fa431256e0a82c540471ea90dff852799bfac7f22f0a177
30f2f946b1e1e7031cc425b09be53d6b0075f60fe392c910f4cb836d8a53
70daf7fd6127796eedaf460b4ce098430705e1c14fc353f17b1a521cfc2f
74863ac8a9475b01efeb9b33f5120ee7d64d8fedbf2f60cbac6a35c93937
229c1289cb67596437e4276eda785242837d52af618f6aa1f9498d328422
8ed30d2e861f77c459a00f56dfe4dd224efb9ea5ef1f2615951447ba63c1
e761650a884395ff1a2a9f2185bcf88614002e906fe1266be390945c9cd1
877dfee971c76b3bbef3399edc52dac587ac583bfb6f500647f200dceb1e
37db338a3227db89427ef7c47a0f7c4a9302bfd73671e6680c5d49f77bc8
ef26c3ccadd5b71a69e061212ed2a106d2f506ddd7f981d74eabeae08a52
b15a7c88c0191f3b740462bafd3492b168d759db463c543146822210cc41
731f9e1f0852671917023c189e16342d8df3a8c361f9a4823f331d1806ab
7c3b457720bb33ffb23e4b0bb1a6b6e2dbffbe042e372a1e388fbce8dfce
060c73f1213879946a5d2635f725e97d750c301bd7028fb614f6b8c2efdd
02ccce44a57f95e8848415e67a0724bab42db31ebaddb34dbc270eb78138
6df05520a03012daf1dedab01739733047e7b6bd3b8ea532320b28ba5172
9fba91969e7d94cef6b7ef99e4cc80a7a5eade22f360a4b401014e16b24f
6948e5dd20e99a63770ca4e0cb092aac62446aa0c3caa0ce47e61ef16378
63197d895f9ce762c7424e0ddf02ca364d8fb0bb30c597b6eed6ef363541
2d0056ec46a47953c885f24859bbdaa9c8ee00f7b7431f0d6eac2361d39c
2fc32acba92659787138aa675678119a4ae68d79451e3c21ae437e53253a
6aba77d253afa14121ad24da77e9c61c24bd04992d7821fe27b35285a8ac
e48d711369b6d614755a93ba7534e6dbccf7495b5e1bc03e9032a6204401
f7107626bda87587af7aa5666d63f7374ab8b3b4314d6ef5b4941fe505fc
393b401636918f785652b724faecd24e1ba47acf3505eece869a7ad64c05
fc849e9129c5fe1dc7cae0ffdc3b74bafc2aa6a67f3ce7d81b3ec69105e0
492f285ac4fc2695f085a333c1436e5e5c8177fab83194d6d0d06f6c8ecc
304d6c6afaefa759ad4394c8e42907493bdfd769f9413ec7a30567763d3d
c48252699acfa70d0e2316114f718ee6112948a80e4b2f3ee58d147238fa
3154b2572612071e3ec254d82b6409da79f3ddc2a7ac6a6ddcc9ccaf3252
00a8f076c0ed1a642e5e5d301b8f55a485e539673656c2ed35ff217e7b0c
164aa5fb9dc19f356ae4b9d558e93165beab20d13241d0cda1761c85aa62
ddc13e0b328bcafb783a7897a8b47b3792d47f539e38df4958156e75ed28
59c3323db5e22abd00925cb9dcb17199b6fd79465a004f93f50f171b8b54
6b10b8823a640fa7508b4de419d04b5fae3459f788999698efcce9779235
e43661fe1942fe1f8e22f2c49f5cb489b53b39f41f3960d67a80d608f3ca
323504e72de9eef0100b149a57b698c143b6da8a922ee19ffe11e2de67ea
ca5eb7b916f40e782dc987d6fb9b9b11a17feb36331a0deb6e4d5762f309
4993c68bc53abf350b40f36b0b453b60c69862c39c0bc69ee48883812f09
d644054c98b99fcc29c65c25147e3addfad1511a37883b71f086eae4fcd9
be314a311107b4027f24d66a51e78e1d24b3cbb5d4413b996d4c3a295445
9801346ee87fe7ea5bb0dd206d58f333007d552f40ff43769da28ed0c9f1
e749440c425f49811ed85fa8a5b6288c016db3fe6677c407442dfb05ce86
517fd9539bbc2b2b9072cfb58cb5785f856b79eabfc9caf0be558fd5de58
e0bfc64505fb00154826cf7d20c8706a7b9a66aa9f148ef0db78ac8a808a
657ea90e3398843caab2340475375a989d79209b6aa58cd44959f9e20c10
a55d043b6ff8703e178b8addf195e6fb6c4a2703bfc7d79da2c3dcc6c20c
1d9b38dcb2a1e2b7f4f8d9c1b3766ba98ce4414d9542d56d2d7b0691874e
ac29447c43019432fb5abcb0d22ef67b894badac4332988281b281b1d221
7c27fd46d235d25194b77b0bdcd7f71bc720ec221ed5b30716214d6a12b7
1c66ffe82b923686e584a59026e08bfda2fb0504d7b1ded8f15dc2c92122
08d35aef3f2efb3f273b16ac06863f8dbe7de092962fd5b8e7dbeef645ee
4105a04544a99a507c45a730c8251375d4f578ecc8163c684df3b1aa1304
1c110325fe926d1173db9a5b0f16dd7a1e84cb158e37bc7aae175fe2e8d0
8375844acdefadd019bee756f82e9050d1c254a12b91176ef8f480237118
ff19e725ae03717c7652297c4f9122deac894dc3bc6b086bc7fbd98404fa
d6a74ab9aa93f74b400f203090ae6d178aaf38521f3046a16b743a8b18f8
5decbd7517b003cc95e3102777a0846b641fb6b99167280d5ea3473385a9
c08d216471ea40aa0080ff27a506be205eb2cdc95d9666858dd5b661dbec
fdfc6a2b35c95a8ca4770c14f35b40a99ec10c5d7ebb1c87b3b5eab2c25f
08bc7076ae5e6a2dd50ca04d6e6c7aa3513533c08f01e51c97b64f06f3e6
007eaa48e24a554bdfe3f9c2ff5d5bbb796f48e4763e2a1196e1885c2a5c
954b270866849fd4cd11940819ac2f6ff2f5eaf482cb50351fdfeb79a3ca
9d463a206ce2803ca5544a0a914b5501d4d1b9461b583f5d5e7f81d56452
d26e88de7e84bb59b6e8759faec674a1258fa90ff5d951878b583164d87a
8ce44311b0cdf51d03cbe9e56e5dfa4149e9619f90a24e6cde783e2a85aa
9645bb693a8561213cc56b3ae8af37a18d2a31ce0dc4b631ea23d6a37275
d464e9a09c40534b1d593ba55205c00a3a6966914353ead69b371c8ab1fb
64a6c50ea22f67be612d498da196b3ad77c70e303b16da8522cfc49695ee
c1b6a00750e77cbeb46dfaad25e51d19b7d2512c74787965fcb842c93ebb
33b3c5032103c4a85bc4e4ed1551c82ef70ec6c954a584eaa94a6d62b355
44a1205691e8ac1f5f2072591538b69fe0c2335db4473703d1ff74d2062a
f54991e999128d306a0a7d4a2537af845a3c2813b4d2de12aed142dfe951
56d97be02ea4682e3327ce7c24dd8c96cbda26e1a0627432c5d80261b74b
04116f71eb1db391e155c206a3cdd74093a0a4621f1e2fc56f146ae33f21
8b75835fbe5db438818d53b976d749887b5c80f2c9d6130679e1d94e2f86
d5c7b9fdff7b25dc396341466b8adad3e315e74d7e77588d3fa1fc55bb4f
fa5ec58b109ef7cdde1abcd8b8b924b45e06af4feb11d2c481c183dd1591
13223215893f36d2d85c4c1fe59be2dfe689c22c3c3378f27ec136916ece
e363b28bcebfbafc925859cea0b078bb23bdc5e01122fff46c0dc9edd6a9
7d9650a48d81e6830b9d4f2fd02dec74e8f3e147f584ab82a2ea6b176fd0
cf18d6b73ac68fd552ee601b6b5681beb480375cd475f64eec87fcfb7c05
2de1d600d7d64c4ce12ef910c95025042b0964da8cd3308d2ffbc5216af9
4ef99ad21df9a41bdfccc59a38fa978a1ee0bdcf89701381e2e4fb10275b
41f91656f7609c45719539b15e773d0cbb96d3880a0b0e9001e852ad40f7
6514a59208456433897f6fd4c14bb8f4aeae785ce48a7d520107d6486b44
251fe18ccba6f16737fd06f991811e66c60d02904425f3c3db39fc2d9d1b
8d6d7c7fa680aaffa0a958e13525f57f9be77459e2563cd0559175223921
af13eb18d74a289a5be16d2d9fccd6f7df7271bfd47d4f3fbd132f855aec
77ce37febb9e088b440915f3285afd54a268ebd3c6b2586a7bf347c22a5b
33d13cc79107539ed82c57e04a2098826afcdd78a48c6d7759bb188c6003
046e7bfe46851d77d2f2650036674a9384bff73c6b71e21bc2514eb6da64
767c0c8214345d7da618033627569477c1ba5f157c0de4b6daf5f49e3b3b
35ce42204880063677f87bd8d9e9e3a37dc17adf0415f42b3dc68f204cec
9b72a0432692dcb94b46a07a9dc36d58185500d505b3f199b9d5c671d4b1
4fcae74a32ab23061c50efe4e218fed27368886bd046286f46077688eba2
1cf96db0f306ea6231d37caa9d4bc387bef1e934f95b8c4979fd97c4c6bd
ed1c7fb3684d9b7d7a6fd6832108fdc6da4557e9e464360d7c06ee10bb4c
461dc7b6590ab865e28c7169f31ad5761cb2d5122f9d43d6277d4cba10a2
1f36c8c58a006ca66b431fa622ebfaaae12e76cad7f08943580303e55695
6e8b323f5fe090630240b9d11e24671fcd3c86fd702a9ce0e3c4b8f8175b
d1e803fa0ddbd42add8b212f7302ff20f03d956b2a86fe47bb98c68cea0d
ed3d855ec951ff0e3cbd39af4109f0015a1a1aaad350c7e61c91135a071a
7d2d3911ecdd9c8db406a0d859a04a585bcf37593596cc35bb92bcf72614
751bf76d876f1bd59be437d9f069ae1e0ea9c056fb4ca4cf3e962b272b97
3d9df7caf50bef8c719e98c4f3c90f47f07f26364f1466b2dd2b3e425870
396dd9620c88f7746f61ff83e54b66cfaf73cd9ceec3fe2d52b2e7f13f8c
1defcc7bf79b85d705c62c89731c3077733e1d70f1a76f824da9d70858b0
f0a54b7ab977568819cd27ae06f33e630aeb0d352c7657792d0e3cbecca7
098074a61cadb71f33b011070cd3fc6a1d096f79d6822ac2d7237e426bd1
fd6e82545c96a81f746b4fb0e5fd998f5ebc490cb6bb0c13c8420192377f
59fbd8f65658155e0525bff9d9fbc58d737da8015089875267b179fe9dce
ad1f0b157d4432d7ff31824036739e841f5b11bab0ec2dc549819f9843fd
31af8dad7eb777ab2e4442893b981938cd7832c15f56b71ae2aba7acb56b
2927668748ca160ac07937d806916b84b31f5f89c95ce027d8bdc53a9be8
8585c89232a5d2348024612cd1dd1e91005e275abdf6227594c7b7e89e28
6636d32f143563673bff9d9d27ee85b9940ab7ca3c4bc7fbfe55a6de4626
31a42c7dd66b541e9047b091217041d18e5b1c870b7e6362572e02a56c01
07cf628a80ec45f822b80c928537ef1c4db89e767b3a13f62e22b8ab7faa
f2c89e3390a6c53e68bc3ddeddfcfa917de5fdb17d558c3d8cf302623f19
de9360c2a2465af1cb97f701186c05986fba8784bccc96533ecb2958f765
60597dcebfa5c00f78431edda809ef1a15a76069690688235dbfc8d45026
85b2a65ff1c347644f0ce30e5ea94043c2fba7a990710de469c889fa3453
8dc6aaf84409317066c3b6f9368c5d90bd83630de874059a88d8cd8ce140
968d0e2e93cae56d7f1240431ff8eb4da3670bb17c8102b62b9788f221f3
948cddfb040a9f9c040b52e555a64709153947abc77f6be71b2f6c5de3e5
5c094605956817d14411b3e53f9f10fd69abf7b8bb29dd06ff7886853010
f5ff51a331ba5d112f08d0ea23320bd00835463723d368d0aa9437149e96
8549e1ee1ee118d009bb6f2a47ecd8976a704b57f1f66d4a0f17da969884
ed659f7baeea819d1fbb84cb7ab720273dbd72b7db00c5a5396e3548bb27
b41cde8e7e60729654e7c8b56f2fcf09613a67d9a23ff258380a231ff99c
b9d8227aff9e2a7caee558069dec933a174bfaaae0dc0a92557611090471
38fdf37e1e6604a8e08dc7da0be9121241bdbb7b7e59e4789fc5879982e1
8334b740bf8f7510d1a3ce00d6a8ceb8d7ff94b7a03aef0b416db44ba429
65cbb0fed9bd3f48bb8cbb922b1fae1b169812e54e706224d54a3374f9de
77320c939f6f3aac3ebad38d0d8d2775ce9716baa7125503c90ebab6c18c
0c790cd7dbf720cb7b44e8acc7513c8a56d23075fcd143688468d7176406
4eb5cac4c35ddd9d3044881f2e6ec782a40036ba4bb110cd55dd211f4d15
c64b28680636d44f95ec3deddcf938b2f9ad8b93d6d8e27569f02c209d45
e1cdce6f7fe5b520706726b8ba49028629f5b21f33a0df12e6b14415c6fc
fbfb678226c3a9cee09429797dabc25577f260dc0dda9931fd2254acceab
1eb328d642617678d913508db1d77499ef61cfa90f5c94938d413e3a79a8
9e08140614894f24dc4b578f8e7240b69acf31896fc322ffeb0ec9bdf516
027c97cebdf8246ca4014007a7aa68ac5ddf0c7129b958c6fb6ba0f86a0d
dcc4fc58db7f3a345d10af49900004f818f8f753a75c2c7423ab70e5020c
12fc42408cffab473867122784caeaa1edc105ccb2c47cf02062ce42e632
31240056e7e023a41f5ceba1332d31d79d632eed6413398a9b9724b1ecb9
03ceb12679b261e4827f07c6a9352fbb2922b3b3f888d8c52dd55045baab
1bbc9d3a7e4b56d24f4a0fef1a3a5f3f4665f133093aba4321a321ad5ea9
eb2b1a3cc880385eac04fc85ab0471b3da1f1faa61f6c015fe6fc0f6d4d7
38ed849ed28169e6c80435edc8d214e031d2d4d5f9b9165cc24b3b756311
e8fd1027be6f15393b2ddebe2996108a8a0f3744107478c185ac9c82547c
4e8281e086c8a1c00220fe52c228ddba887073896d4100f51c8e124ab304
74df100aa9dc0e3a9bf8f1a193932ef8fe041041db58535ed770f78f1677
6a8647ad8f84e87321b8fe160c5331386b5d92bef5737e42056add65ff6a
5c6d28794b43d4c0d34cff1111dd4792e903d84e7610bdad48ab6f9011a8
e77e4adbb093f49f634db8dfeb28894699a45d01b1673a759112ba3a9305
afe474ed7dd8f489d37675a4d84a5aa394d21b9fe7341ff0c0e1b683b29c
e927604a155d6a3fc8a0951c303bf02e4aa37d1acf9042d7c7e66ca0da28
feb0d402c2691f70b13faafe3d390f24fee18be5dec771a1b81134be8b0f
53ee51e002dd1e5e51bf733b7afce42826579324adfcbdecb86896c81b6a
5a70dd475dce7b0c03e0b1d4cf194414aa1818315150e6829951335e9070
747b13863a2eb4f20ffed82418a01ab1d36d1b366fa6f3c8b74358135fbd
15fcf453d8de09e673a676ee3bf1e4b603c9522d8b39368d2067ff80a84c
4ce4d2bca723ed60617111cd95d98832e91cee1f8cc019e2ac77f416cf75
26a95ee87c10759e9de23daafbc2b957a2ef6e8a99f5d28226a08da1e281
5866e172451308dd904c58e475ca733c7949f187f37870b2541333aab663
07b2f82d09ab99b7ea97e58da0c028a9d38ad93935aee1361be2476d93d7
f12a35fe88bdca48c6367858921cb2e83db9357f90445b19b3eadf2b53dd
420cfbf5483ff2d6097d421044a14d783eb140c5d28c98f2333755808f65
f30633a7522370f0a6c0f77372db3be309bdda7665c54346897ed5cd0d40
eb7d73dfa776f998653496d233623f60d7b4753fedc138c7f18ece13f815
724e10c038356ec586b2c91caf318e2edd8c97a5b9c5f34063620f746de6
8555161c9eaaca90cb11ce70870f97fa20ae6265c698eb148ee08c977f40
644d419c06252b62a666baaf0708cfa7892528a2a7aa5d94b7d416622c94
c508a1c7d188c4336bea45c5a399868ab0c1550a880e129659e3ccb6e7cb
05ac7e689560d1132977ad3ebdda0d6b8d916ebf8f89ba2817082cd2aced
9771894e3bd87ee123aac0b11fc6754ea4c45b31f4da046f840ab99b33ac
c41c5a61ada1313791b238a40674bd48fcdf836da37c569d3d1b99c5fcf9
c0e65881604b53b91813e913a9fb1f476d92d7f5b3f1e6e6f37717cd3d4a
a1b964f8ec4ff79b1da78367b4c6e39b14683832549139a1c065cdaa4046
581d40369a4e2de6b0cb6d357f2efca53165152cb848f5b3bad672027d08
42e0435377a864de53eb6425ef560d7cafe67ff5f1c16efc88f193e797d9
79d70b5d70083d217d8197d4196137f5778854ff6469558e285129829698
70a1323ef5619ffda8585cc477f58d1b36948ad82cbba97c0f28097de574
8e15639f5ca1e2054b25a2310d5f1c1a0ab74d10fa2aabfa7e25579befc0
cacdc46f5d437fa9ad2da607cb0ef3eee013a36615bb4f5732adcb35a6a6
07548abbff5b9c7ef524f6684f9ce767d0a0e4d68cb25ef81c8a8e323487
62ddd366c8eab7138b27b1984023e88227b6a83734387224fc1a5c7568b4
cbe4dbf554407993ef63c8ddba5e477e35688fa6fd0853d7a25ad95520bc
e83a3c539fe25d2afeb1dd12414e84e12ae4002abd803749daf8bf14c1b2
05504e20242d32692d2fb745382c3dfcae358fdc8818763dfc0da1198616
479a00090d390dfb5277defc68c98f0ff685969036491a139bc8cf623ea6
98f68c59c98b804ff32abf9898d7a89e9c9b4fe0e0ce1902bcbf9d4050bf
ed774544fbf345aac5319c43992b0aa92f39178578daa77e54e0e903091e
69ba5c34c266cdb7a76a8703a8acf19ee2370eff266d5ceea1940ca52389
d96bf8b56c030197835722f362df012fdebe47f04b21cd6f4a95bdeca410
5cb6b64850fdaaa73c7c9f7ad3f02e3af9acda9540ffa1a1f43653bf8e1e
9bbf938a3084bc75c15f1502d6405ef9be3b904108a2b4e5b0fb4b6f1bb9
21c49919b5aa4d49a6e58f6bdb5960dfc8331a7f7d361b44e069e0adc9c8
cf4593168c55c3b0dff23c52d432bf837ac1426eee51fd92a3ade69d70bf
14486bf05f41c89e23af218f0c371f1b84c9e33e6fdde18f8b3333e94225
d2b5bac2b775551654e832dca340ef4d88067cadc2ad7d6f5fca255dcbc4
6d7d5d4d2056cfd5cb1ea0f83ffa37b7b780284f36dbdf2058ee1cbc694e
50799ab47c66c3f5587b9c9b09c54356c5e567b7631e115f8fd5f44771e7
b713238f9e61d36ca71fb50c7f0644fb5c904f0225acb94259c782b1789a
e83a37243e69444a990f60e962329b2d1b42c477e8ce2ac113690ff33683
5d2013054bdb820257f4e0a601f0ad29581a5083f6c9f44c8298619413cf
154f31cfbb51bc5a5238a4b8b7cd93c77ab91540c75c5b68655eba2561c1
f8b76c8c4ccd83ff81086d99bf1d13f5e543e64500b18057e8c7e6d8f905
090b1885da4a7d12f799eda3c2b9dd727254a7143b6968b26ab199ce0dd6
58a26e180f34c0649beacb041e1627985830587af25bec79410fbf6f96dc
c68984190726f6a8e2da8a40c03b851033b4b87f03d72f511f44e2740111
db1881e82c057b821f49ea6517ac9d5f21430a7fa4524391d28fd2a0559c
9cfb93873d2f00ba04aa80d80bf6639cd76360ad5c6435ca43eaf8c0a006
fd59cf62f31308d6e525a262fd3de4e0ff3780c20eb155820d65d2950f3a
bf2eab80f481ee7530addc82a9b2b8750e64e85aab568444d2beb814a70f
10f8e7231c0eccdf9578f63c6a9a1f6550a9f947f678dd8ad31098ca9ab3
fabfe9da2b8e105ca21751ec91a18b9615cba0e2691963eb99bcfad6540e
ee07d9a9b356ddcca6b411879744b095f8ccb0a8c095bac4e35aff45aacc
f8b569b7da5287d9750df759c990aed5eddfee8501047905749a962c718e
fab05eb3c4585f9e8b04a30bde25093e50f7fe26e510741d103b714d3041
42d23be324ccf8c0d05d3655d61ca4d5d5a447cb1592a180fba3e8c02460
29ac860a2dbcf5f400ef8f4967fff41af9e0a336888e54b3aae9a86346ef
b59f6aaec7ef4cc5f050b34b715e236e0713d2a38463168ccb4518bc599a
e30a2b60f2835669a7870f3e35414267f93519c4d09fc10938838ca4bcb7
2be36d6680f0b9bd0fc67f0608a4b2fbaf2916cd470b49c00f9f06b38bc8
3a8552eddaeb23409d632d0fe0bb041962d2c49aa733369eb72518d7007e
0565ccf13ddaae8281ec13df204eee7d49c46e6e8fc57fddcc408d3a6f96
0ed65b6436ecc987b608122b29721f569f5c115ad00143cf751e0b166a4d
433542968d8a59498d4ce0853f6996fa832fede4fcbaa47d926ae846efa7
4cfd1100a290bc6c2ee4126c159c2b7a735613df2acce9f7deb2214f106b
f172051a3df1f8345e065c50800c09b649924cb162de6b716481f4eb1d05
900ed724de8771c7c38ff5294d7c458b74aa6a751f7d5c9ee4c123160d9a
ff15d97ffb9877b8b5be3d30bc303ea9d736643864ef2e53ac9516103be5
aeca8f817e9da0c09cae3b909ffea9143e42e3244cfa98ec19a9df8ba01e
1b8f8bf3b6a4aaa827048af2ed8516fe041f978a9b02c90e8981f8efe8df
f402835d29e1e1923502d29e1a6417bc58d8cec61426d65f5905152cbcd4
4011a48ef44f91aea02adc02f896abf07a7fb4c43f8bac6d6572b7e03215
66df3ded635f38eeec91eeafb1c483e61651d64b4ad428113a07ae144af9
4136ba0cc462724c3d9bb40a164d923de1c5b8ce0064d41dda7645d15e34
22624684ba832ce9f8f442ed0ef317e8e7111f855f2359b83ff6813c76e2
6b77470bf1a160a70235633f43690401f661c99c77ce12beda955ddfed6b
8530ced76d439e16b7514651d7427bfee8b8afeec279ad28df55bcc9e935
a00c897fd087093496945fa58165aea08fd59fe372c030abd80466b08fe1
664c6ad5d03aeb070c65ebb0e47b87bce8dce41793a4b28b72997705bf69
27cbca5dde9075898610fd896ac1dd4a03f5a9c1eaee0d50808430f653a5
890f814086fe7ae64a136903025dcbab78399cbc6541fae02ed1e58d0b45
29446907c4e0d67814203f33aead0fb2cdad09032f788ae1229a48852d70
eb7f0b1ce37f3eb1a5650dcf54988873bb943befb9e0973fcf1f19a2181e
a744a848612f18e6437bf05c6e4b238c9f49821363c67ffa42ab608e27bd
d7b9dc19a83f1d845cca07b619be6aca2ece1d37283a1c1faf063430bdcf
48ea969b74911b5af050740246032a5333d283ef41d77abe51813e1b997b
4ecebfc21cc8c6682a4ecf914d0d62fa85505334c88e672eada759a9c28a
c0150849d1aa4dce97d59ad5dd48bd6d5d46bad2137e215100d041861b4b
e19f1eb73287602e805998143e3ff0b1258509d2dddf403a55e6e2a365a9
dd71fc3c3a4b86f006766c79668b594d0c51aaf75b469364f3b8ddfbb9d1
05d1c811afc411d8fc87cd13508b3630acfbcc346e27f2660a69b642dbe3
7583e55307b3bd72e080bcead1d0a618c2988e57e805f55fa8dd210fc945
f674764b7f78c54ce01de42a9d730b2948e39b12673a599b14725d3d812d
c550146ab4d09d0086bdee76e3b3c1717bac3e584f749577639226db9557
26e020ec0094ac57d1e098149a53746fdf280ddd6b142f94e494e67ab227
f442809463ec779cd2f0b1b0b16408aba6a981f1ee527e1d4de43a5f5d8a
dd3425e87a5a2c47e6ab1d6d5fc397bf3b7aa54e26e85cd24c6fbb5eb347
9708469038180acf418c40f2499eff9d2a7ad23dad3de91a35729aba03de
403bb176ea99629d636d581772cc0226e23d84ed515d99275394d864d9b4
d08234ca0e319a2e09627863bdce3a9cb055de53f01112e2630cb549c5f2
8b09750379ae81ae80b49e13ed669e2bad95e4e815626bce418f09d6bb52
a30edc232ca68f24c4dd8230371fbf5b906e3c9222c955b3ab08ec2ce7b0
b19557e3b0267d57de6217c191a042288bf3104ff92d385d46683ac2e3b8
1ff27f12b5f56a048489d5eb0307a8e76480e2f5f14a6fcbcc38087e933b
ccfe5634e3de2b183060c431b1f17913bf1129c2b200f39d390d4c3f8b1f
d6f7ef36d67aa9bd91cad9d9aebf3b134fb0b390d35a617bd8f9b20dca61
93f7a6eb6a58448c93c57433e1b19bd8b3a0d185f39da1f29e32090ee9ef
6c70a232933b37c2721fb2f4b51a0431a007a01e3d9341d08f0f728617e2
ca0966cec087457f25cfac7f4df6ecb5c4c2d946fc1257f746f61001a31a
87fc911e80ca77bf66354d20979cf9e2cb5f680b6714b0928cd4e068835c
6d560a65ef7ed42ba6d83b9c080138531b304f199200392e5717bfa7fd42
dd2d13b07287c9e9281ef07e16fdcc3e43eb80268901e94700be491a9aca
7c2a8a8f6fc6eadc1ff8943cda85f53c8fdcc69e6ac3e91031cdfe56d85e
92fa12d0a7583caf6a8c3b52f7b87cd9461ff797a0dda9ae390c0130fb52
0ad6c74422cf97b0cf8d9e724a7a1b92530b1c118a60b40db83c9da87904
8a03fbb09b83f05a5de205cd59f88756cdfbb849fcbaf3f95eda38a31647
80281c9ccc263f88d3605cda6dc30a1befe756d9bcefc23ef4abd101a487
2e5205ae5c48251706723f5d0dbcd34bb86f56fb99ac7dc601013e8e5bf9
b24b50eaf8c2705c5f7061fce92753fb402225d3718821f94efac17ccfa2
f74834f99032f446b10814a7c3bc10ba9c522ab63825a782616f5c13852f
c3d949240a941141f671bd6bda3e15a192108234b7915cfa1e109035f0c3
63dba3ad1d62be43f3e6308b1cdbddfdc000f2d767ded02edf6c595b0aea
adc410c225770c2eb4863d5d6935f602aee35c093aa7340b019f2bc0abd6
4f143e405a8b4ddf5880402f80d1588982142b68405734a1666dc0c0fac5
b75ed934b34d8fae26140eb8f5cc2431e4f1389c7309f9bedf264f4f290c
0ea59da7468109ad6d38591f62ecd218cbcc49906fc091a5ff742141b130
9ddad2d82218bde150842a708c7098bda9c5882cdd4277d0abd142cae03b
1797c1f5f3c46d3ba72a5b58fa5da48f6adead673c2fb55c866f2dd20bff
d1c9459f9d5f15c8d4efcd7356bc335449197d0c7618f6c066ec6434e989
3e079243346bbaf0b08488e5c359a892a5c4f8bc886e6707fe4c3850ab7f
23c857de596caaefdf5fbdab305330ff7685a5eb46a4eb76363bdb79cf33
4acc1971a02166123d5c77398eb1a86ac4c261718f1ac87534feb1f8eb6f
50acd7cf9c97209a1621d1801ed233d3e185398386cef2a72e14696abc53
f3403a9a6fd487a8b3d1c9e771924877998980dc50d9edcb04554729ec62
e118bd4eb6beba4d4bcefb6e90a7a4cda67bd5a375ea93e842693ab38dd1
98629110be4fc2782f40bc52bea682927c03b12359b83ff68b049de37922
a97d64f7ff82ecf3e3b3c4d9f9184092484e442e8d64ce3b0d5d4d524c49
4bc07fa72aaa364c0991263453c3047eb446e062fb87268030c19cd2092d
2a16046b48e6c3936e55ba0018c646134288f2d0408674b695aebb777154
70b0903a275d93b1de783f4146b19a28dd14ee635e5f67d612bbce64ae68
82b8ffabbc0d31d8c1a06ef45c7c14364aaa454e6a3df4d5c7ee283c75ea
a9b33e655a460f01b2a5790814a1216f9cdccdf4781ca68f2b8c5354beee
6f0e3d409c0c87978a25f1b6c72c88ed7b904a3c3f4cb019f11e1b9c1391
7ab8dcf941289efbe923d45c9196002d03add4a156ad36f9fb1485b4ed83
adb70e1b72f7e4fb845f719e903960ea6519403376f8aa80effb7b1f3ad3
bd7400ffa8d1ca6d132df125f619c39d239d23496157e2843f4d64284961
ac8a088ee95a2732a104370110686265738ad0a711cc72c03abc40151864
053a42cc4a8a2cc0966e2523e99f7d29daefbdd860d1cb5d5e50bd4b7595
bd56bfd0917f8982d4b614a557dd2a6d5bbe9c12dbad0b812683888c0fbc
aea1bf15929131025e8551cf90fc673015c6fa1a0709c4bb1a9e9f742834
e41ca713f315889d2721e25cdf073145bccfae73920b7c59978354dbebb6
fae97230b4ca1aaacb125d8ddf8b919f0e05f9445f72ba670e05b5aad63c
29ea4ca624f81d0b30f4a3bcfd60423885ed455fbeee0c5398749cf0acdf
7ac37027ed0109a9a37232b461b5a48241b9dafb2f43e434dddd120031a9
a3a7c97584707a2b2795baf1020366a0fc83477c995703009c69ff989451
d0cd953b85c03260ec1868b6166df6dcb5cc01349bb10426ec4b398f0457
a1889aa55a6cf845a6fa370c362f90b87079f66f2747c1d398094de3183e
7526858059ff09936dd684a3ebf4e98fa1277c0642266fd314df075418bf
c351f6c2f4db48303aeab987ea1fc51bf43760641edf44ce60693e649b32
77f2873975cbc5cc7aa760f1416132106d57966a4af144cad8bd92102cc5
c379d1104e86f9645f39613ad72b52b6d508b9d023266ce8b528955c6069
04896970fa259f7d79fcbd464fd31e31784f31778b03f5ad56cc064f5649
b7d6bf7f9b824b3ac56c8899fd0c59c9ecf32c6729740c12c7d3bb5e4b69
4e9ce72fce4cbe4bc99d6b7b347c9c2cd98cbca18f0ae98b13db7213074c
fb8419550f73972fd0cdf81dcde0d20f67c83af0dc60d11d40d56cbf0173
868103753717e5e65665586af77832d2ff0eed0c7fa9db9d3daf56f1b44d
823904ebcd330d13b5ea41de4ca45bec734ff73778f82611d40fb7cab685
f400e82fb52fe98b4a9e6fcb967ee1961e6bc1551574d94c409a37babed2
eb8163edb41fa3d6d11576fe9c71eae9e8429a4003837c968a7f37177933
bc9668239558d455b7c0b1005cd347275b383958dc99a6492b217cfa6ea3
cc61e571ac148f2618256716e5b980cf030dbd002e37876c68f9ad29041e
a6583b294aed4350a530702f7c4b36853d0df0171fc5d31fe4c514e23dd6
bc317d896849c9fe3348b87335b860251fdc2d44623efbf2a36e633896e6
a5058a1723136756c23f34a300c7fdb8807050528f213e43beb695ce8a90
5e0dc1c21758b6162c9d5801206f88952a5e09db16d4ccee8866fd7bc1ab
36c120788a2c2f48e73849790f8976281b8100e665635623f27825b91902
646140d91436bdedc39c67002da5837402c2830556298b0b9119f3cd34eb
812a45a71cb9d58d69f4e7218c7bf5721f5e60057e730be88c8ab82dc456
c3a2ae266e4fab145065508a88899369d16e307138b0567a15ed4fc26046
24c080d24cbf5bc28a7588f4ae7c221e0e3d4b35cc88319f75915b84a4b9
901b34831751cb9481f87b6e2d464348d14cda298f34f521100aefb39481
002b759b9bd9d0db930cab97e6614e5f22e53a8dcc9f91a2eb0b4a7fb5bd
7c166796c3aa28dc9ecb2744070f668563f7a13ecba3c39485c5b16a6cbb
e1336a4f16daf8654c5c2a4f95662a5fc6c9fcc8ed2402a0f13a05f78b37
c0c02b4eda469c1170cefed3d8940e923e1394575ef42ee612a76b9ea67f
1ade90e1738548d4715d3efc1e088bd5fb254c4c31d2a241d0687967bc0b
2a07b872ea18fabcf0766cd84202386751f4c6d772a2acc96f93ea922d64
1fb8fb8e5c43fcb40a88f22dd5a0fe47dde6e81a67cdbc4607c7f561cc4a
116ab80c5df057c9f48705a772fc593244976ed40d39754f3afbc145fb31
12297d4f9d8451d817e27a8458361f2d0d4c00be3437a58d54533f4f5d39
032d8d18739587e4155f6c72adf4cbcd8b4f2075038babad9f828f7a07ac
c65f535e6ab8018a3fc7b84efa8cf0a9e92b08407261a8004cb44e5d4134
90bb8069ac17bb17e0919ca1a6318f4bab3b2e541cee3c47727b66de0f31
2eff0b84e05c8a9176c22bf1f0f4562747dcf30edb0e3c5b15c6de9631b0
0c21fd8fe7131132f88f236c6d862e9d7b360d4a3d2495c0fc79b90747c6
ee33b64b06a1df6afd0030ffb01c788665d93f9ed9412505c6be5d794907
27d255b1d6d70480fe3abf26f848117685802b3416f076a0adbb04bf2694
3b0ef5ac21c05cdf2b7e047bc1b0426f90395d07ee3c03d8341946e9a173
baab717f09ec16952514d2549f2b59559447948afac03bfa47abc566db03
83259e6846f8c38763a80f6f2ba96262197caf207b620675cbce1dfefb3e
4b40959b9b8a23d121765895361befef5de4bbfbaa044ff42189e9afceff
a8c1149c9daa64276335ae7173ef3742e6627983537296bb7e15c22ede84
ca2ff80da11acaee48c0a3a17a997dafd7fba46fd3fc76694ba9eaf467bb
c686a59b79635223db19a5004a9ef80eb1790d215696e07fea68031094b0
da470bc0f494d72a1e219381240476bd5637563acb8e7ed97b91ec14c103
eb6575fb63cf57a726ec102d6723b6b5e96f7f7f0f8e907aa5ddc90da5b2
9a49081cbd0972daa8cd6fc56f78140ad6c78d08412a81778b8ae64c44f2
ac2e9e99433671c5282ca5a5ad366189f9febdef74cb945d3c9db2a64587
175faf7b211631a4d12fa8d2773fa2ee408b4a2ccefade00d73dcf35d0f6
26ac8c4c60027ba3d22a5bc6db4cb471168cdedb0f26070a6cfcbde10985
69963649e7cedfc6702695a1a94b985e5b1fe82b1c5b612d7fbe732e7958
32a17c5e2fa10aa3a3d6249d5c239b90465b59188c33fdf2c41e84b0b6f4
4f0201dbe01518c5215f03d974e7820166f99953dc842ffda502329a2391
9d28f5ef01086396cb999053d61d02271bb3fb920f2eecac2c84a922c36e
866095fc8b074083071cabfaa5bb25b33138b09c87516a7ecaa9998db261
b174ad3dababf4e2ac6db48a7300ef0689d839b481b7cad9ec22e0225eae
c13640b67440e09d72d6875e8f35b54cdef874fa26303744a7f04cf3eba5
b889c30d04188c4b58a8defa856cfc2199ad4a6211586997bd97538a87f3
74c20934040959c2c30aaee2c2f9c6b7326eda89b7963146521b86cd1d28
79ca5d55e37b469ea0c7dfd98e730a4b236bf693075f20ced50409fedd31
47b67415c26aa5869567fb3298bb2f06b6bbdf643e2ff403120651c9e32c
a371a48034e17d68e0629ad4b46c6e00d2a5acd2b8342f3279e74bf1ae8a
9d33c895d56be29fb3f6758ffd4ce48c5909f0a4b55ef8624ed8aa69fcb2
5697e26f910d85af2bbcdcab7cb98fcf3623f0aca15656e312dcbc50c395
aaac41c2ae3192dc899821c70e1426d90ecb0f0e44a97026d80c4d4e8372
788996163270e3e8ce506081628696710a1203325c191da1bce0f1d5b29a
831292b339f246f883b2522f8b2ab004bac7d751a8768b2ccd0ab158c446
13ceb09e4eba6967c1c00c5c6c52fe62186626dcbd77d1546bf2c4092626
6c87888e620d8426922feebb814a491ca22eea596b55f0c28a41356ba705
f045b50f69885b806829118e27abf53e3fee1b1dcc1f9b5c9fd90144c4c4
03d3eb98e0456b3dee2159e649349178eefe8458625993a4ca2fb4bde6c3
1af98d0df06c7a45fbcddb817319c567d9f2f1f362a6342caf823907d042
cc46424db6b64b9414b88b088f453a69bc797ad46f2a12ae51df39dddebd
1ba9783d9bee1ec2dbc8c8fd45c15695ff7832f6f9bb9742ba8765680296
58b30fde373e475fd033581269cc2253e62903a27de5f1c066d47662c37e
03fdbc016950cbdaf3ba4ab5a7c9944dd724934a486fa0d0f93fd0798669
7ec139563675d81aad79ba7f7b46c0a2864d614f7207c48c49398d34dd9e
acff4e920c6f7eba38e228d743bc0fe4ccc74ada72acdd6ae060dad0bbf0
0c5bb7885c79abf340f5c9d7c78af8f7a314a2d375913663d3df1f682710
83b0f403111a414d0869f0a6acdf0722049c1ea391939c3580077df119e6
135183712bd2379a40428d39f43edb9543110c1441aa0045f68a1a067e2b
6e615df109f41dc07a8ff109a13b328bde55f71f300f2afe6bf36e4a8706
e2f92cfedc2651f11111f25b2686d95fe34756eb0a63b087d1016f13c080
e13dc26f2557382ce291016a95db86557893f0fe935bd02cf353aa6364e6
0cd41159dd578b448725d361bcaa3865c3261902704b1c692cf80e3f2f2e
151062c3a60ee141a3ec33fff92cab365220fcf7f535263a9265a572e3a4
11d722996c1e50db33875bcd319e6a6ee224e1a26e8a9fdcce5f6d7de6c3
e9baf241fc72be8dc656e895074dea70b24440cf6860822abdd396679668
6c8949edefb8466d347e1aa2d7f85f989b74d533c28f4954d13a9087e9ee
35ce32d87b003b8264924286fadcf84bb84716122d8d9e768fb1882c4d44
f043cbf1093df136ecf58caf8f36921ab15e6f37831fd1dcdb0cfbaab694
5de6c6bdb2865b20d9cd7cf74833e621cb768019bc12e224b582e7a78ecb
d95b0f0d8917c82e5a382bc489f227a7d07f2063b85fc96e37723ee15061
89ac5b8c0309063baace6b5789801fa23cbdfe2a3153132cc08eb7c21792
0c599b8aa2c47fb9242cd798d63674839d0364e90eb3afeec23699ef7901
8ccf853463cd255b80133177ecab551a5cdda04dc085c575adff20cf2b11
662e30c0ad0d3fd8b38f0fb15366e1a6613d526d8ba42700553db015d76c
fa3d14ad4695754e39e5f3a7019d35055eec83086ca8af7a1a618fbde71a
13b8c9b20e5a2ef97bdbda49bee8c4348b7faf798c5f9905cf48ece49ba6
4c9a4f1ff281073fbc7ededa43bb3ed4057ac622f23ee645c3961aeb4ef1
3cbb303d66f6c7ca49b7d986e44f29c8acc2c2445ab973d4af9db014de81
29695319a1f55c7ddb06f98508ff5f4365520f73879488686b1b37eca8b3
74f2b79ba6b3ba9ad1e19ea1a309085a7734364c8f79b3e45c5b19a934dd
ac541c5c6344dab0fe6eb4400bd5473c1f5cb06bfe4b9df4a89952d3bd8f
b3e78389c9f1626d3dcfbd628183af651a1102920689b5ff71e9372e8a53
8ff434dfcd0a9f8d51e932e9db1261e2cea2c49a5f95de403299ac47158f
c5b7df75ed2fddb93966ba52ad9c3f028a6f5555f348bac4aa5c3c1ccc63
67f67a776172f292d7670bb6e5f2f656cf9d307c8c2c7c06799c587ad195
8a8cf1becdd31a3ae3c7865f67ef626dc0067333edb2c0d355b5dbf18458
353f929b8b63f78aa368a5b9d08652c09f7a7c86f4d7e37b7aa0e9d11121
20e1c08aaf628569331063196f9170e6ae7790e06d5ba7c54846f04dc327
3fe9461cb96e4f428054924c749ad9a3b02b619e88bfb61c12b4ce7e1080
f885a4ae3ec899525703a2551daf9d2dedad18385c3d93db21a4f1d4fec4
aa8da6b4acf4bb525cf927cd83d572b72c8103ccfdc4563706c26ab91689
4f5d3481f02438c34b0b11a2b959c7ac17f5cd32137819110ee8be9b8fe2
ae6bfc9bf2a08a9cf03be1162f125db96dd7c4fa7be74f8ab8a4b0c1e693
6dcb9e2d32fca96791444511d81ee8ea2db8395aafce35398b34de66d33c
da002d4d089797ff62270b191ab3509332fe0c7dd0660473db75c6b842b5
91210054df86bb69b9ea108f08294019ff8415f50adc0ed1e2f7a7e574aa
20399a5f0a523d4388a7f8b03dabd1452a870658d69437c1e1210f4e164e
fd76c74131a1b1870019d6819b337332c61e08e7b50097d971865bc3708c
7de46416f92ab342ad49dc379392c00b69d60431f7e624ec4dfed83a3057
0956965ff9cd1b745ed888a1f1dbca6c58c818c0da2c18e700bf87b3d239
1ad355850c2a2a3a8e818b71d40ff931dfe13d9c4a131005a67709ebdb4f
185b774aec30b095b30400878d7dc74f46496549b00cbeb6e045b72cadc2
d8574af7100490b96c5501a2eefa7018d4afc19e56d33a56cec71c930aa6
9773f94cacc10f80524c896f45e63f41ee15b2392009df9f1f04260ef258
3f69d381001360c5e3e1cefe1c975801346d1626ed9644b197219a0b043d
5bc0f027524b87e3907f653f66eb2987667eeb10b563fffb0512b729e448
57c4a37fc3a56cdb89f47da1a5d246ac6fac3aa44a8eff6b3edda2d4b361
0764aaec1bad82e60c3f9badef7611f80e38fe57e52cc2184e2c729aed46
82ab0c030d076649f65cf234e02d100e3c333af164a59d940d7c8016b429
d6e01e03970727f51aa2de39c86bb1f4c25bc01bf9da64818bcfd2ff54a2
26e743337a36fc2e6dc41a04fdffde4265dafe9210e467bebb74a962a78b
dc690a3230515470ae534179fffd375481f61689be56623bd6b629a06cda
72572a48c650c51457a2791760a1ef2eddf8aa61200ae2aff28c37d4e5ac
edf10d713508cc5f8ce995b5a46f85f6b9d6c38f6d6297c34d59a411aa2b
94e193357294d7dbf6f1800a30ec6cec57b730f67f8bf706c55a8144d8b0
5a193ba6129bf5cfbdf31a152ea181e269e450cd4b101d2f3e6dcdf5f986
fd083b27bd8e1640c24eb8ea6db013fcdab3bafb647bd340b167cb17aa07
456706a63e27f38b6be247effb7219c0c8de6c6fe7568f4cec6a5a970dac
c044065cbdbfeb8ff4849ca1dda105ce0f22bcdaca113a4a3c44f3db5d07
1483494b0f2e2fcdc7e1f6964643154eafb23b001a83a7ccad1e4cb029b6
ec7976a2ecb76cec96f7f905d702689c7f2dc9544ee4e5f363d526f7a2bd
7f58aef3524e9db701a3ceafba45172dbc8b5b6a0dce105b3530f3e217fd
ac0ba4d03c1be13f35a1ec36e0b627cb9732e9795dc3d2df0793a554565e
6859040e04fb5e4c5494bc1edfb06a1f55606c0e385a3ba30334a41349e3
f582e837a3afec621e3a7aa2d1c3f8dfb39ff51f920a5c4a4e958f9ff966
14a7d0222108896bc10f0740a06a7b21b8b3422a06be276029385454823c
989edfebe655efee54834b2ab58990e5cf7aa4a40b85fc8e524685b0c09a
d5c4bd430cfb98f7182234a7cd3d81ffd4ff70522e3c2ea78587ace12a66
f53f78b2c2225fab9fb52fc45bd05b0c0894efd09c5808b480a213586785
c3d9793d741cb11a02d490d64d4fe0a9a78fe5055f7412dcfa271ebdb75d
a07689ef9ab92dc7454ccb3a54f622e01a706a6529e84e3774c7bf152741
5ce96f1fc8e7cf35ab16be12d2044db89a43367248ce4ad0f63e67addeae
47483bb59c1baaf017a4bbfc4a04c62c92a1d7da393f8f17bdc53b276738
c91df6e7259f036db219f49c0b27bade2d9af4271eb51a6b8d7fe5d2573e
f9d3c53f521aa3111a3030b16a10c2734cf9d0b87658aa307582771fa35c
d9e8ca03030843ebcf90197f69a3346cb400607af69b1af95846b5f2c503
a606ef04d407474ef0b7fa7d2edf999f8d483a47b066c42eb37a7421b2e9
be80a55d0272f6a4fef69cf95929e4eb57978536486e3e8499da9c1ef8d2
7c9e665252d4a79a2656dcea5df9980d3efbfcf687a516bb733146977ce2
072ec5dfdba187554bb04b61a1851bdb30a23a3528f3af99deb7affe1ab0
987ad2b8e3715a041d3a4be2f1ede3f3245fa9c3fce06db51c70a4d42e12
cbd0f9a701998d6325e5ba810b6434310b8bad50ef16cc1a6c18e5368dcc
89778e1d1edbec19a8dde8fedf6825617981af97b3dd9883f08740c1e232
f9e8a851dbc9c169f8c0ab80a0dbfcb7d934ef811a189ccdbca4e930e8bf
7ba17e8b5c564ee0d4547a9afd7dc2f42be7d30e15b6a4c7c53f14fd62d6
ac756946c3aed0721ff0bcc4761da83f1e23fdcffd19d58420d078e8bbd0
0d5c650a9b682dd308487edb6366c2cab71e092787421e069c0f69f84393
cf5d59105e3707e8074c3e813db33d96702b0457ebe6368c2fa3ce210680
3da57e66fac7579adfd636c3eef9c38017ea086af999e83f0730fe57ff0e
80a999b3c526e485cd1192b3423b085d2b5c85fdae887fdeec8d58cd09a3
18a968cddc6e1ecad087a2582e081496fba2a74ad05c0acb7bd2860311ed
352a71b7fe333f8e8fb6940ac6733072ffeb3782494bd36376f11e6e7842
46a538fa63ae47961102635ba4541ad3837fe2ee48ecd0383857fbc37434
8926f8947423e0e7fd5be076d5c78c5aab3ae6942060a8e18de8b8f5b04b
544d908acfc566ffbc291ac9bc6b518a904c80354b15ee8f4fa08c808a46
0a4bd014ea7107229bd9704477ef0bbcf1238c3db2a0245df98024721d3d
29d4f1f6c00902012d40477694a2851d84c5acb2c15575045b3c88444728
4478824245fde16b0987b4d9904e542a10798f09eb73ef784dc4a0cedb1c
62bafb2295bf2457473564f34e2c9396318e399e2ba97a834fce7c18af0b
ec76aec44e343b0c06b2dca5d0832461954533dd1c3cc8b87852fa2d08e3
d96e8c0a6a701235bee735a0d4ac8a034b75d3443c0ccf3c22ed85cd7e0f
97b93d5b1ba462ec7ad262494f76b6a45bac2f31ac671029a000109f660f
a2f41b7e93fb2192d875b7bf321202dd5e2e9ceb5015de7650e489ec9d8b
2db9c9ca6cc6c7ccc675cf68660ee6a4c80e2a4bf6b002e07441b5cdd318
e4245b502d37afa337a9a14267f003bee5e216ad6ce51f06a27aefe61897
52ab7a399a0109757e233c3701c90e7693040793c2c05587f57b737b3831
7a86212f5a5d52d04f7afe759ec47322f1cbad7a6eba4114ae67e2b2ec97
2beb31323f17524c24e0e7961828decd1af52d98fe6780a33d5d17dee3ad
f86fd06fe4d3dec15f9133e89d5e8e387d14b4e4cedafeea8a3f5053198e
92264168aa9eadf2da206aa68b7e32d569533b9b09d9d4b037a6e1994f76
54ab8ee199563c952935016cd1cbe52b6bc94687320ce070bf0e739e2489
1f304e27cf3eb70355367a4a06efc160d61546a2421c4f2a1a4cd17ab032
fb5c7838cac9656f4e6afd07fa72910835c4e5885b4da94c6b655a6ffbf5
e0239f17b4e6b6af5c17a4cad0304cba89a61864d0eed808ef5012f17898
73b751c1bc865dae988f488f14b46d9f39ed184668330da09259d46817c8
10ba979fb34ad48806397398b2d2e0a0b3105fabba162e26fe4a484728e2
d0cfd19644d54c3262005b0803198989999c116aaa60048a123f0a28840c
a6c5fe581e211089a79f65a7bda48bbcc1e9be385b6002c18b4ba19371ff
24344bbdb43fea2d7a9ec16091552d2d4b280b671351de62e06e5a11756b
78f1c3cbecea68ba7480bf456edf82202c045d7d8cfcce79b1180f9fc982
4e3f88d650182e00915631f27b36f6f7b4dc5a43a954c78a55f1025499e4
beb528e355c7e3294f9ca5139c3e15077d5cce0470d9d37a15b2fe0aebba
f94a6f7466f2b64a1d7729bff81959e7f113f2bf0f9b89bdc6f71a96e6bc
2a12041539be940845ad4b7b3fd9551bcfd994414ba820af8a5727e0dea7
edbabb06024a225fba223ab4b63c841af552a609f28cdd7988b95037977b
82c40899302e82e0fd8c1270907a23f98c38b9e1a8d6c06feb0355e43fb6
9867bec3c328aa6917cec2d0aa6a5cb939eaf31b408c052578c38608b6de
6dde36599439c098e7e023af3e8dc031e3d798dded96a9e93f9573abd09a
170dc670d9c1a5969e554dd1192c807e4292f7023e38b996c26a526d0904
060fa85847d7b1ea1b11df641888c6cdc1f41c49baf2a48a442e098eccf2
5325faf07b72474b60c128f51a98123ef4e30cc4d542eda6d62f9209dc8e
e87b6ab7315b649f465b87b8dbf62d32c7882264d959ec8bef841abdda49
80f86f6b77e36f35359c853ac23a3dc95f50c74e3f48813dba3eaf9453ac
1a095754b9dfc6981cd90fa8c73d12eef7309e38c11bbbb6d06f23f5e41b
c668fd764e23a9deabf4eccdb10ac1c214ccbda3660a4f64f061e3b701d3
ea2dae9e9b25a70dd9cf82587ce2b950a6b7112c1a059a0e9c264b9bc1ba
8899961d3cf5205ffafb4e6ab60b5e9d97f0ca1f894ebcffdaefc1a91e53
11ba7d4850c6b3157352bab62f334928c5c921a89d719415c7e3e1b08ac7
17ed6543f76ab9efa16899451970a25d532cf22b86df3e247efd447cc7d7
131b78a5981bc12235d42c6354870ad931cef8588eeea9bce080bee239c0
8bd9db757c39a669169d668ddf1d8bfce4e6f425c30fabdcdcadaee27e13
967f2ebe67554049c3265d3e2a33c573898e92eab7ec7d6b015d2d392733
6f63f4aa863851253fc5428d93f424ab639d108a8805d608f63084a199c7
26aba260b28642ca6bcb12d9c274ae336633eef5c19487fa8c51f065dd8d
5b84e829cbc79add783952b7b9ececcd01b03bc5e8f0f989f7de651e087d
3a3757ab547448da5e209b6bcbf2fd7bca35ce041b882e330bf6aa01f857
71a67868f5e7ac70c6ff980bf4faadf034a7142fbbe8ffb84e41b243bdca
306d6b69fd125bc48165d188c525847722aeba341eff7687e770d84ec802
865b0a46a518e6c918a33404b4487b682dbada5c911459da5f22d130e394
601ca3416b664b75e01e7b8259ad700e78d7fcef266a530b07f54ffd67d0
c32b53f03298c22b20db547e745715e9c535b24bb9c45343aefa60ce612a
2cf5f54b057e05f1275b31c71527b069092d39870f22a7bc80de3b7e4edc
ee9cdd50f61b11f3260c460054d3e2f4590f74fb54ed78eb66889137872e
a42792f2514e8707b5fafb110159dfe714f7cde8fcbaf3f77e6737aab957
f9c71e259c36ab1ca1f95d56e6d0cc71787cf7cc009d93465ffb15a8fc7c
c3ea71502598373b3c4da5d1f65d9b100b7e886d2b939b97e5fe1f58e5f2
586c38e55db55549081ed6246c74b1a12f985c92ed31202c9e022fc03058
1f0fafbfe78a3d820a4d84fbcd379a0c43071ef068d626289e3fcc4bced4
c87f29c0eac3e0da2613c151719827dc00bc7855235ed736f04bb72699d3
39f58f2b2e0578236b8fd00a5fa1c67b45050f27726a7bc64af06a466fae
70d792ed0ef5f6cdb404cf3958a8a1cd6a8da17f05d193dcc1ba1a1c0981
6321563e5a176e7b7e0b818e3e958e77fd657aa4e85ad59ce3d8ca4c8c98
d4b1e6d6bf069957ca559a166b70d4e543c90875467130e468a1dcd75137
6e33e1aadeea9e8f85bc983c058774f7043229c3317bfb069796264d0d17
82b0088ce29a5908807facaf7491e07dfe2fc4788294504bc32d21704aac
356ad557c750aaac25c3ce66358cbe556f7b1df2b0973eef73de484834bc
b8f6a4b04bee85041848a24e140e5a3434f55a63c350722858bda1c56877
c8ed7c2183af1b298e8eacbebcbb160d742a2d11b19e05210b925972e94e
37a92dd3758677d05244055dc79a44a27db56a2f4eeb6951a748500901d4
b0b19699dc763082cab189e297e1a09c47c2f33ba20ad41b86f84aa89cc5
d3d2a69ede21fcbd0d1092e8944afac81c7a19e351d511518e7c09535640
036b7ee9c00f7c0b68cb14c6d7c28403e57c78a5dc05a5bd54ea665c5650
095c041864e595a76116c43084ccf388e0334c41761a7ecb34083b4fcfbf
1d1a023e41a0d1f3064561a59cc95cd7b0b85aa1f8f91bb6d28920f6c386
c7ccfb1bca1842a974cea7b37212c8e92081a4b1a292bb6c1e8a96a3b1f4
1a29268845bbd673bca8b99103db636ca39bc069acf9edad5c44bec3b9e5
074a60865d6f7f0707d0df00a0ee7292e20648e645ffaa20a47021bd5cd8
429cb5fa3a8e768e3ffe4fe1a5357c31e092a52feba9a67f965e88e1eaf1
6768ebf18e2a8ab3713fdb2f97427d154f9ce06089e659a15324be8a755c
f2dc6f536ad1d6611c2f747a489b387635304e3320214d08dcadb87acedb
b8efccfaecbc809545086ef9cd0a05f58c21c5cb2c0b9db9dcba6c586bd5
ef4711fe2b9f1cd3a15225737566642654329107639ec1d28f5e4054b46f
b901741de8e1a5120474f1f3caf43e660bf0c2a908689e73955e06f094c5
240ea6d48ac8ef6a4e88ed27a2d7e310504eff7b7129575a5ef5ea48bfda
a494667ab9d2c72559a0e4185eae7d0600f31328c7cb1351b8e28584fe34
9f474c17575c5fcd46813aaee435f6a73da85f8fe1adaa168890b2765193
c8f791b191b84bb0b48450d03b97d62239c830
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndResource
%%EndProlog
%%BeginSetup
% THE FONT
/AGaramond-Regular findfont 1000 scalefont unitalic setfont
/italfont {
    /AGaramond-Italic findfont 1000 scalefont unitalic setfont
} def
/doTranslation {
    50 200 translate
    0.6 0.6 scale
} def

/resetPage {
    doTranslation
    resetExtremes
    resetIntc
    resetText
} def


% Measure height of path
gsave
    nulldevice
    0 0 moveto (x) true charpath flattenpath
    pathbbox /XHeight exch def pop pop pop
grestore

/TextToConsole true def
%%EndSetup
%%Page: 1 1
resetPage
gsave 20 dict begin
/CurrentFile (,-comma_depth) def
/CurrentLetter (,) def
(,) letterPath
%
% comma_depth.ps
%
(Comma depth) measureDepth stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 2 2
resetPage
gsave 20 dict begin
/CurrentFile (.-dot_size) def
/CurrentLetter (.) def
(.) letterPath
%
% .-dot_size.ps
%
pathExtremes sortByX
dup lastElt /DotRight defPoint
firstElt /DotLeft defPoint

DotRight pointbox DotLeft pointbox

(Dot size: )
DotRight xcoor DotLeft xcoor sub
stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 3 3
resetPage
gsave 20 dict begin
/CurrentFile (7-fig_height) def
/CurrentLetter (7) def
(7) letterPath
%
% 7-height.ps
%
% Height of number 7.
%
(fig_height)
measureHeight
stringOfText

count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 4 4
resetPage
gsave 20 dict begin
/CurrentFile (=-math_axis) def
/CurrentLetter (=) def
(=) letterPath
%
% =-mathaxis.ps
%
% Math axis as center of = sign.
%

(math_axis)
measureHeight
measureDepth neg
add 2 div dup 0 exch pointbox
stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 5 5
resetPage
gsave 20 dict begin
/CurrentFile (=-rule_thickness) def
/CurrentLetter (=) def
(=) letterPath
%
% =-rule_thickness.ps
%
0.5 vertSplitLine pathLineIntc sortByY 0 2 getinterval loadArray
/EqualRuleTop defPoint /EqualRuleBot defPoint
EqualRuleTop uppointbox EqualRuleBot pointbox

(Rule thickness)
EqualRuleTop ycoor EqualRuleBot ycoor sub
stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 6 6
resetPage
gsave 20 dict begin
/CurrentFile (A-A_inner_dark-serif) def
/CurrentLetter (A) def
(A) letterPath
%
% A-A_inner_dark.ps
%
flattenpath

0.3 horizSplitLine pathLineIntc sortByX 0 2 getinterval loadArray
/AInTop defPoint /ATop defPoint
0.2 horizSplitLine pathLineIntc sortByX 0 2 getinterval loadArray
/AInBot defPoint /ABot defPoint

% Find the end of the serif
{ ATop startAtPoint { 135 75 withinRange } endWhenAngle } traceSubpath
subpathEndpoint
{ startAtPoint { 225 gt } endBeforeAngle } traceSubpath
subpathEndpoint /ASerifEdge defPoint

% Line parallel to edge of A
ABot ATop subPoint 4 scalePoint ATop addPoint ATop
drawLine

ASerifEdge horizLineThrough drawLine

intersect pop /ACorner defPoint
ACorner pointbox

0.5 ABot ASerifEdge ACorner findBracket /ABracket defPoint

ABracket horizLineThrough pathLineIntc sortByX 1 get /AInnerBracket defPoint
AInnerBracket pointbox

{ ABot startAtPoint AInBot endAtPoint } traceSubpath
{ {
    { 45 90 withinRange } startWhenAngle 
    { 135 90 withinRange } endBeforeAngle
  } traceSubpath
} useSubpath
drawSubpath
{ pathExtremes } useSubpath
sortByX lastElt /AOutSlab defPoint

AInBot AInTop subPoint 5 scalePoint AInBot addPoint AInTop drawLine
AOutSlab horizLineThrough drawLine
intersect pop /AInCorner defPoint
AInCorner pointbox
AInCorner 0.2 scalePoint AOutSlab 0.8 scalePoint addPoint
vertLineThrough pathLineIntc sortByY 1 get /AInSlabTop defPoint

AOutSlab xcoor AInSlabTop ycoor /AInSlabCorner defPoint
AInSlabCorner uppointbox

AInnerBracket AInSlabCorner drawLine avgPoint /AInTriangle defPoint
AInTriangle pointbox
AInTriangle AInCorner pathLineIntc dup length 1 eq {
    loadArray /ADarkness defPoint
} {     
    pop /ADarkness AInCorner defPoint
} ifelse

ADarkness AInCorner subPoint magnitude
AInTriangle AInCorner subPoint magnitude
div
(Darkness of inner bracket) exch stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 7 7
resetPage
gsave 20 dict begin
/CurrentFile (A-A_jut-serif) def
/CurrentLetter (A) def
(A) letterPath
%
% A-A_jut.ps
%
pathExtremes sortByX firstElt /ASerif defPoint
ASerif pointbox

0.7 horizSplitLine pathLineIntc sortByX firstElt /ATop defPoint
ATop pointbox
0.3 horizSplitLine pathLineIntc sortByX firstElt /ABot defPoint
ABot pointbox

% Line parallel to edge of A
ABot ATop subPoint 4 scalePoint ATop addPoint ATop
drawLine

ASerif horizLineThrough drawLine

intersect pop /ANoSerif defPoint
ANoSerif pointbox

ANoSerif ASerif subPoint magnitude
(Jut of A) exch stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 8 8
resetPage
gsave 20 dict begin
/CurrentFile (A-A_jut_in-serif) def
/CurrentLetter (A) def
(A) letterPath
%
% A-A_jut.ps
%
0.2 horizSplitLine pathLineIntc sortByX 0 2 getinterval loadArray
/AIn defPoint /AOut defPoint

{ AOut startAtPoint AIn endAtPoint } traceSubpath
{ {
    flattenpath
    { 45 90 withinRange } startWhenAngle 
    { 135 90 withinRange } endBeforeAngle
  } traceSubpath
} useSubpath
drawSubpath
{ pathExtremes } useSubpath
sortByY lastElt /ASerif defPoint
ASerif pointbox


0.3 horizSplitLine pathLineIntc sortByX 1 get /ATop defPoint
ATop pointbox
0.2 horizSplitLine pathLineIntc sortByX 1 get /ABot defPoint
ABot pointbox

% Line parallel to edge of A
ABot ATop subPoint 4 scalePoint ATop addPoint ATop
drawLine

ASerif horizLineThrough drawLine

intersect pop /ANoSerif defPoint
ANoSerif pointbox

ANoSerif ASerif subPoint magnitude
(Inner jut of A) exch stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 9 9
resetPage
gsave 20 dict begin
/CurrentFile (A-A_outer_bracket-serif) def
/CurrentLetter (A) def
(A) letterPath
%
% A-A_outer_bracket.ps
%
flattenpath

0.3 horizSplitLine pathLineIntc sortByX firstElt /ATop defPoint
ATop pointbox
0.2 horizSplitLine pathLineIntc sortByX firstElt /ABot defPoint
ABot pointbox

% Find the end of the serif
{ ATop startAtPoint { 135 75 withinRange } endWhenAngle } traceSubpath
subpathEndpoint
{ startAtPoint { 225 gt } endBeforeAngle } traceSubpath
subpathEndpoint /ASerifEdge defPoint
ASerifEdge pointbox

% Line parallel to edge of A
ABot ATop subPoint 4 scalePoint ATop addPoint ATop
drawLine

ASerifEdge horizLineThrough drawLine

intersect pop /ACorner defPoint
ACorner pointbox

0.5 ABot ASerifEdge ACorner findBracket /ABracket defPoint

(Outer bracket of A, adjusted for dark) ABracket ycoor 1.5 div stringOfText

count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 10 10
resetPage
gsave 20 dict begin
/CurrentFile (A-apex_corr) def
/CurrentLetter (A) def
(A) letterPath
%
% A-hair.ps
%

% Get the hair width (for use later). Note: this isn't the _real_ hair width; it
% is the hair width determined by a straight cross-section of the left stem.
0.7 horizSplitLine pathLineIntc sortByX dup firstElt /ALeftOuter defPoint
1 get /ALeftInner defPoint
ALeftOuter pointbox ALeftInner pointbox
ALeftOuter ALeftInner subPoint magnitude /AHair exch def

% Find points that define the outer triangle of the letter
0.7 horizSplitLine pathLineIntc sortByX lastElt /ARightOuter defPoint
0.8 horizSplitLine pathLineIntc sortByX dup
firstElt /ALeftLower defPoint lastElt /ARightLower defPoint

ARightOuter pointbox ALeftLower pointbox ARightLower pointbox

% Extend the outer triangle lines upward
ALeftLower ALeftOuter subPoint 5 scalePoint ALeftOuter addPoint
/ALeftUpper defPoint
ARightLower ARightOuter subPoint 5 scalePoint ARightOuter addPoint
/ARightUpper defPoint

% Find the top point of the A
pathExtremes sortByY lastElt /ATop defPoint

mark ATop horizLineThrough drawLine cleartomark

% Intersect each of the diagonal triangle lines with the top line
ALeftUpper ALeftLower drawLine ATop horizLineThrough intersect pop
/LeftIntersection defPoint
ARightUpper ARightLower drawLine ATop horizLineThrough intersect pop
/RightIntersection defPoint

% The apex correction is the distance between the intersection points minus the
% hair width
RightIntersection xcoor LeftIntersection xcoor sub AHair sub

(Apex correction) exch stringOfText

count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 11 11
resetPage
gsave 20 dict begin
/CurrentFile (A-apex_o) def
/CurrentLetter (A) def
(A) letterPath
%
% A-apex_o.ps
%
% Apex measured as 2/3 the height of the A overshoot. This is consistent with
% the A in Computer Modern so that it works with Delta, Lambda, and gradient.
%
measureHeight /AHeight exch def

gsave
(I) letterPath
measureHeight /IHeight exch def
grestore

(Apex overshoot \(A\)) AHeight IHeight sub 2 mul 3 div stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 12 12
resetPage
gsave 20 dict begin
/CurrentFile (A-cap_hair) def
/CurrentLetter (A) def
(A) letterPath
%
% A-hair.ps
%
0.7 horizSplitLine pathLineIntc sortByX firstElt /ALeftOuter defPoint
ALeftOuter ALeftOuter pathAngle pop perpThroughPoint
pathLineIntc sortByX 1 get /ALeftInner defPoint
ALeftOuter pointbox ALeftInner pointbox

ALeftOuter ALeftInner subPoint magnitude
(Uppercase hair) exch stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 13 13
resetPage
gsave 20 dict begin
/CurrentFile (A-u) def
/CurrentLetter (A) def
(A) letterPath
%
% n-u.ps
%
% Unit is 1/10 width of "n".
%
pathExtremes sortByX dup firstElt /oLeft defPoint lastElt /oRight defPoint
(Unit based on A) oRight xcoor oLeft xcoor sub 12 div stringOfText

count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 14 14
resetPage
gsave 20 dict begin
/CurrentFile (C-superness) def
/CurrentLetter (C) def
(C) letterPath
%
% C-superness.ps
%

pathExtremes /CExtremes exch def

CExtremes sortByX firstElt /CLeft defPoint

CExtremes sortByY firstElt /CBot defPoint

CBot CLeft true findSupernessPoints findSuperness

(Superness, C bottom left) exch stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 15 15
resetPage
gsave 20 dict begin
/CurrentFile (C-superpull-alt) def
/CurrentLetter (C) def
(C) letterPath
%
% C-superpull.ps
%
pathExtremes /CExtremes exch def

CExtremes sortByX firstElt /CLeft defPoint

CExtremes sortByY lastElt /CTop defPoint

CTop CLeft true findSupernessPoints
6 copy /COuterSuperPoint defPoint pop pop /CCenter defPoint
findSuperness /COuterSuperness exch def

% The inner points from which superness are calculated are arranged so that the
% center point for both superness calculations is identical.
CCenter CCenter xcoor pathUR ycoor 5 add % Push the top point up a bit
pathLineIntc sortByY revArray 1 get /CInnerTop defPoint
CCenter pathLL xcoor 5 sub CCenter ycoor % Push the left point left a bit
pathLineIntc sortByX 1 get /CInnerLeft defPoint
CInnerTop pointbox CInnerLeft pointbox

CInnerTop CInnerLeft false findSupernessPoints
/CInnerSuperPoint defPoint /CInnerCorner defPoint /CInnerCenter defPoint
CInnerCorner COuterSuperness scalePoint
CInnerCenter 1 COuterSuperness sub scalePoint
addPoint
/CInnerSuperPointExpected defPoint

(Superpull)
CInnerSuperPointExpected CInnerSuperPoint subPoint magnitude
CInnerSuperPointExpected COuterSuperPoint subPoint magnitude
div
stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 16 16
resetPage
gsave 20 dict begin
/CurrentFile (C-superpull) def
/CurrentLetter (C) def
(C) letterPath
%
% C-superpull.ps
%
pathExtremes /CExtremes exch def

CExtremes sortByX firstElt /CLeft defPoint

CExtremes sortByY firstElt /CBot defPoint

CBot CLeft true findSupernessPoints
6 copy /COuterSuperPoint defPoint pop pop /CCenter defPoint
findSuperness /COuterSuperness exch def

% The inner points from which superness are calculated are arranged so that the
% center point for both superness calculations is identical.
CCenter CCenter xcoor pathLL ycoor 5 sub % Push the bottom point down a bit
pathLineIntc sortByY 1 get /CInnerBot defPoint
CCenter pathLL xcoor 5 sub CCenter ycoor % Push the left point left a bit
pathLineIntc sortByX 1 get /CInnerLeft defPoint
CInnerBot uppointbox CInnerLeft pointbox

CInnerBot CInnerLeft false findSupernessPoints
/CInnerSuperPoint defPoint /CInnerCorner defPoint /CInnerCenter defPoint
CInnerCorner COuterSuperness scalePoint
CInnerCenter 1 COuterSuperness sub scalePoint
addPoint
/CInnerSuperPointExpected defPoint

(Superpull)
CInnerSuperPointExpected CInnerSuperPoint subPoint magnitude
CInnerSuperPointExpected COuterSuperPoint subPoint magnitude
div
stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 17 17
resetPage
gsave 20 dict begin
/CurrentFile (E-arm_slab) def
/CurrentLetter (E) def
(E) letterPath
%
% E-arm_slab.ps
%
0.5 vertSplitLine pathLineIntc sortByY revArray 0 2 getinterval loadArray
/eArmBot defPoint /eArmTop defPoint
eArmBot pointbox eArmTop pointbox

(Arm thickness) eArmTop ycoor eArmBot ycoor sub stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 18 18
resetPage
gsave 20 dict begin
/CurrentFile (E-beak_darkness-serif) def
/CurrentLetter (E) def
(E) letterPath
%
% E-beakdark.ps
%
flattenpath

0.5 vertSplitLine pathLineIntc sortByY revArray /EVertSplit exch def

EVertSplit 0 2 getinterval loadArray
/ETopBot defPoint /ETopTop defPoint

{ ETopBot startAtPoint ETopTop endAtPoint } traceSubpath
{ pathExtremes } useSubpath sortByY firstElt /EBeakBot defPoint
EBeakBot pointbox

0.75 horizSplitLine pathLineIntc sortByX 0 2 getinterval
dup 1 get /EStemRight defPoint
{ } forallPoint addPoint 2 div exch 2 div exch /EStemMid defPoint
EStemMid pointbox
EStemMid vertLineThrough drawLine
ETopBot horizLineThrough drawLine
intersect pop % Must be true
/EStemTop defPoint
EStemTop pointbox

EStemTop 0.2 scalePoint EBeakBot 0.8 scalePoint addPoint
horizLineThrough pathLineIntc sortByX revArray 1 get /EBeakOne defPoint
EBeakOne ltpointbox

% Find the beak jut angle, which we will duplicate inside the beak
{ ETopBot startAtPoint ETopTop endAtPoint } traceSubpath
{ {
    { 75 90 withinRange } startWhenAngle
    { 165 90 withinRange } endBeforeAngle
  } traceSubpath
} useSubpath
drawSubpath
{ pathExtremes } useSubpath
sortByY dup firstElt /EBeakBot defPoint lastElt /EBeakTop defPoint
EBeakBot pointbox EBeakTop uppointbox
EBeakTop EBeakBot subPoint /EBeakDiff defPoint


EBeakDiff 2 scalePoint EBeakOne addPoint
EBeakDiff -1 scalePoint EBeakOne addPoint
4 copy
drawLine
EStemTop horizLineThrough intersect pop /EBeakCorner defPoint
EBeakBot horizLineThrough intersect pop /EBeakTip defPoint
EBeakCorner uppointbox EBeakTip pointbox

EBeakCorner EStemTop avgPoint /EArmMid defPoint EArmMid pointbox

EArmMid EBeakTip drawLine avgPoint /ETriangle defPoint ETriangle pointbox
ETriangle EBeakCorner drawLine pathLineIntc dup length 0 gt {
    sortByY lastElt /EBeakPoint defPoint EBeakPoint pointbox
    EBeakPoint EBeakCorner subPoint magnitude
    ETriangle EBeakCorner subPoint magnitude div
} { 0 } ifelse

(Beak darkness) exch stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 19 19
resetPage
gsave 20 dict begin
/CurrentFile (E-beak_jut-serif) def
/CurrentLetter (E) def
(E) letterPath
%
% E-beakjut.ps
%
flattenpath
0.5 vertSplitLine pathLineIntc sortByY /EVertSplit exch def

EVertSplit 4 2 getinterval loadArray
/ETopTop defPoint /ETopBot defPoint
{ ETopBot startAtPoint ETopTop endAtPoint } traceSubpath
{ {
    { 75 90 withinRange } startWhenAngle
    { 165 90 withinRange } endBeforeAngle
  } traceSubpath
} useSubpath
drawSubpath
{ pathExtremes } useSubpath
sortByY dup firstElt /EBeakBot defPoint lastElt /EBeakTop defPoint
EBeakBot pointbox EBeakTop uppointbox

(Beak jut)
EBeakBot xcoor EBeakTop xcoor sub
stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 20 20
resetPage
gsave 20 dict begin
/CurrentFile (E-beak_withbar-serif) def
/CurrentLetter (E) def
(E) letterPath
%
% E-beak_withbar.ps
%
flattenpath

0.5 vertSplitLine pathLineIntc sortByY /EVertSplit exch def

EVertSplit 4 2 getinterval loadArray
/ETopTop defPoint /ETopBot defPoint
{ ETopBot startAtPoint ETopTop endAtPoint } traceSubpath
{ pathExtremes } useSubpath
sortByY dup
firstElt /EBeakBot defPoint lastElt /EBeakTop defPoint
EBeakBot pointbox EBeakTop uppointbox

(Beak height)
EBeakTop ycoor EBeakBot ycoor sub
stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 21 21
resetPage
gsave 20 dict begin
/CurrentFile (E-cap_bar) def
/CurrentLetter (E) def
(E) letterPath
%
% E-bar.ps
%
flattenpath

0.5 vertSplitLine pathLineIntc sortByY /EVertSplit exch def
EVertSplit 2 2 getinterval loadArray
/EBarTop defPoint /EBarBot defPoint

0.2 horizSplitLine pathLineIntc sortByX 1 get
{ startAtPoint EBarBot endAtPoint } traceSubpath
drawSubpath
{ pathExtremes } useSubpath sortByY lastElt /EBarBot defPoint
{ EBarTop startAtPoint { 170 lt } endWhenAngle } traceSubpath
drawSubpath
{ pathExtremes } useSubpath sortByY firstElt /EBarTop defPoint
EBarTop uppointbox EBarBot pointbox

(Capital bar)
EBarTop ycoor EBarBot ycoor sub
stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 22 22
resetPage
gsave 20 dict begin
/CurrentFile (E-hair-serif) def
/CurrentLetter (E) def
(E) letterPath
%
% E-beakdark.ps
%
flattenpath

0.5 vertSplitLine pathLineIntc sortByY /EVertSplit exch def

EVertSplit 4 2 getinterval loadArray
/ETopTop defPoint /ETopBot defPoint
ETopTop uppointbox ETopBot pointbox

{ ETopBot startAtPoint ETopTop endAtPoint } traceSubpath
{ pathExtremes } useSubpath sortByY firstElt /EBeakBot defPoint
EBeakBot pointbox

ETopBot 0.2 scalePoint EBeakBot 0.8 scalePoint addPoint
horizLineThrough pathLineIntc sortByX revArray 0 2 getinterval loadArray
/EBeakInside defPoint /EBeakOutside defPoint
EBeakOutside rtpointbox EBeakInside ltpointbox

(Hair by beak thickness)
EBeakOutside xcoor EBeakInside xcoor sub
stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 23 23
resetPage
gsave 20 dict begin
/CurrentFile (F-F_jut-serif) def
/CurrentLetter (F) def
(F) letterPath
%
% F-F_jut-serif.ps
%
pathExtremes sortByX firstElt /FLeftSerif defPoint
FLeftSerif pointbox

0.5 horizSplitLine pathLineIntc sortByX firstElt /FLeftStem defPoint

(Leftward jut of F) FLeftStem xcoor FLeftSerif xcoor sub stringOfText

count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 24 24
resetPage
gsave 20 dict begin
/CurrentFile (H-H_jut-serif) def
/CurrentLetter (H) def
(H) letterPath
%
% H-H_jut-serif.ps
%
0.5 horizSplitLine pathLineIntc sortByX firstElt /HStemLeft defPoint

pathExtremes sortByX firstElt /HJutLeft defPoint

(H outer jut) HStemLeft xcoor HJutLeft xcoor sub stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 25 25
resetPage
gsave 20 dict begin
/CurrentFile (H-cap_bar) def
/CurrentLetter (H) def
(H) letterPath
%
% H-bar.ps
%
0.5 vertSplitLine pathLineIntc sortByY 0 2 getinterval loadArray
/HBarTop defPoint /HBarBot defPoint
HBarTop uppointbox HBarBot pointbox

(H bar) HBarTop ycoor HBarBot ycoor sub stringOfText

count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 26 26
resetPage
gsave 20 dict begin
/CurrentFile (H-cap_serif_space) def
/CurrentLetter (H) def
(H) letterPath
%
% H-cap_serif_space.ps
%
% Space between the edge of the stem of a capital letter and the vertical
% sidebearings.
%
0.5 horizSplitLine pathLineIntc sortByX firstElt /HLeft defPoint
HLeft pointbox
0 HLeft ycoor pointbox

(Sidebearing distance) HLeft xcoor stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 27 27
resetPage
gsave 20 dict begin
/CurrentFile (I-bracket-serif) def
/CurrentLetter (I) def
(I) letterPath
%
% l-bracket-alt.ps
%
0.5 vertSplitLine pathLineIntc sortByY firstElt /lBottomPoint defPoint
0.5 horizSplitLine pathLineIntc sortByX lastElt /lRightPoint defPoint
lBottomPoint pointbox
lRightPoint rtpointbox

{ lBottomPoint startAtPoint lRightPoint endAtPoint } traceSubpath
{ {
    flattenpath
    { 45 90 withinRange } startWhenAngle 
    { 135 90 withinRange } endBeforeAngle
  } traceSubpath
} useSubpath
drawSubpath
{ pathExtremes } useSubpath
sortByY lastElt /lTopSlab defPoint
lTopSlab uppointbox

lRightPoint vertLineThrough drawLine lTopSlab horizLineThrough drawLine
intersect pop /lSerifCorner defPoint

lTopSlab lSerifCorner subPoint exch lSerifCorner addPoint
/lBracketPoint defPoint

1 3 div lBracketPoint lTopSlab lSerifCorner findBracket
/lBracketPoint defPoint

(Lowercase bracket \(alt\)) lBracketPoint ycoor stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 28 28
resetPage
gsave 20 dict begin
/CurrentFile (I-cap_height) def
/CurrentLetter (I) def
(I) letterPath
%
% I-height.ps
%
% Height of capital "I".
%
(cap_height)
measureHeight
stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 29 29
resetPage
gsave 20 dict begin
/CurrentFile (I-cap_jut-serif) def
/CurrentLetter (I) def
(I) letterPath
%
% I-cap_jut.ps
%
0.5 horizSplitLine pathLineIntc sortByX
{ 2 copy pointbox } forallPoint
/IStemRight defPoint /IStemLeft defPoint

{ IStemLeft startAtPoint IStemRight endAtPoint } traceSubpath
drawSubpath
{ pathExtremes } useSubpath
sortByX lastElt loadArray
2 copy rtpointbox
xcoor IStemRight xcoor sub 1.05 div % Correction derived from CM value
(Uppercase jut) exch stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 30 30
resetPage
gsave 20 dict begin
/CurrentFile (I-cap_stem) def
/CurrentLetter (I) def
(I) letterPath
%
% I-stem.ps
%
% Stem width of "I".
%
0.5 horizSplitLine pathLineIntc sortByX 0 2 getinterval
{ 2 copy pointbox } forallPoint
subPoint magnitude
(cap_stem) exch stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 31 31
resetPage
gsave 20 dict begin
/CurrentFile (I-crisp-serif) def
/CurrentLetter (I) def
(I) letterPath
%
% I-crisp.ps
%
pathExtremes sortByY firstElt /lLowestPoint defPoint

0.5 vertSplitLine pathLineIntc sortByY firstElt /lBottomPoint defPoint
0.5 horizSplitLine pathLineIntc sortByX lastElt /lRightPoint defPoint

{
    lBottomPoint startAtPoint
    lRightPoint endAtPoint
} traceSubpath
drawSubpath
{ pathExtremes } useSubpath
sortByX lastElt /lRightSlab defPoint
lRightSlab rtpointbox

lRightSlab vertLineThrough drawLine
lLowestPoint horizLineThrough drawLine
intersect pop /lCrispOuter defPoint
lCrispOuter 45 perpThroughPoint pathLineIntc sortByY firstElt
/lCrispPoint defPoint

% The distance between lCrispOuter and lCrispPoint = crisp * (sqrt(2) - 1).
lCrispOuter lCrispPoint subPoint magnitude
2 sqrt 1 sub div 2 mul 0 max
(Crisp) exch stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 32 32
resetPage
gsave 20 dict begin
/CurrentFile (I-dish-serif) def
/CurrentLetter (I) def
(I) letterPath
%
% l-dish.ps
%
0.5 vertSplitLine pathLineIntc sortByY firstElt /lBottomPoint defPoint
%0.5 horizSplitLine pathLineIntc sortByX lastElt /lRightPoint defPoint
lBottomPoint pointbox
%lRightPoint rtpointbox

%{ lBottomPoint startAtPoint lRightPoint endAtPoint } traceSubpath
%{ {
%    flattenpath
%    { 45 90 withinRange } startWhenAngle 
%    { 135 90 withinRange } endBeforeAngle
%  } traceSubpath
%} useSubpath
%drawSubpath
%{ pathExtremes } useSubpath
%sortByY dup firstElt /lBotSlab defPoint
%lastElt /lTopSlab defPoint
%lBotSlab pointbox
%lTopSlab uppointbox

pathExtremes sortByY firstElt /lLowestPoint defPoint
lLowestPoint pointbox

(Dish)
lBottomPoint ycoor
lLowestPoint ycoor sub
0 max
stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 33 33
resetPage
gsave 20 dict begin
/CurrentFile (I-slab-serif) def
/CurrentLetter (I) def
(I) letterPath
%
% l-slab.ps
%
% Thickness of serif of "l"
%
0.5 vertSplitLine pathLineIntc sortByY firstElt /lBottomPoint defPoint
0.5 horizSplitLine pathLineIntc sortByX lastElt /lRightPoint defPoint
lBottomPoint pointbox
lRightPoint rtpointbox

% Find the place where the top of the serif begins.
{ lBottomPoint startAtPoint lRightPoint endAtPoint } traceSubpath
{ {
    flattenpath
    { 45 90 withinRange } startWhenAngle 
    { 135 90 withinRange } endBeforeAngle
  } traceSubpath
} useSubpath
drawSubpath
{ pathExtremes } useSubpath
sortByY lastElt /lTopSlab defPoint
lTopSlab uppointbox

% Take a weighted average of lRightPoint and lTopSlab, ratio 4:1.
lTopSlab 0.8 scalePoint lRightPoint 0.2 scalePoint addPoint
vertLineThrough pathLineIntc sortByY 0 2 getinterval loadArray
/lSlabTop defPoint /lSlabBot defPoint

lSlabTop uppointbox lSlabBot pointbox

(Serif thickness)
lSlabTop ycoor
lSlabBot ycoor sub
stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 34 34
resetPage
gsave 20 dict begin
/CurrentFile (O-O_superness) def
/CurrentLetter (O) def
(O) letterPath
%
% O-superness.ps
%

pathExtremes /OExtremes exch def

OExtremes sortByX firstElt /OLeft defPoint
OExtremes sortByX lastElt /ORight defPoint
OExtremes sortByY firstElt /OBot defPoint
OExtremes sortByY lastElt /OTop defPoint

OBot OLeft true findSupernessPoints findSuperness
(Superness, O bottom left) exch stringOfText

OTop OLeft true findSupernessPoints findSuperness
(Superness, O top left) exch stringOfText

OBot ORight true findSupernessPoints findSuperness
(Superness, O bottom right) exch stringOfText

OTop ORight true findSupernessPoints findSuperness
(Superness, O bottom right) exch stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 35 35
resetPage
gsave 20 dict begin
/CurrentFile (O-cap_curve-alt) def
/CurrentLetter (O) def
(O) letterPath
%
% O-curve-alt.ps
%
pathLL /oBot exch def /oLeft exch def
pathUR /oTop exch def /oRight exch def

/oCurve 0 def

oBot oTop oBot sub 30 div oTop {
    dup oBot sub oTop exch sub oRight exch 3 -1 roll oLeft exch
    pathLineIntc sortByX revArray dup length 4 ge {
	dup firstElt /oOuter defPoint 1 get /oInner defPoint
	oOuter ltpointbox oInner rtpointbox
	oOuter oInner subPoint magnitude oCurve gt {
	    /oCurve oOuter oInner subPoint magnitude def
	} if
    } {
	pop
    } ifelse
} for

(Lowercase curve \(alt\)) oCurve stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 36 36
resetPage
gsave 20 dict begin
/CurrentFile (O-cap_curve) def
/CurrentLetter (O) def
(O) letterPath
%
% O-curve.ps
%

pathLL /oBot exch def /oLeft exch def
pathUR /oTop exch def /oRight exch def

/oCurve 0 def

oBot oTop oBot sub 30 div oTop {
    dup oBot sub oTop exch sub oRight exch 3 -1 roll oLeft exch
    pathLineIntc sortByX dup length 4 ge {
	dup firstElt /oOuter defPoint 1 get /oInner defPoint
	oOuter ltpointbox oInner rtpointbox
	oOuter oInner subPoint magnitude oCurve gt {
	    /oCurve oOuter oInner subPoint magnitude def
	} if
    } {
	pop
    } ifelse
} for

(Lowercase curve) oCurve stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 37 37
resetPage
gsave 20 dict begin
/CurrentFile (O-o) def
/CurrentLetter (O) def
(O) letterPath
%
% O-overshoot.ps
%
% Overshoot of capital O. We use the top overshoot because that reflects the
% usage of capital overshoot in the uppercase Greek letters Omega and Upsilon.
%

measureHeight /OHeight exch def

gsave
(I) letterPath
measureHeight /IHeight exch def
grestore

0 drawHorizLine

(Top capital overshoot) OHeight IHeight sub stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 38 38
resetPage
gsave 20 dict begin
/CurrentFile (P-cap_curve) def
/CurrentLetter (P) def
(P) letterPath
%
% P-curve.ps
%
pathExtremes sortByX lastElt /PRight defPoint
PRight pointbox
PRight horizLineThrough pathLineIntc sortByX revArray 1 get /PRightIn defPoint
PRightIn pointbox

(Curve) PRight xcoor PRightIn xcoor sub stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 39 39
resetPage
gsave 20 dict begin
/CurrentFile (S-cap_ess) def
/CurrentLetter (S) def
(S) letterPath
%
% S-cap_ess.ps
%
0.5 vertSplitLine
pathLineIntc sortByY
2 2 getinterval loadArray
/STopPoint defPoint /SBotPoint defPoint
STopPoint pathAngle pop 90 add
dup cos exch sin 500 scalePoint STopPoint addPoint
STopPoint pathLineIntc sortByY
% Check if the last element is actually sTopPoint
dup lastElt loadArray STopPoint 5 eqPoint {
    % If so, get the second to last one.
    revArray 1 get
} {
    lastElt
} ifelse
/STopPerpPoint defPoint

(Uppercase ess) STopPoint STopPerpPoint subPoint magnitude stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 40 40
resetPage
gsave 20 dict begin
/CurrentFile (T-cap_bar) def
/CurrentLetter (T) def
(T) letterPath
%
% T-bar.ps
%
0.2 horizSplitLine pathLineIntc sortByX 0 2 getinterval loadArray
/TStemRight defPoint /TStemLeft defPoint
TStemRight pointbox TStemLeft pointbox

{
    TStemRight startAtPoint
    { dup 0 eq exch 270 gt or } endWhenAngle
} traceSubpath
drawSubpath
{ pathExtremes } useSubpath sortByY lastElt /TRightBarBot defPoint
TRightBarBot pointbox

TRightBarBot vertLineThrough pathLineIntc sortByY lastElt /TRightBarTop defPoint
TRightBarTop uppointbox

(T bar) TRightBarTop ycoor TRightBarBot ycoor sub stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 41 41
resetPage
gsave 20 dict begin
/CurrentFile (V-cap_hair) def
/CurrentLetter (V) def
(V) letterPath
%
% V-hair.ps
%
0.5 horizSplitLine pathLineIntc
sortByX 3 get loadArray
2 copy pathAngle {
    perpThroughPoint
	resetIntc
    pathLineIntc sortByX revArray
    0 2 getinterval { 2 copy pointbox } forallPoint
    subPoint magnitude
    (Uppercase hair) exch stringOfText
} {
    pop pop
} ifelse
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 42 42
resetPage
gsave 20 dict begin
/CurrentFile (V-cap_stem) def
/CurrentLetter (V) def
(V) letterPath
%
% V-stem.ps
%
0.5 horizSplitLine pathLineIntc
sortByX 0 get loadArray
2 copy pathAngle {
    perpThroughPoint
	resetIntc
    pathLineIntc sortByX
    0 2 getinterval { 2 copy pointbox } forallPoint
    subPoint magnitude
    (Uppercase stem (thinned)) exch stringOfText
} {
    pop pop
} ifelse
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 43 43
resetPage
gsave 20 dict begin
/CurrentFile (V-tiny) def
/CurrentLetter (V) def
(V) letterPath
%
% v-tiny.ps
%
0.06 horizSplitLine pathLineIntc sortByX dup
firstElt /vLStrokeOne defPoint lastElt /vRStrokeOne defPoint
0.03 horizSplitLine pathLineIntc sortByX dup
firstElt /vLStrokeTwo defPoint lastElt /vRStrokeTwo defPoint

/leftDiagLine {
    vLStrokeTwo vLStrokeOne subPoint 1000 scalePoint vLStrokeTwo addPoint
    vLStrokeOne 
} def
/rightDiagLine {
    vRStrokeTwo vRStrokeOne subPoint 1000 scalePoint vRStrokeTwo addPoint
    vRStrokeOne
} def
/bottomLine {
    pathLL horizLineThrough
} def

mark
leftDiagLine drawLine
rightDiagLine drawLine
bottomLine drawLine
cleartomark

leftDiagLine bottomLine
intersect pop % Assert true
/vStrokeCorner defPoint
vStrokeCorner pointbox

% What is the angle of each of the lines? Then we can draw the angle bisector.
/vLAngle leftDiagLine lineAngle def
/vRAngle bottomLine lineAngle def

% This calculates the angle of the angle bisector line
vLAngle vRAngle sub 2 div vRAngle add

% Make a line of this angle through the V's corner
dup cos exch sin /vBisectorOffset defPoint
vBisectorOffset 1000 scalePoint vStrokeCorner addPoint
vBisectorOffset -100 scalePoint vStrokeCorner addPoint

pathLineIntc dup length 0 gt {
    sortByY firstElt /vCorner defPoint
    vCorner uppointbox
    vStrokeCorner vCorner vLAngle vRAngle sub penDiameter
} {
    pop 0
} ifelse

(Curvature of v apex) exch stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 44 44
resetPage
gsave 20 dict begin
/CurrentFile (Y-cap_hair) def
/CurrentLetter (Y) def
(Y) letterPath
%
% Y-hair.ps
%
0.7 horizSplitLine pathLineIntc sortByX lastElt /YLeftOuter defPoint
YLeftOuter YLeftOuter pathAngle pop perpThroughPoint
pathLineIntc sortByX revArray 1 get /YLeftInner defPoint
YLeftOuter pointbox YLeftInner pointbox

YLeftOuter YLeftInner subPoint magnitude
(Uppercase hair) exch stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 45 45
resetPage
gsave 20 dict begin
/CurrentFile ([-body_height) def
/CurrentLetter ([) def
([) letterPath
%
% (-body_height.ps
%
% ) to match it...
measureHeight /parenHeight exch def
(d) letterPath measureHeight /ascHeight exch def

parenHeight ascHeight le {
    ascHeight 1 add
} {
    parenHeight
} ifelse

(Body height) exch stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 46 46
resetPage
gsave 20 dict begin
/CurrentFile (b-u) def
/CurrentLetter (b) def
(b) letterPath
%
% n-u.ps
%
% Unit is 1/10 width of "n".
%
pathExtremes sortByX lastElt /bRight defPoint
0.5 horizSplitLine pathLineIntc sortByX firstElt /bLeft defPoint
(Unit based on b) bRight xcoor bLeft xcoor sub 7.5 div stringOfText

count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 47 47
resetPage
gsave 20 dict begin
/CurrentFile (d-stem) def
/CurrentLetter (d) def
(d) letterPath
%
% d-stem.ps
%
0 XHeight 2 div horizLineThrough pathLineIntc sortByX revArray 0 2 getinterval
loadArray /dStemLeft defPoint /dStemRight defPoint 
dStemRight pointbox dStemLeft pointbox

(Lowercase stem) dStemRight xcoor dStemLeft xcoor sub stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 48 48
resetPage
gsave 20 dict begin
/CurrentFile (i-slant-ital) def
/CurrentLetter (i) def
italfont
(i) letterPath
%
% i-slant-ital.ps
%
currentfont /FontInfo get /ItalicAngle get
neg dup sin exch cos div

(Italic angle) exch stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 49 49
resetPage
gsave 20 dict begin
/CurrentFile (k-bar_height) def
/CurrentLetter (k) def
(k) letterPath
%
% k-barheight.ps
%
% bar_height
%
% This is tricky, since the bar of the "e" is an especially bad indicator! We
% will use the join of the "k" instead.
%
flattenpath

% This line should be well below the junction point.
0.1 horizSplitLine pathLineIntc sortByX
1 get /kInnerLowerBar defPoint
{ kInnerLowerBar startAtPoint { 270 gt } endWhenAngle } traceSubpath
drawSubpath
{ pathExtremes } useSubpath sortByY lastElt /kJoinBot defPoint
kJoinBot pointbox

0 XHeight 0.9 mul horizLineThrough pathLineIntc sortByX
2 get /kInnerUpperStroke defPoint
{
    kInnerUpperStroke startAtPoint
    { 45 90 withinRange } endWhenAngle
} traceSubpath
drawSubpath
{ pathExtremes } useSubpath sortByY firstElt /kJoinTop defPoint
kJoinTop uppointbox

(bar_height)
kJoinTop ycoor kJoinBot ycoor add 2 div
stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 50 50
resetPage
gsave 20 dict begin
/CurrentFile (l-asc_height) def
/CurrentLetter (l) def
(l) letterPath
%
% l-asc.ps
%
% Ascender height of "l".
%
(asc_height)
measureHeight
stringOfText

count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 51 51
resetPage
gsave 20 dict begin
/CurrentFile (l-bracket-serif) def
/CurrentLetter (l) def
(l) letterPath
%
% l-bracket-alt.ps
%
0.5 vertSplitLine pathLineIntc sortByY firstElt /lBottomPoint defPoint
0.5 horizSplitLine pathLineIntc sortByX lastElt /lRightPoint defPoint
lBottomPoint pointbox
lRightPoint rtpointbox

{ lBottomPoint startAtPoint lRightPoint endAtPoint } traceSubpath
{ pathExtremes } useSubpath sortByX lastElt /lRightJut defPoint
lRightJut rtpointbox

lRightPoint 0.2 scalePoint lRightJut 0.8 scalePoint addPoint
vertLineThrough pathLineIntc sortByY 1 get /lSlabTop defPoint
lSlabTop uppointbox

lRightJut xcoor lSlabTop ycoor /lSlabCorner defPoint

lRightPoint xcoor lSlabCorner ycoor /lCorner defPoint

lSlabCorner uppointbox
lCorner pointbox

1 3 div lRightPoint lSlabCorner lCorner findBracket
/lBracketPoint defPoint

(Lowercase bracket \(alt\)) lBracketPoint ycoor stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 52 52
resetPage
gsave 20 dict begin
/CurrentFile (l-crisp-serif) def
/CurrentLetter (l) def
(l) letterPath
%
% l-crisp.ps
%
pathExtremes sortByY firstElt /lLowestPoint defPoint

0.5 vertSplitLine pathLineIntc sortByY firstElt /lBottomPoint defPoint
0.5 horizSplitLine pathLineIntc sortByX lastElt /lRightPoint defPoint

{
    lBottomPoint startAtPoint
    lRightPoint endAtPoint
} traceSubpath
drawSubpath
{ pathExtremes } useSubpath
sortByX lastElt /lRightSlab defPoint
lRightSlab rtpointbox

lRightSlab vertLineThrough drawLine
lLowestPoint horizLineThrough drawLine
intersect pop /lCrispOuter defPoint
lCrispOuter 45 perpThroughPoint pathLineIntc sortByY firstElt
/lCrispPoint defPoint

% The distance between lCrispOuter and lCrispPoint = crisp * (sqrt(2) - 1).
lCrispOuter lCrispPoint subPoint magnitude
2 sqrt 1 sub div 2 mul 0 max
(Crisp) exch stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 53 53
resetPage
gsave 20 dict begin
/CurrentFile (l-dish-serif) def
/CurrentLetter (l) def
(l) letterPath
%
% l-dish.ps
%
0.5 vertSplitLine pathLineIntc sortByY firstElt /lBottomPoint defPoint
%0.5 horizSplitLine pathLineIntc sortByX lastElt /lRightPoint defPoint
lBottomPoint pointbox
%lRightPoint rtpointbox

%{ lBottomPoint startAtPoint lRightPoint endAtPoint } traceSubpath
%{ {
%    flattenpath
%    { 45 90 withinRange } startWhenAngle 
%    { 135 90 withinRange } endBeforeAngle
%  } traceSubpath
%} useSubpath
%drawSubpath
%{ pathExtremes } useSubpath
%sortByY dup firstElt /lBotSlab defPoint
%lastElt /lTopSlab defPoint
%lBotSlab pointbox
%lTopSlab uppointbox

pathExtremes sortByY firstElt /lLowestPoint defPoint
lLowestPoint pointbox

(Dish)
lBottomPoint ycoor
lLowestPoint ycoor sub
0 max
stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 54 54
resetPage
gsave 20 dict begin
/CurrentFile (l-serif_drop-ital) def
/CurrentLetter (l) def
italfont
(l) letterPath
%
% l-serifdrop.ps
%
% Drop of the upper serif.
%
flattenpath

0.5 horizSplitLine pathLineIntc sortByX
{ 2 copy pointbox } forallPoint
/lStemRight defPoint /lStemLeft defPoint

{ lStemRight startAtPoint lStemLeft endAtPoint } traceSubpath
{ {
    { 135 90 withinRange } startWhenAngle
    { 225 90 withinRange } endBeforeAngle
} traceSubpath } useSubpath
drawSubpath
{ pathExtremes } useSubpath
sortByY dup firstElt /lTopSerifBot defPoint
lastElt /lTopSerifTop defPoint
lTopSerifBot pointbox
lTopSerifTop uppointbox

(Serif drop)
lTopSerifTop ycoor lTopSerifBot ycoor sub 0 max
stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 55 55
resetPage
gsave 20 dict begin
/CurrentFile (l-slab-serif) def
/CurrentLetter (l) def
(l) letterPath
%
% l-slab.ps
%
% Thickness of serif of "l"
%
0.5 vertSplitLine pathLineIntc sortByY firstElt /lBottomPoint defPoint
0.5 horizSplitLine pathLineIntc sortByX lastElt /lRightPoint defPoint
lBottomPoint pointbox
lRightPoint rtpointbox

% Find the place where the top of the serif begins.
{ lBottomPoint startAtPoint lRightPoint endAtPoint } traceSubpath
{ {
    flattenpath
    { 45 90 withinRange } startWhenAngle 
    { 135 90 withinRange } endBeforeAngle
  } traceSubpath
} useSubpath
drawSubpath
{ pathExtremes } useSubpath
sortByY lastElt /lTopSlab defPoint
lTopSlab uppointbox

% Take a weighted average of lRightPoint and lTopSlab, ratio 4:1.
lTopSlab 0.8 scalePoint lRightPoint 0.2 scalePoint addPoint
vertLineThrough pathLineIntc sortByY 0 2 getinterval loadArray
/lSlabTop defPoint /lSlabBot defPoint

lSlabTop uppointbox lSlabBot pointbox

(Serif thickness)
lSlabTop ycoor
lSlabBot ycoor sub
stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 56 56
resetPage
gsave 20 dict begin
/CurrentFile (l-stem) def
/CurrentLetter (l) def
(l) letterPath
%
% l-stem.ps
%
0.5 horizSplitLine pathLineIntc sortByX
{ 2 copy pointbox } forallPoint
/lStemRight defPoint /lStemLeft defPoint
lStemRight lStemLeft subPoint magnitude
(Lowercase stem) exch stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 57 57
resetPage
gsave 20 dict begin
/CurrentFile (m-monowidth) def
/CurrentLetter (m) def
(m) letterPath
%
% m-monospace.ps
%
(m) stringwidth pop /mwidth exch def
(l) letterPath
(l) stringwidth pop /lwidth exch def

mwidth lwidth sub abs 1 lt { lwidth } { 0 } ifelse
(Monospace) exch stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 58 58
resetPage
gsave 20 dict begin
/CurrentFile (n-jut-serif) def
/CurrentLetter (n) def
(n) letterPath
%
% l-serifjut.ps
%
0.5 horizSplitLine pathLineIntc sortByX firstElt
/lStemLeft defPoint

pathExtremes sortByX firstElt /lJutLeft defPoint

lStemLeft xcoor lJutLeft xcoor sub
(Lowercase jut) exch stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 59 59
resetPage
gsave 20 dict begin
/CurrentFile (n-thin_join) def
/CurrentLetter (n) def
(n) letterPath
%
% n-thin_join.ps
%
0.5 vertSplitLine pathLineIntc sortByY lastElt /nTop defPoint
nTop pointbox

flattenpath


{ nTop startAtPoint { 179 lt } endBeforeAngle } traceSubpath
subpathEndpoint /nJoin defPoint

0.5 horizSplitLine pathLineIntc sortByX 1 2 getinterval loadArray
/nInRight defPoint /nInLeft defPoint
nInRight pointbox nInLeft pointbox

{ nInLeft startAtPoint nInRight endAtPoint } traceSubpath
drawSubpath
cvlit /nInSubpath exch def

/thinJoin 1000 def

290 5 340 {
    dup cos exch sin 300 scalePoint nJoin addPoint /nAngleEnd defPoint
    nInSubpath { nAngleEnd nJoin pathLineIntc } useSubpath
    dup length 0 gt {
	sortByX firstElt loadArray nJoin subPoint magnitude
	dup thinJoin lt {
	    /thinJoin exch def
	} { pop } ifelse
    } {
	pop
    } ifelse
} for

(Thin join) thinJoin stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 60 60
resetPage
gsave 20 dict begin
/CurrentFile (o-curve-alt) def
/CurrentLetter (o) def
(o) letterPath
%
% O-curve-alt.ps
%
pathLL /oBot exch def /oLeft exch def
pathUR /oTop exch def /oRight exch def

/oCurve 0 def

oBot oTop oBot sub 30 div oTop {
    dup oBot sub oTop exch sub oRight exch 3 -1 roll oLeft exch
    pathLineIntc sortByX revArray dup length 4 ge {
	dup firstElt /oOuter defPoint 1 get /oInner defPoint
	oOuter ltpointbox oInner rtpointbox
	oOuter oInner subPoint magnitude oCurve gt {
	    /oCurve oOuter oInner subPoint magnitude def
	} if
    } {
	pop
    } ifelse
} for

(Lowercase curve \(alt\)) oCurve stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 61 61
resetPage
gsave 20 dict begin
/CurrentFile (o-curve) def
/CurrentLetter (o) def
(o) letterPath
%
% O-curve.ps
%

pathLL /oBot exch def /oLeft exch def
pathUR /oTop exch def /oRight exch def

/oCurve 0 def

oBot oTop oBot sub 30 div oTop {
    dup oBot sub oTop exch sub oRight exch 3 -1 roll oLeft exch
    pathLineIntc sortByX dup length 4 ge {
	dup firstElt /oOuter defPoint 1 get /oInner defPoint
	oOuter ltpointbox oInner rtpointbox
	oOuter oInner subPoint magnitude oCurve gt {
	    /oCurve oOuter oInner subPoint magnitude def
	} if
    } {
	pop
    } ifelse
} for

(Lowercase curve) oCurve stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 62 62
resetPage
gsave 20 dict begin
/CurrentFile (o-o) def
/CurrentLetter (o) def
(o) letterPath
%
% o-overshoot.ps
%
measureDepth /oDepth exch def

0 drawHorizLine

(Bottom lowercase overshoot) oDepth 2 mul stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 63 63
resetPage
gsave 20 dict begin
/CurrentFile (o-superness) def
/CurrentLetter (o) def
(o) letterPath
%
% o-superness.ps
%

pathExtremes /OExtremes exch def

OExtremes sortByX firstElt /OLeft defPoint
OExtremes sortByX lastElt /ORight defPoint
OExtremes sortByY firstElt /OBot defPoint
OExtremes sortByY lastElt /OTop defPoint

OBot OLeft true findSupernessPoints findSuperness
(Superness, O bottom left) exch stringOfText

OTop OLeft true findSupernessPoints findSuperness
(Superness, O top left) exch stringOfText

OBot ORight true findSupernessPoints findSuperness
(Superness, O bottom right) exch stringOfText

OTop ORight true findSupernessPoints findSuperness
(Superness, O bottom right) exch stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 64 64
resetPage
gsave 20 dict begin
/CurrentFile (o-u) def
/CurrentLetter (o) def
(o) letterPath
%
% n-u.ps
%
% Unit is 1/10 width of "n".
%
pathExtremes sortByX dup firstElt /oLeft defPoint lastElt /oRight defPoint
(Unit based on o) oRight xcoor oLeft xcoor sub 7.5 div stringOfText

count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 65 65
resetPage
gsave 20 dict begin
/CurrentFile (o-vair) def
/CurrentLetter (o) def
(o) letterPath
%
% o-vair-alt.ps
%
pathLL /oBot exch def /oLeft exch def
pathUR /oTop exch def /oRight exch def
/pathMidHt oBot oTop add 2 div def

/oVair 1000 def

oLeft oRight oLeft sub 20 div oRight {
    0 vertLineThrough pathLineIntc sortByY dup length 0 gt {
	lastElt /curPoint defPoint
	curPoint curPoint pathAngle pop perpThroughPoint
	pathLineIntc dup length 2 ge {
	    sortByY revArray 1 get /curInside defPoint
	    curPoint uppointbox curInside pointbox
	    curPoint curInside subPoint magnitude oVair lt {
		/oVair curPoint curInside subPoint magnitude def
	    } if
	} {
	    pop
	} ifelse
    } {
	pop
    } ifelse
} for

(Lowercase vair \(alt\)) oVair stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 66 66
resetPage
gsave 20 dict begin
/CurrentFile (o-vair_corr) def
/CurrentLetter (o) def
(o) letterPath
%
% o-vair_corr.ps
%
pathLL /oBot exch def /oLeft exch def
pathUR /oTop exch def /oRight exch def
/pathMidHt oBot oTop add 2 div def

/oVair 1000 def
/oBotVair 1000 def

oLeft oRight oLeft sub 20 div oRight {
    0 vertLineThrough pathLineIntc sortByY dup length 1 gt {
	dup lastElt /curPoint defPoint firstElt /curBot defPoint
	curPoint curPoint pathAngle pop perpThroughPoint
	pathLineIntc dup length 2 ge {
	    sortByY revArray 1 get /curInside defPoint
	    curPoint uppointbox curInside pointbox
	    curPoint curInside subPoint magnitude oVair lt {
		/oVair curPoint curInside subPoint magnitude def
	    } if
	} {
	    pop
	} ifelse
	curBot curBot pathAngle pop perpThroughPoint
	pathLineIntc dup length 2 ge {
	    sortByY 1 get /curBotInside defPoint
	    curBot pointbox curBotInside uppointbox
	    curBot curBotInside subPoint magnitude oBotVair lt {
		/oBotVair curBot curBotInside subPoint magnitude def
	    } if
	} {
	    pop
	} ifelse
    } {
	pop
    } ifelse
} for

(Lowercase vair_corr) oBotVair oVair sub 0 max stringOfText

count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 67 67
resetPage
gsave 20 dict begin
/CurrentFile (q-desc_depth) def
/CurrentLetter (q) def
(q) letterPath
%
% q-desc.ps
%
% Measures descender of "q".
%

(desc_depth)
measureDepth
stringOfText

count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 68 68
resetPage
gsave 20 dict begin
/CurrentFile (r-flare) def
/CurrentLetter (r) def
(r) letterPath
%
% r-flare.ps
%
% Flare of tip of lowercase "r".
%

% The old algorithm wasn't robust enough.
%flattenpath
%0.3 horizSplitLine pathLineIntc sortByX lastElt /rStemRight defPoint
%rStemRight pointbox
%{ rStemRight startAtPoint { 270 gt } endWhenAngle } traceSubpath
%subpathEndpoint /rInnerCurveTop defPoint
%{ rInnerCurveTop startAtPoint { 90 lt } endWhenAngle } traceSubpath
%drawSubpath
%{ pathExtremes } useSubpath sortByY firstElt /rFlareBot defPoint
%rFlareBot pointbox
%rFlareBot vertLineThrough pathLineIntc sortByY lastElt /rFlareTop defPoint
%rFlareTop uppointbox
%
%(Flare of tip)
%rFlareTop ycoor rFlareBot ycoor sub
%stringOfText

0.3 horizSplitLine pathLineIntc sortByX 1 get /rStemRight defPoint
rStemRight xcoor 20 add /rArcLeft exch def

pathExtremes sortByY lastElt /rTopPoint defPoint

{ rStemRight startAtPoint rTopPoint endAtPoint } traceSubpath
drawSubpath
{ pathExtremes } useSubpath sortByX lastElt xcoor 5 sub /rArcRight exch def

/rFlareBBox { rArcLeft pathLL ycoor rArcRight pathUR ycoor } def

mark
rArcLeft
rArcRight rArcLeft sub 20 div
/rFlare 0 def
rArcRight {
    0 vertLineThrough pathLineIntc sortByY lastElt /rTopPt defPoint
    rFlareBBox rTopPt rTopPt pathAngle pop 90 add boundedLine
    pathLineIntc sortByY revArray
    dup length 2 ge {
	0 2 getinterval loadArray /pt1 defPoint /pt2 defPoint
	    pt1 pointbox pt2 pointbox
	pt1 pt2 subPoint magnitude
	dup rFlare gt {
	    /rFlare exch def
	} if
    } if
} for
cleartomark

(Flare of tip) rFlare stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 69 69
resetPage
gsave 20 dict begin
/CurrentFile (s-ess) def
/CurrentLetter (s) def
(s) letterPath
%
% s-ess.ps
%
0.5 vertSplitLine
pathLineIntc sortByY
2 2 getinterval loadArray
/sTopPoint defPoint /sBotPoint defPoint
sTopPoint pathAngle pop 90 add
dup cos exch sin 500 scalePoint sTopPoint addPoint
sTopPoint pathLineIntc sortByY
% Check if the last element is actually sTopPoint
dup lastElt loadArray sTopPoint 5 eqPoint {
    % If so, get the second to last one.
    revArray 1 get
} {
    lastElt
} ifelse
/sTopPerpPoint defPoint
sTopPerpPoint pointbox

(Lowercase ess) sTopPoint sTopPerpPoint subPoint magnitude stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 70 70
resetPage
gsave 20 dict begin
/CurrentFile (t-bar) def
/CurrentLetter (t) def
(t) letterPath
%
% t-bar.ps
%
0.5 horizSplitLine pathLineIntc sortByX 1 get loadArray
20 0 addPoint vertLineThrough pathLineIntc sortByY revArray
0 2 getinterval loadArray
/tBarBot defPoint /tBarTop defPoint
tBarBot pointbox tBarTop uppointbox

(Bar thickness)
tBarTop ycoor tBarBot ycoor sub
stringOfText


count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 71 71
resetPage
gsave 20 dict begin
/CurrentFile (v-hair) def
/CurrentLetter (v) def
(v) letterPath
%
% v-hair.ps
%
% Hair width of v.
%
0.5 horizSplitLine pathLineIntc
sortByX 3 get loadArray
2 copy pathAngle {
    perpThroughPoint
	resetIntc
    pathLineIntc sortByX revArray
    0 2 getinterval { 2 copy pointbox } forallPoint
    subPoint magnitude
    (Lowercase hair) exch stringOfText
} {
    pop pop
} ifelse


count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 72 72
resetPage
gsave 20 dict begin
/CurrentFile (v-stem) def
/CurrentLetter (v) def
(v) letterPath
%
% v-stem.ps
%
0.5 horizSplitLine pathLineIntc
sortByX 0 get loadArray
2 copy pathAngle {
    perpThroughPoint
	resetIntc
    pathLineIntc sortByX
    0 2 getinterval { 2 copy pointbox } forallPoint
    subPoint magnitude
    (Lowercase stem (thinned)) exch stringOfText
} {
    pop pop
} ifelse
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 73 73
resetPage
gsave 20 dict begin
/CurrentFile (v-tiny) def
/CurrentLetter (v) def
(v) letterPath
%
% v-tiny.ps
%
0.06 horizSplitLine pathLineIntc sortByX dup
firstElt /vLStrokeOne defPoint lastElt /vRStrokeOne defPoint
0.03 horizSplitLine pathLineIntc sortByX dup
firstElt /vLStrokeTwo defPoint lastElt /vRStrokeTwo defPoint

/leftDiagLine {
    vLStrokeTwo vLStrokeOne subPoint 1000 scalePoint vLStrokeTwo addPoint
    vLStrokeOne 
} def
/rightDiagLine {
    vRStrokeTwo vRStrokeOne subPoint 1000 scalePoint vRStrokeTwo addPoint
    vRStrokeOne
} def
/bottomLine {
    pathLL horizLineThrough
} def

mark
leftDiagLine drawLine
rightDiagLine drawLine
bottomLine drawLine
cleartomark

leftDiagLine bottomLine
intersect pop % Assert true
/vStrokeCorner defPoint
vStrokeCorner pointbox

% What is the angle of each of the lines? Then we can draw the angle bisector.
/vLAngle leftDiagLine lineAngle def
/vRAngle bottomLine lineAngle def

% This calculates the angle of the angle bisector line
vLAngle vRAngle sub 2 div vRAngle add

% Make a line of this angle through the V's corner
dup cos exch sin /vBisectorOffset defPoint
vBisectorOffset 1000 scalePoint vStrokeCorner addPoint
vBisectorOffset -100 scalePoint vStrokeCorner addPoint

pathLineIntc dup length 0 gt {
    sortByY firstElt /vCorner defPoint
    vCorner uppointbox
    vStrokeCorner vCorner vLAngle vRAngle sub penDiameter
} {
    pop 0
} ifelse

(Curvature of v apex) exch stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 74 74
resetPage
gsave 20 dict begin
/CurrentFile (x-x_height) def
/CurrentLetter (x) def
(x) letterPath
%
% x-height.ps
%
% x height.
%
(x_height) measureHeight stringOfText

count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Trailer
%%Pages: 74
%%EOF
