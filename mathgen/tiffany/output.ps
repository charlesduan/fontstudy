%!PS-Adobe-2.0
%%Pages: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: functions.ps
%!PS-Adobe-2.0

%
% functions.ps
%
% Convenience functions for me, that I think are useful in multiple files.
%

% An inch
/inch { 72 mul } bind def

% Given a dictionary, print its keys. Leaves the dictionary on the stack.
/pkeys {
    dup { pop == } forall
} bind def

% Given a set of pairs 1 2 3 4 5 6 and a number of pairs 3, pulls pairs out and
% leaves 1 3 5 2 4 6 on the stack.
/seppairs {
    2 dict begin
    dup array /Evens exch def
    dup array /Odds exch def
    1 sub -1 0 {	% odd even index
	dup Odds exch	% odd even index Odds index
	5 2 roll	% Odds index odd even index
	Evens exch	% Odds index odd even Evens index
	3 -1 roll	% Odds index odd Evens index odd
	put put
    } for
    Odds aload pop Evens aload pop
    end
} def

% Min/max functions
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def

% Given a number and a base/bounds, determine whether that number falls within
% the base/bounds. Accept all possible values for both base and bounds,
% including negative.
% value base bounds -- bool
% Add a tolerance value to base and bounds, because sometimes the
% floating-point arithmetic is a bit off.
/withinRange {
    dup 0 gt {
	% If bounds is positive. value - base >= 0 and <= bounds.
	3 1 roll sub	% bounds value-base
	dup 0 ge {
	    ge
	} {
	    pop pop false
	} ifelse
    } {
	% If bounds is negative, value - base <= 0 and >= bounds.
	3 1 roll sub
	dup 0 le {
	    le
	} {
	    pop pop false
	} ifelse
    } ifelse
} def

% Append two strings.
/append {
     2 copy length exch length add  % find the length of the new.
     string dup     % string1 string2 string string
     4 2 roll       % string string string1 string2
     2 index 0 3 index
     % string string string1 string2 string 0 string1
     putinterval    % stuff the first string in.
     % string string string1 string2
     exch length exch putinterval
} bind def

% Sorts an array using a comparator function. The specification of the
% comparator function is as follows:
%
% Takes two arguments. Returns TRUE iff the two arguments are in the correct
% order in their presentation; false otherwise.
%
% The array is sorted IN PLACE; that is, its contents will be overwritten. If
% this is not desired behavior, place at the beginning of the call:
%
% dup length array copy
%
% [array] {proc} -- [array]
/bubblesort {
    4 dict begin
	/proc exch def
	/ary exch def
	ary length 2 sub -1 0 {
	    /noexch true def
	    0 1 3 -1 roll {
		/pos exch def
		ary pos get ary pos 1 add get 2 copy proc not {
		    ary exch pos exch put
		    ary exch pos 1 add exch put
		    /noexch false def
		} {
		    pop pop
		} ifelse
	    } for
	    noexch { exit } if
	} for
	ary
    end
} def

% Reverses an array.
/revArray {
    2 dict begin
	/ary exch def
	/len ary length 1 sub def
	0 1 ary length 2 idiv 1 sub {
	    dup len exch sub ary exch get	% i ary[len-i]
	    ary 2 index get			% i ary[len-i] ary[i]
	    ary 3 index len exch sub 3 -1 roll	% i ary[len-i] ary len-i ary[i]
	    put ary 3 1 roll put
	} for
	ary
    end
} def

% Puts an array onto the stack.
/loadArray { aload pop } bind def

% Get the first or last element of an array.
/firstElt { 0 get } bind def
/lastElt { dup length 1 sub get } bind def

% Iterates several times.
% num { proc } --
/iterate {
    /IterateProc exch def
    -1 0 { pop IterateProc } for
} def
%%EndResource
%%BeginResource: points.ps
%!PS-Adobe-2.0

%
% points.ps
%
% Utility functions for points.
%

% Requires: functions.ps

% Given a pair of points, determines the average of them.
% x1 y1 x2 y2 -- x1+x2/2 y1+y2/2
/avgPoint {
    3 -1 roll add 2 div 3 1 roll add 2 div exch
} bind def

% Given a pair of points and a tolerance, determine whether the second point is
% within the tolerance range of the first point. Tolerance should be >= 0.
% x1 y1 x2 y2 tol -- bool
/eqPoint {
    dup 6 2 roll	% tol tol x1 y1 x2 y2
    3 -1 roll		% tol tol x1 x2 y2 y1
    sub	abs		% tol tol x1 x2 |y2-y1|
    3 1 roll		% tol tol dy x1 x2
    sub abs		% tol tol dy dx
    3 1 roll		% tol dx tol dy
    ge			% tol dx bool
    3 1 roll ge and
} bind def

% Given two points, tests them for exact equality.
/equalPoint {
    3 -1 roll eq 3 1 roll eq and
} bind def

% Scales a point by a constant.
% x1 y1 scale -- x y
/scalePoint {
    dup 3 1 roll mul 3 1 roll mul exch
} bind def

% Add two points.
% x1 y1 x2 y2 -- x y
/addPoint {
    3 -1 roll add 3 1 roll add exch
} bind def

% Subtract two points.
/subPoint {
    3 -1 roll exch sub 3 1 roll sub exch
} bind def

% Performs a dot product on 2d points.
/dotProduct {
    3 -1 roll mul 3 1 roll mul add
} bind def

/magnitude {
    dup mul exch dup mul add sqrt
} bind def

% Iterates over a list of points. The point list is a list of 2-element lists.
/ForallPointDict 1 dict def

/forallPoint {
    % We must make a global definition here, because without it we need to store
    % the procedure on a local dictionary (which violates the nature of forall)
    % or leave the procedure on the stack (which violates the nature of forall).
    ForallPointDict exch /fp exch put
    {
        aload pop ForallPointDict /fp get exec
    } forall
} def

% Given a pair of coordinates, get one of them. These are really stupid
% functions, but they make the code easier to read.
/xcoor { dup type /arraytype eq { 0 get } { pop } ifelse } bind def
/ycoor { dup type /arraytype eq { 1 get } { exch pop } ifelse } bind def

% Sorts an array of points by x or y coordinate, ascending.
/sortByX {
    { xcoor exch xcoor exch lt } bubblesort
} def

/sortByY {
    { ycoor exch ycoor exch lt } bubblesort
} def

% Given a user path and a list of points, gives the points that are in the fill
% region of the user path (by inufill).
% [ [points] ] { upath } -- [ [points subset] ]
/pointsInRegion {
    1 dict begin
	cvlit /ThePath exch def
	[ exch {
	    2 copy ThePath inufill {
		[ 3 1 roll ]
	    } {
		pop pop
	    } ifelse
	} forallPoint
	]
    end
} def

% Defines a point.
/defPoint {
    dup type /nametype eq {
	1 index type /arraytype eq { exch aload pop } { 3 1 roll } ifelse
    } if
    2 packedarray cvx def
} def

% If two points are too close for comfort, discard one of them.
% [ [ point list ] ] -- [ [ subset ] ]
/uniquePoints {
    5 dict begin
    /theArray exch def
    /newArray [ ] def
    0 1 theArray length 1 sub {
	theArray exch get loadArray /curPoint defPoint
	/noMatches true def
	0 1 newArray length 1 sub {
	    newArray exch get loadArray curPoint 3 eqPoint {
		/noMatches false def
		exit
	    } if
	} for
	noMatches {
	    /newArray [ newArray aload pop [ curPoint ] ] def
	} if
    } for
    newArray
    end
} def
%%EndResource
%%BeginResource: angles.ps
%!PS-Adobe-2.0

%
% angles.ps
%
% Fun tricks for curve segments and angles.
%

% Requires: functions.ps points.ps

% Given two points, finds the angle in degrees from the horizontal of the line
% defined ending at the first point.
% x1 y1 x2 y2 -- angle of vector from (x1,y1) to (x2, y2)
/lineAngle {
    4 2 roll subPoint exch atan
} bind def

% Given a curveto (8 arguments), get the starting angle. This will be the
% direction the curve starts out traveling.
/curveStartAngle {
    pop pop pop pop
    lineAngle
} def

% Given a curveto (8 arguments), get the ending angle. This will be the
% direction the curve would continue to travel in if it didn't stop.
/curveEndAngle {
    lineAngle 5 1 roll
    pop pop pop pop
} def

% Takes two points p and q and an angle theta. Pretend that an angle was drawn
% with a circular pen of radius r. If the pen had zero radius, then the path
% would have angled at p with an angle of theta. But because the radius is
% greater than zero, the "angle" occurs at point q. This function will return
% the diameter 2*r.
%            /
%           /*
%          / |
%         /  `.   ..*|
%        /    q.-^   | r
%       /       \.   |
%      /theta     ^*.|
%     p----------------
%
/penDiameter {
    2 div sin 5 1 roll subPoint magnitude	% sin(theta/2) l
    1 index mul exch				% l*sin sin
    1 exch sub div				% l*sin / (1-sin) = r
    2 mul
} def

%
% Given a box, defined by lower left and upper right points, and a point and an
% angle, draw the line that fits in the bounding box, goes through that point,
% and travels at that angle.
%
% +------------------+
% | \                |
% |  \               |
% |   \ theta        |
% |    p-------      |
% |     \            |
% |      \           |
% |       \          |
% +------------------+
%
/boundedLine {
    6 dict begin
	{ dup 0 ge { exit } if 180 add } loop
	{ dup 180 lt { exit } if 180 sub } loop
	/Theta exch def
	/Point defPoint
	% If the angle is over 90 degrees, swap left and right for convenience
	2 seppairs 2 copy max /BoxTop exch def min /BoxBot exch def
	2 copy max /BoxRt exch def min /BoxLft exch def
	% First, the upper intersection point.
	% Degenerate cases: point is on top of box and angle is horizontal
	Point ycoor BoxTop eq
	% Point is on side of box and angle is vertical
	90 Theta eq Point xcoor BoxRt eq Point xcoor BoxLft eq or and
	or {
	    Point
	} {
	    Point BoxRt BoxTop lineAngle Theta ge {
		BoxRt Point xcoor sub % horizontal distance
		dup Theta sin mul Theta cos div % vertical distance
		Point addPoint
	    } {
		Point BoxLft BoxTop lineAngle Theta ge {
		    BoxTop Point ycoor sub
		    dup Theta cos mul Theta sin div
		    exch Point addPoint
		} {
		    BoxLft Point xcoor sub % horizontal distance
		    dup Theta sin mul Theta cos div % vertical distance
		    Point addPoint
		} ifelse
	    } ifelse
	} ifelse
	% Lower point.
	% Degenerate cases: point is on top of box and angle is horizontal
	Point ycoor BoxBot eq
	% Point is on side of box and angle is vertical
	90 Theta eq Point xcoor BoxLft eq Point xcoor BoxRt eq or and
	or {
	    Point
	} {
	    /Theta Theta 180 add def
	    Point BoxLft BoxBot lineAngle Theta ge {
		BoxLft Point xcoor sub % horizontal distance
		dup Theta sin mul Theta cos div % vertical distance
		Point addPoint
	    } {
		Point BoxRt BoxBot lineAngle Theta ge {
		    BoxBot Point ycoor sub
		    dup Theta cos mul Theta sin div
		    exch Point addPoint
		} {
		    BoxRt Point xcoor sub % horizontal distance
		    dup Theta sin mul Theta cos div % vertical distance
		    Point addPoint
		} ifelse
	    } ifelse
	} ifelse
    end
} def

% Line bounded by the current path's bounding box. Takes a point and an angle.
/bboxLine {
    pathbbox 5 5 addPoint 4 2 roll 5 5 subPoint 4 2 roll 7 4 roll boundedLine
} def
%%EndResource
%%BeginResource: extremes.ps
%!PS-Adobe-2.0

%
% extremes.ps
%
% Functions for manipulating extremes.
%

2 dict begin

    /pointList [ ] def

    /addPoint {
	[ 3 1 roll ] [ exch pointList aload pop ] /pointList exch def
    } def

currentdict
end
/ExtremesDict exch def


% Now, the public interface

% Given a coordinate pair, test it as an extreme point candidate. Require that
% the point be within the clipping path for consideration.
/cmpPoint {
    ExtremesDict begin
	addPoint
    end
} def

% Clear out the current extreme values.
/resetExtremes {
    ExtremesDict begin
	/pointList [ ] def
    end
} def
%%EndResource
%%BeginResource: intersect.ps
%!PS-Adobe-2.0

%
% intersect.ps
%

% Requires: functions.ps

% Given four absolute points, determine the intersection between the lines.
% x1 y1 x2 y2 x3 y3 x4 y4 -- x y true OR false
% The first line is the one between (x1,y1) and (x2,y2).
/intersect {
    16 dict begin
	4 seppairs
	% Given a pair of x or y coordinates, a parametrization of the line
	% segment defined by them is {x,y} = mt + b, where b is one of the
	% coordinates and m is the difference between the two of them.
	dup /yb1 exch def sub /ym1 exch def
	dup /yb2 exch def sub /ym2 exch def
	dup /xb1 exch def sub /xm1 exch def
	dup /xb2 exch def sub /xm2 exch def
	% It turns out that the solution for the intersection is:
	%      xm2(yb1-yb2) + ym2(xb2-xb1)
	% t1 = ---------------------------
	%           xm1 ym2 - xm2 ym1
	%      xm1(yb1-yb2) + ym1(xb2-xb1)
	% t2 = ---------------------------
	%           xm1 ym2 - xm2 ym1
	%
	% Let's hope we code this right...
	xm1 ym2 mul xm2 ym1 mul sub	% Denominator
	/Denom exch def
	yb1 yb2 sub xb2 xb1 sub		% factor1 factor2
	2 copy
	ym2 mul exch xm2 mul add	% f1 f2 t1-numerator
	/t1num exch def
	ym1 mul exch xm1 mul add	% t2-num
	/t2num exch def
	% If we've got coinciding lines, just take the middle
	t1num 0 eq
	Denom 0 eq
	and {
	    false
	} {
	    % Now we perform range checks. The numerators should each be at
	    % least zero and no more than D.
	    t1num 0 Denom withinRange t2num 0 Denom withinRange and {
		% If true, then we simply plug in t1 into its respective x and y
		% equations to get x and y values.
		t1num Denom div dup
		xm1 mul xb1 add exch
		ym1 mul yb1 add
		true
	    } {
		false
	    } ifelse
	} ifelse
    end
} def


%%EndResource
%%BeginResource: bzfunc.ps
%!PS-Adobe-2.0

%
% bzfunc.ps
%
% Bezier curve functions
%

% Requires: functions.ps

% Our bezier curve functions. Given the x or y coordinates and a t value,
% calculate the value at that point.
% x0 x1 x2 x3 t -- x
/bezierFunc {
    2 dict begin
    /t exch def
    /s 1 t sub def
    t mul t mul t mul			% x3 * t^3
    exch t mul t mul s mul 3 mul add	% x2 * 3t^2(1-t)
    exch s mul s mul t mul 3 mul add	% x1 * 3t(1-t)^2
    exch s mul s mul s mul add		% x0 * (1-t)^3
    end
} def

% Given four points and t, calculate the bezier function at that value t.
% x1 y1 x2 y2 x3 y3 t -- x y
/curvetoPoint {
    dup 5 seppairs	% x0 x1 x2 x3 t y0 y1 y2 y3 t
    bezierFunc 6 1 roll
    bezierFunc exch
} def

% Finds the Bezier extrema.
% x0 x1 x2 x3 -- [ values ]
% where values is, for each extreme, the value t. We assume that x0 = 0.
/bezierExtremes {
    6 dict begin
	% Originally, this function assumed rcurveto semantics, so a would
	% always be 0. But pathforall uses curveto instead. Since we don't want
	% to do all the math all over again, we collect a first, and then make
	% all the values relative. It makes no difference, since the value we
	% return, time, is independent of the relative location of the curve.
	4 -1 roll
	/a exch def

	% Define the four parameters
	/d exch a sub def
	/c exch a sub def
	/b exch a sub def

	% The function is:
	%   3bt(1 - t)^2 + 3ct^2(1 - t) + dt^3
	% Its derivative is (divided by three):
	%   b - 4bt + 2ct + 3bt^2 - 3ct^2 + dt^2
	% Which means the zero point is:
	%       (2b-c) +- sqrt( b(b-c-d) + c^2)
	%   t = -------------------------------
	%               3b - 3c + d
	% (the quadratic formula divided all over by two).
	% Let B=2b-c, det=b(b-c-d)+c^2, and A=3b-3c+d.
	/det b c sub d sub b mul c c mul add def
	/A b 3 mul c 3 mul sub d add def
	/B b 2 mul c sub def

	A 0 eq {
	    % If we've got a straight line on our hands; i.e., A=0
	    % Then the function is:
	    %   0 = 2(c-2b)t + b
	    %   b = 2(2b-c)t
	    %   t = b / 2(2b-c) = b / 2B
	    B 0 eq {
		% If B=0, then no solution, because it's horizontal
		[ ]
	    } {
		% Otherwise it's at -c / -B. Recall we must add a back to the
		% resulting value.
		[
		    b B 2 mul div dup 0 1 withinRange not { pop } if
		]
	    } ifelse
	} {
	    det 0 le {
		% If the determinant is negative, there is no solution. If it's
		% zero leave nothing on the stack, since the point we've found
		% is neither a max nor a min.
		[ ]
	    } {
		% Leave -B[+-]sqrt(det)/2A 2 on the stack. Recall we must add a
		% back to the resulting value.
		[
		    B det sqrt add A div dup 0 1 withinRange not { pop } if
		    B det sqrt sub A div dup 0 1 withinRange not { pop } if
		]
	    } ifelse
	} ifelse
    end
} def

% Returns the two extremes arrays, x extremes and then y extremes.
% x0 x1 x2 x3 y0 y1 y2 y3 -- [ x ] [ y ]
/curvetoExtremes {
    4 seppairs
    bezierExtremes 5 1 roll bezierExtremes exch
} def

%%EndResource
%%BeginResource: bzintc.ps
%!PS-Adobe-2.0

%
% bzintc.ps
%
% Intersection between a Bezier curve and a line.
%
% IMPLEMENTATION NOTE: while we could solve this problem systematically--the
% cubic equation is solvable--the solution is over 2 pages long and takes about
% a minute to derive for Mathematica. Instead, we derive it by picking out
% segments from the Bezier curve and finding intersections via interpolation.
%

% Requires: bzfunc.ps intersect.ps


% Takes curveto arguments (4 points) and two points defining a line segment for
% intersection.
/curvetoIntc {
    10 dict begin
	% Collect up the first four args, the line segment point
	4 packedarray cvx /LineSegment exch def
	% Collect up the next 8 args, the curve definition points
	8 packedarray cvx /CurvePoints exch def
	% Counter for how many intersections we've found. The tryCurveIntc
	% function will leave the points on the stack.
	/NumPoints 0 def
	/ThisDict currentdict def
	/AddPoint {
	    ThisDict dup /NumPoints get 1 add /NumPoints exch put
	} bind def
	/RecursiveDepth 0 def
	0 0.05 1 tryCurveIntc
	NumPoints
    end
} def

% Helper function for rcurvetoIntc. Assumes /LineSegment and /CurvePoints to
% exist in some dictionary. Takes for-like arguments (init, delta, final) on the
% stack, iterates over them, and searches for intersection points.
% init delta final -- points
/tryCurveIntc {
    4 dict begin
	/RecursiveDepth RecursiveDepth 1 add def
	exch dup /Delta exch def exch
	3 copy exch 2 div add exch	% i d f f+d/2 i
	dup /LastT exch def		% Save i to lastT
	CurvePoints 9 -1 roll curvetoPoint
	2 packedarray cvx /LastPoint exch def % Using initial, get Bezier point
	exch pop	% Kill original final; use augmented one
	{	% Begin for loop
	    dup						% t t
	    CurvePoints 9 -1 roll curvetoPoint		% t x y
	    2 copy LastPoint LineSegment intersect {	% t x y x-intc y-intc
		% If we found an intersection
		2 copy LastPoint 0.1 eqPoint RecursiveDepth 1000 gt or {
		    % If the point happens to be close enough to LastPoint, then
		    % we'll consider it good.
		    AddPoint
		    5 2 roll
		} {
		    % If they're too far apart, then we're in trouble. Using
		    % LastT and T, we'll recursively call this function.
		    pop pop			% t x y
		    3 -1 roll dup 4 2 roll	% t t x y
		    % Save off t, x, y, so whatever recursive tryCurveIntc does,
		    % we can replace our old values at the top of the stack.
		    3 packedarray cvx /Save exch def
		    LastT exch 2 copy 		% LastT t LastT t
		    exch sub 5 div		% LastT t (t-LastT)/5
		    exch
		    tryCurveIntc
		    Save
		} ifelse
	    } if					% t x y
	    2 packedarray cvx /LastPoint exch def
	    /LastT exch def
	} for
    end
} def
%%EndResource
%%BeginResource: intcmgr.ps
%!PS-Adobe-2.0

%
% intcmgr.ps
%
% Manages intersections between a line and various curves.
%

% Requires: intersect.ps bzintc.ps functions.ps

10 dict begin

    % Place where points will be stored.
    /pointList [ ] def

    /addPoint {
	[ 3 1 roll ] [ exch pointList aload pop ] /pointList exch def
    } def

    % Line to check for intersections.
    %/intcLine { 0 0 0 0 } def

currentdict
end
/IntersectDict exch def

% Resets the intersection manager.
/resetIntc {
    IntersectDict begin
	/pointList [ ] def
    end
} def

% Sets the line to test against other points.
/setIntcLine {
    IntersectDict begin
	4 packedarray cvx /intcLine exch def
    end
} def

% Basically performs "intersect", but saves the result value.
/intcLines {
    IntersectDict begin
	intcLine intersect {
	    addPoint
	} if
    end
} def

% Performs curvetoIntc, calculates the actual intersection point, and saves the
% result.
/intcCurve {
    IntersectDict begin
	intcLine curvetoIntc -1 1 {
	    pop addPoint
	} for
    end
} def

% Iterates over the points collected.
/intcForall {
    IntersectDict /pointList get exch forallPoint
} def

% Shows the intersection line (without messing up the path)
/showIntcLine {
    IntersectDict begin
    gsave
	newpath intcLine moveto lineto stroke
    grestore
    end
} def
%%EndResource
%%BeginResource: drawing.ps
%!PS-Adobe-2.0

%
% drawing.ps
%
% Drawing stuff.
%

/pointbox {
    gsave
	newpath moveto
	-10 -10 rlineto
	20 0 rlineto
	closepath fill
    grestore
} bind def
/uppointbox {
    gsave
	newpath moveto
	-10 10 rlineto
	20 0 rlineto
	closepath fill
    grestore
} bind def
/rtpointbox {
    gsave
	newpath moveto
	10 -10 rlineto
	0 20 rlineto
	closepath fill
    grestore
} bind def
/ltpointbox {
    gsave
	newpath moveto
	-10 10 rlineto
	0 -20 rlineto
	closepath fill
    grestore
} bind def

/drawHorizLine {
    gsave
	3 setlinewidth
	newpath dup 0 exch moveto
	700 exch lineto
	stroke
    grestore
} def

/drawLine {
    gsave 4 copy moveto lineto stroke grestore
} def


%%EndResource
%%BeginResource: pathtricks.ps
%!PS-Adobe-2.0

%
% pathtricks.ps
%
% Methods for manipulating paths.
%
% All of the functions in this package assume that there is a current path. They
% do not change the path at all.
%

% Requires: extremes.ps intcmgr.ps points.ps drawing.ps angles.ps

% General method for executing pathforall in a useful method such that
% currentpoint works correctly. Expects methods linetoHook, movetoHook,
% curvetoHook, and closepathHook to exist. If startingHook and/or endingHook are
% defined, then they will be executed at the appropriate times.
%
/tracePath {
    10 dict begin	% Save the starting X and Y; also makes hooks local
    gsave
    /startingHook where {
	pop startingHook
    } if
    {		% moveto
	2 copy mark 3 1 roll movetoHook cleartomark
	/startPoint defPoint
	/curPoint startPoint defPoint
    } {		% lineto
	2 copy mark 3 1 roll linetoHook cleartomark
	/curPoint defPoint
    } {		% curveto
	6 copy mark 7 1 roll curvetoHook cleartomark
	/curPoint defPoint
	pop pop pop pop
    } {		% closepath
	mark startPoint linetoHook cleartomark
	mark closepathHook cleartomark	% just in case
	/curPoint startPoint defPoint
    } pathforall
    /endingHook where {
	pop endingHook
    } if
    grestore
    end
} def

%
% INTERSECTIONS
%

% Dictionary defining hooks for line intersections. It is expected that the user
% of this dictionary initialize the line for the intersection manager.
5 dict begin
    /movetoHook { pop pop } def
    /linetoHook {
	curPoint intcLines
    } def
    /curvetoHook {
	curPoint 8 2 roll
	intcCurve
    } def
    /closepathHook { } def
currentdict
end
/PathIntcDict exch def

% Given the points for a line, determine an intersection.
/pathLineIntc {
    resetIntc
    PathIntcDict begin
	setIntcLine
	showIntcLine
	tracePath
    end
    IntersectDict /pointList get
    uniquePoints
} def

% EXTREME VALUES

5 dict begin
    /movetoHook { pop pop } def
    /linetoHook {
	curPoint cmpPoint
	cmpPoint
    } def
    /curvetoHook {
	2 copy cmpPoint
	curPoint cmpPoint
	curPoint 8 2 roll
	8 packedarray cvx /points exch def
	points curvetoExtremes
	{ points 9 -1 roll curvetoPoint cmpPoint } forall
	{ points 9 -1 roll curvetoPoint cmpPoint } forall
    } def
    /closepathHook { } def
currentdict
end
/PathExtrDict exch def

% Determine the extremes.
/pathExtremes {
    resetExtremes
    PathExtrDict begin
	tracePath
    end
    ExtremesDict /pointList get
} def


% Direction of fill
%
% Given an array of points and a point offset, extracts those points that, when
% the offset is applied to them, 
% [ point array ] offx offy -- [ point array subset ]
/offsetInFill {
    1 dict begin
	2 packedarray cvx /offset exch def
	[ exch
	{
	    2 copy offset addPoint infill {
		[ 3 1 roll ]
	    } {
		pop pop
	    } ifelse
	} forallPoint
	]
    end
} def

% Midpoint of the current path.
/pathMidpoint {
    pathbbox 2 seppairs add 2 div 3 1 roll add 2 div exch
} def

% Upper right coordinate of current path.
/pathUR {
    pathbbox 4 2 roll pop pop
} def

% Path lower left coordinate.
/pathLL {
    pathbbox pop pop
} def

% Vertical line that splits the bbox in half. Leaves the coordinates on the
% stack.
/vertSplitLine {
    dup pathUR xcoor mul	% frac frac*llx
    exch 1 exch sub		% frac*llx 1-frac
    pathLL xcoor mul		% frac*llx (1-frac)*urx
    add dup			% avgX avgX
    pathLL ycoor 10 sub exch
    pathUR ycoor 10 add
} def
/horizSplitLine {
    dup pathUR ycoor mul	% frac frac*lly
    exch 1 exch sub		% frac*lly 1-frac
    pathLL ycoor mul		% frac*lly (1-frac)*ury
    add				% avgY avgY
    pathLL xcoor 10 sub exch
    pathUR xcoor 10 add 1 index
} def

/vertLineThrough {
    xcoor dup
    pathLL ycoor 10 sub exch
    pathUR ycoor 10 add
} def
/horizLineThrough {
    ycoor
    pathLL xcoor 10 sub exch
    pathUR xcoor 10 add 1 index
} def

% Show a letter.
/letterPath {
    newpath 0 0 moveto true charpath
    gsave stroke grestore
} bind def



%
% ANGLE AT A POINT IN THE PATH
%
6 dict begin
/movetoHook { pop pop } def
/linetoHook {
    /theAngle where {
	pop pop pop
    } {
	curPoint 4 2 roll
	4 copy thePoint linePtIntc {
	    pop pop lineAngle /theAngle exch def
	} if
    } ifelse
} def
/curvetoHook { } def	% Should never occur, since we flatten the path
/closepathHook { } def
/endingHook { /theAngle where dup { exch pop theAngle exch } if } def
currentdict
end
/PathAngleDict exch def

/pathAngle {
    PathAngleDict begin
    gsave
	flattenpath
	/thePoint defPoint
	tracePath
    grestore
    end
} def

% Produces the coordinates for a perpendicular through a given point.
/perpThroughPoint {
    90 add bboxLine
} def

% Measure height/depth of the path.
/measureHeight {
    gsave
	flattenpath pathUR ycoor
	dup drawHorizLine
    grestore
} def
/measureDepth {
    gsave
	flattenpath pathLL ycoor
	dup drawHorizLine
	neg
    grestore
} def


%%EndResource
%%BeginResource: bracket.ps
%!PS-Adobe-2.0
%
% bracket.ps
%
% Given the darkness parameter, a point on the stem, the edge of the serif, and
% the corner where the stem and the edge should meet with no bracket, finds the
% height of the bracket.
%
% Requires: points.ps pathtricks.ps drawing.ps
%
/findBracket {
    4 dict begin
	/corner defPoint	% Point where the serif and stem meet
	/edge defPoint		% Point at top end of serif
	/bracket defPoint	% Point where bracket should end
	/fraction exch 1 exch div def	% Darkness parameter (usually 1/3)
	10 {
	    edge bracket drawLine avgPoint corner
	    pathLineIntc dup length 0 eq {
		/bracket corner defPoint
		pop exit
	    } if
	    firstElt loadArray % Better only have one element!
	    corner subPoint fraction scalePoint corner addPoint
	    % First line for the intersection, that goes through edge. This line
	    % should intersect the stem line at the bracket point.
	    edge subPoint 10 scalePoint edge addPoint edge
	    % Second line for the intersection
	    bracket corner subPoint 20 scalePoint corner addPoint corner
	    intersect {
		/bracket defPoint
	    } {
		/bracket corner defPoint
		exit
	    } ifelse
	} iterate
	bracket pointbox
	mark bracket edge drawLine avgPoint corner drawLine cleartomark
	bracket
    end
} def


%%EndResource
%%BeginResource: pointintc.ps
%!PS-Adobe-2.0

%
% pointintc.ps
%
% Determines when a point intersects with a line or a curve.
%

% Requires: functions.ps points.ps bzintc.ps

% The tolerance range for intersections. By default 3 points.
/PtIntcEps 3 def

% Makes a line segment given one of the points and a true/false value for which
% direction to draw the line.
/epsilonLine {
    {
	2 copy
	PtIntcEps 0 addPoint 4 2 roll
	PtIntcEps 0 subPoint
    } {
	2 copy
	0 PtIntcEps addPoint 4 2 roll
	0 PtIntcEps subPoint
    } ifelse
} def

% Given a line segment, does it intersect /pt1?
% x1 y1 x2 y2 x y -- false OR x' y' true
/linePtIntc {
    5 dict begin
	/p defPoint
	/p1 defPoint
	/p2 defPoint
	/p2top p p2 subPoint defPoint
	/p2top1 p1 p2 subPoint defPoint
	/p2top1mag p2top1 magnitude def
	p2top magnitude p1 p subPoint magnitude add p2top1mag sub
	-1 2 withinRange {
	    p2top1mag 0 eq {
		p1 true
	    } {
		p2top1
		p2top p2top1 dotProduct p2top1mag dup mul div
		0 max 1 min
		scalePoint
		p2 addPoint true
	    } ifelse
	} {
	    false
	} ifelse
    end
} def

/ifCurveIntc {
    curvetoIntc dup 0 gt {
	-1 2 {
	    pop pop pop
	} for
	true
    } {
	pop false
    } ifelse
} def

% Does a curve intersect?
% x1 y1 ... x8 y8 x y -- x y true OR false
/curvePtIntc {
    10 copy true epsilonLine ifCurveIntc {
	12 2 roll
	pop pop pop pop pop pop pop pop pop pop	% 10 of them
	true
    } {
	false epsilonLine ifCurveIntc
    } ifelse
} def

%%EndResource
%%BeginResource: subpath.ps
%!PS-Adobe-2.0

%
% subpath.ps
%
% Produces subpaths based on starting and ending conditions.
%

% Requires: angles.ps pointintc.ps


% Makes a subpath, as a user path.
/traceSubpath {
    20 dict begin	% Save the starting X and Y; also makes hooks local
    /moveto { /moveto cvx } def
    /lineto { /lineto cvx } def
    /curveto { /curveto cvx } def
    /closepath { /closepath cvx } def
    % Execute the initialization hook, which should be at the top of the stack.
    exec
    [
    pathbbox 100 100 addPoint 4 2 roll 100 100 subPoint 4 2 roll /setbbox cvx
    % Each partial path segment in the path must be traced independently. Guess
    % that there are at most 100 segments in any path.
    1 1 100 {
	/segmentToTrace exch def
	/inSubpath false def
	1 1 2 {
	    /currentSegment 1 def
	    pop	% Get rid of the for argument
	    /ignoreCycle segmentToTrace currentSegment ne def

	    {		% moveto
		% You should never encounter a moveto in a subpath; it's bad
		% karma. TODO We have to figure out how to deal with multiple
		% subpaths within a path. The way we should do this: break the
		% path up into individual parts, and then run all this stuff on
		% each part.
		ignoreCycle {
		    pop pop
		} {
		    /nowPt defPoint
		    /startPt nowPt defPoint
		} ifelse

	    } {		% lineto
		2 copy /newPt defPoint
		% If the new point equals the old point exactly, then ignore
		% this entire thing.
		newPt nowPt equalPoint ignoreCycle or {
		    pop pop
		} {
		    2 packedarray cvx /linetoArgs exch def
		    inSubpath {			% We're in the subpath.
			/defaultEndSubpath { linetoArgs lineto } def
			lineTestEnd {
			    /inSubpath false def
			    exit
			} {
			    linetoArgs lineto
			} ifelse
		    } {				% We're not in the subpath.
			/defaultStartSubpath {
			    nowPt moveto linetoArgs lineto
			} def
			lineTestStart {
			    /inSubpath true def
			} if
		    } ifelse
		    /nowPt newPt defPoint
		} ifelse

	    } {		% curveto
		2 copy /newPt defPoint
		newPt nowPt equalPoint ignoreCycle or {
		    pop pop pop pop pop pop
		} {
		    6 packedarray cvx /curvetoArgs exch def
		    inSubpath {			% We're in the subpath.
			/defaultEndSubpath { curvetoArgs curveto } def
			curveTestEnd {
			    /inSubpath false def
			    exit
			} {
			    curvetoArgs curveto
			} ifelse
		    } {				% We're not in the subpath.
			/defaultStartSubpath {
			    nowPt moveto curvetoArgs curveto
			} def
			curveTestStart {
			    /inSubpath true def
			} if
		    } ifelse
		    /nowPt newPt defPoint
		} ifelse

	    } {		% closepath
		/newPt startPt defPoint
		/linetoArgs startPt defPoint
		newPt nowPt equalPoint ignoreCycle or not {
		    inSubpath {
			/defaultEndSubpath { linetoArgs lineto } def
			lineTestEnd {
			    /inSubpath false def
			    exit
			} {
			    linetoArgs lineto
			} ifelse
		    } {				% We're not in the subpath.
			/defaultStartSubpath {
			    nowPt moveto linetoArgs lineto
			} def
			lineTestStart {
			    /inSubpath true def
			} if
		    } ifelse
		    /nowPt newPt defPoint
		} if
		/currentSegment currentSegment 1 add def
		/ignoreCycle currentSegment segmentToTrace ne def
	    } pathforall

	    %inSubpath not { exit } if
	} for
	% If the last segment is greater than or equal to the segment we just
	% traced plus one, then the next cycle will be useless so it and all
	% following ones should be canceled.
	currentSegment segmentToTrace 1 add lt { exit } if
    } for

    % Remove the last moveto
    dup /moveto eq {
	pop pop pop
    } if
    ] cvx
    end
} def

/drawSubpath {
    gsave
	currentlinewidth 3 mul setlinewidth
	dup ustroke
    grestore
} def

/useSubpath {
    gsave
	exch newpath uappend
	exec
    grestore
} def

/subpathEndpoint {
    gsave
	newpath uappend currentpoint
    grestore
} def


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% Some start and end condition functions
%

% Start when the angle meets some condition.
% {cond} --
/startWhenAngle {
    /StartTestCond exch def
    /lineTestStart {
	nowPt linetoArgs lineAngle StartTestCond {
	    defaultStartSubpath
	    true
	} {
	    false
	} ifelse
    } def
    /curveTestStart {
	nowPt curvetoArgs curveStartAngle StartTestCond {
	    defaultStartSubpath
	    true
	} {
	    false
	} ifelse
    } def
} def

/endWhenAngle {
    /EndTestCond exch def
    /lineTestEnd {
	nowPt linetoArgs lineAngle EndTestCond {
	    defaultEndSubpath
	    true
	} {
	    false
	} ifelse
    } def
    /curveTestEnd {
	nowPt curvetoArgs curveEndAngle EndTestCond {
	    defaultEndSubpath
	    true
	} {
	    false
	} ifelse
    } def
} def

/endBeforeAngle {
    /EndTestCond exch def
    /lineTestEnd {
	nowPt linetoArgs lineAngle EndTestCond {
	    true
	} {
	    false
	} ifelse
    } def
    /curveTestEnd {
	nowPt curvetoArgs curveEndAngle EndTestCond {
	    true
	} {
	    false
	} ifelse
    } def
} def

/endBeforeStartAngle {
    /EndTestCond exch def
    /lineTestEnd {
	nowPt linetoArgs lineAngle EndTestCond {
	    true
	} {
	    false
	} ifelse
    } def
    /curveTestEnd {
	nowPt curvetoArgs curveStartAngle EndTestCond {
	    true
	} {
	    false
	} ifelse
    } def
} def

/startAtPoint {
    /StartPoint defPoint
    /lineTestStart {
	nowPt linetoArgs StartPoint linePtIntc {
	    moveto linetoArgs lineto
	    true
	} {
	    false
	} ifelse
    } def
    /curveTestStart {
	nowPt curvetoArgs StartPoint curvePtIntc {
	    pop pop
	    defaultStartSubpath
	    true
	} {
	    false
	} ifelse
    } def
} def

/endAtPoint {
    /EndPoint defPoint
    /lineTestEnd {
	nowPt linetoArgs EndPoint linePtIntc {
	    lineto
	    true
	} {
	    false
	} ifelse
    } def
    /curveTestEnd {
	nowPt curvetoArgs EndPoint curvePtIntc {
	    pop pop
	    defaultEndSubpath
	    true
	} {
	    false
	} ifelse
    } def
} def

%%EndResource
%%BeginResource: textmgr.ps
%!PS-Adobe-2.0

%
% textmgr.ps
%

% Require: functions.ps

<<
    /TextFont /Helvetica findfont 30 scalefont def
    /TextXPos 0 def
    /TextTopYPos 900 def
    /TextYPos 900 def
    /TextLineSkip 40 def
>>
/TextDict exch def

/resetText {
    TextDict begin
	/TextYPos TextTopYPos def
    end
} def

/setTextPos {
    TextDict begin
	dup /TextTopYPos exch def
	/TextYPos exch def
	/TextXPos exch def
    end
} def

%
% font-dict baselineskip --
/setTextFont {
    TextDict begin
	/TextLineSkip exch def
	/TextFont exch def
    end
} def

%
% (string) number --
/stringOfText {
    gsave TextDict begin
	TextFont setfont
	newpath TextXPos TextYPos moveto
	20 string cvs
	CurrentFile ( = ) append exch append ( # ) append exch append
	TextToConsole { dup = } if
	show
	/TextYPos TextYPos TextLineSkip sub def
    end grestore
} def

/TextToConsole false def
%%EndResource
%%BeginResource: unitalic.ps
%!PS-Adobe-2.0

%
% Takes a font dictionary, makes a new font dictionary that is unitalicized, and
% produces the new font.
%

/unitalic {
    dup /FontInfo get /ItalicAngle get
    dup sin exch cos div % Angle had better not be 90
    [ 1 0 4 -1 roll 1 0 0 ] makefont
} def
%%EndResource
%%BeginResource: width.ps
%!PS-Adobe-2.0
%
% width.ps
%
% Determines the appropriate left width.
%
% This entire file is just one big function. It requires that someone (namely,
% widthlibs.ps) define various values that specify the current letter's width,
% various naming conventions, etc.
%
% Requires: pathtricks.ps points.ps functions.ps drawing.ps

/LeftRightWidth {

% Draw some reference lines
gsave
newpath 0 0 moveto 0 200 lineto stroke
0 100 moveto WidthUnit 100 lineto stroke
rightSidebearing 0 moveto 0 200 rlineto stroke
grestore

/Extremes pathExtremes def
Extremes sortByX firstElt /LeftPoint defPoint
Extremes sortByX lastElt /RightPoint defPoint
Extremes sortByY firstElt /BotPoint defPoint
Extremes sortByY lastElt /TopPoint defPoint
LeftPoint ltpointbox
RightPoint rtpointbox
LeftPoint xcoor /LeftEdge exch def
RightPoint xcoor /RightEdge exch def

0 XHeight SubscriptFraction mul horizLineThrough pathLineIntc
sortByX dup firstElt /HalfwayLeft defPoint lastElt /HalfwayRight defPoint

gsave flattenpath
{ HalfwayLeft startAtPoint HalfwayRight endAtPoint } traceSubpath
{ pathExtremes } useSubpath sortByX lastElt /LowerRightPoint defPoint
grestore
LowerRightPoint rtpointbox
LowerRightPoint xcoor /LowerRightEdge exch def

% Chop the letter up into small slices each HeightUnit high. For each slice,
% look at the x coordinates of the intersection, keeping the smallest and
% largest values. Stuff them into an array.
[
    BotPoint ycoor
    HeightUnit
    TopPoint ycoor {
	/curYcoor exch def
	curYcoor XHeight SubscriptFraction mul HeightUnit withinRange {
	    ] { gt } bubblesort /SubPoints exch def [ SubPoints loadArray
	} if
	curYcoor 0 exch horizLineThrough
	pathLineIntc dup length 0 gt {
	    sortByX dup firstElt xcoor exch lastElt xcoor
	} {
	    pop
	} ifelse
    } for
] /Points exch { lt } bubblesort def

% Sort the array by lowest x coordinate. For coordinate n, shift it outward by
% WidthUnit/n. Of those coordinates, take the one that is farthest out.
LeftEdge ForcedWidth sub
1 1 Points length 2 div MaxUnits min {
    dup 1 sub Points exch get exch
    MaxUnits div WidthUnit mul sub
    min
} for

% Draw a line at that farthest sidebearing point.
gsave 2 setlinewidth newpath
    dup dup BotPoint ycoor moveto TopPoint ycoor lineto
stroke grestore

/LeftPosition exch def LeftPosition % For subscript calculation

doLeft (Left) exch neg AdjustScale round cvi stringOfText

% Reverse the array and do everything again, for the right side.
Points revArray pop

RightEdge ForcedWidth add
1 1 Points length 2 div MaxUnits min {
    dup 1 sub Points exch get exch
    MaxUnits div WidthUnit mul add
    max
} for

gsave 2 setlinewidth newpath
    dup dup BotPoint ycoor moveto TopPoint ycoor lineto
stroke grestore

/RightPosition exch def RightPosition % For subscript calculation

doRight (Right) exch rightSidebearing sub AdjustScale round cvi stringOfText

LowerRightEdge ForcedWidth add
1 1 SubPoints length 2 div MaxSubscriptUnits min {
    dup 1 sub SubPoints exch get exch
    MaxSubscriptUnits div WidthUnit mul add
    max
} for

% The subscript cannot extend past the superscript, and it cannot extend beyond
% the specified subscript indentation limit.
RightPosition min RightPosition MaxSubscriptIndent sub max

gsave 2 setlinewidth newpath
    dup dup BotPoint ycoor moveto XHeight SubscriptFraction mul lineto
stroke grestore

doSubscript (Right subscript) exch rightSidebearing sub AdjustScale round cvi
stringOfText

% Now, try to find the center of the top of the letter.

unmeasurableAcccentLetter {
    pathbbox avgPoint
} {
    % Hack: for T, i, and j, measure from the middle of the letter; all other
    % letters, measure from near the top.
    CurrentLetter (T) eq CurrentLetter (i) eq CurrentLetter (j) eq
    or or { 0.5 } { 0.9 } ifelse
    horizSplitLine pathLineIntc sortByX dup
    firstElt /TopLeft defPoint lastElt /TopRight defPoint
    TopLeft ltpointbox TopRight rtpointbox
    TopLeft TopRight avgPoint
} ifelse

 /TopMiddle defPoint TopMiddle pointbox

% This calculates the proper offset from TopMiddle to the accent position.
TopPoint ycoor TopMiddle ycoor sub dup
currentfont /FontInfo get /ItalicAngle get neg dup sin exch cos div mul exch
TopMiddle addPoint /AccentPoint defPoint

AccentPoint pointbox
mark AccentPoint TopMiddle drawLine cleartomark

AccentPoint xcoor RightPosition LeftPosition add 2 div sub

doAccent (Accent point) exch AdjustScale round cvi stringOfText

% In the case of the letters i and j, output the resulting widths so that we can
% calculate the values for the dotless j, even if it doesn't exist.
(i) CurrentLetter eq (j) CurrentLetter eq or {
    /CurrentFile CurrentLetter (-width) append def
    (Width) RightPosition LeftPosition sub AdjustScale round cvi stringOfText
} if

% In the case of the letter i, also do dotless i
(i) CurrentLetter eq {
    gsave 20 dict begin
	0 1 currentfont /Encoding get length 1 sub {
	    dup currentfont /Encoding get exch get /dotlessi eq {
		/DotlessiPos 1 string def
		DotlessiPos exch 0 exch put
		/rightSidebearing { DotlessiPos stringwidth pop } def
		/CurrentLetter (dotlessi) def
		400 0 translate
		DotlessiPos letterPath
		LeftRightWidth
		exit
	    } {
		pop
	    } ifelse
	} for
    end grestore
} if

} def

% Auxiliary function to find letters that should not be measured for the top
% point (instead, the middle of the box should be used). Although it is highly
% unlikely, you may wish to change this list as necessary. In fact, this list
% really should be located somewhere else!
/unmeasurableAcccentLetter {
    false
    UnmeasurableLetters {
	CurrentLetter eq { pop true exit } if
    } forall
} def

/UnmeasurableLetters [ (C) (E) (F) (G) (S) (Z) (a) (c) (e) (o) (r) (z) ] def

% Helper functions in qualities of letters
/doLeft { /CurrentFile { CurrentLetter (-left) append } def } def
/doRight { /CurrentFile { CurrentLetter (-right) append } def } def
/doSubscript { /CurrentFile { CurrentLetter (-subscript) append } def } def
/doAccent { /CurrentFile { CurrentLetter (-accent) append } def } def
/rightSidebearing { CurrentLetter stringwidth pop } def

%%EndResource
%%BeginResource: superness.ps
%
% superness.ps
%
% Functions to determine superness parameters.
%
% Requires: points.ps pathtricks.ps functions.ps
%

% Given a horizontal extreme point and a vertical extreme point and a boolean
% for whether to use the outer or inner intersection point, calculate the points
% relevant to superness.
/findSupernessPoints {
    10 dict begin
	/Outer exch def
	/vertPoint defPoint /horizPoint defPoint
	vertPoint xcoor horizPoint ycoor /Corner defPoint
	horizPoint xcoor vertPoint ycoor /Center defPoint
	Corner pointbox Center  pointbox
	Center Corner pathLineIntc sortByX
	Center xcoor Corner xcoor gt { revArray } if
	dup length 1 gt {
	    dup length 2 sub 2 getinterval
	    Outer { 1 } { 0 } ifelse
	} {
	    0
	} ifelse
	get /SuperPoint defPoint
	SuperPoint pointbox
	Center Corner SuperPoint
    end
} def

% Given a center, a corner, and a superness intersection point, determine the
% superness.
/findSuperness {
    3 dict begin
	/SuperPoint defPoint /Corner defPoint /Center defPoint
	SuperPoint Center subPoint magnitude
	Corner Center subPoint magnitude
	div
    end
} def
%%EndResource
%%BeginResource: Tiffany.pfa
%!PS-AdobeFont-1.0: Tiffany 001.002
%%CreationDate: Mon Mar 27 15:45:46 1995
%%VMusage: 34577 41469
11 dict begin
/FontInfo 10 dict dup begin
/version (001.002) readonly def
/Notice (Copyright (c) 1987, 1990, 1995 Adobe Systems Incorporated.  All Rights Reserved.) readonly def
/FullName (ITC Tiffany Medium) readonly def
/FamilyName (ITC Tiffany) readonly def
/Weight (Medium) readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /Tiffany def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/UniqueID 42149 def
/FontBBox{-142 -288 1224 974}readonly def
currentdict end
currentfile eexec
b5feb4d38f3c1f7e278c320d3411c7eacde276ac5a2a2484e44469938788
61c4278601dd9e2b6060d4da6ef4c81e2b460daa0dcb8f993fd58b6b88be
06d770c08344c46fe6cbf3a44dd9e9495b7fc085ef90b6ce06152f4964f7
7444e7eb0e9f7c68ba9003bec38060e124d46d7265193285eb13b8418f5d
566bc8b78130ed564f5b496ec7936308a29743cfaa4a5f9176b8d5aee222
76e00e47aea04c87b6d9a790a02ee3390fef7f901d672f29d00c16c5825b
7dd3a839ed3dae879f8c739271ed6a4ed58399cb31022a92622a18a6e377
81a30f0dda2568a08a33f939fcccf6a8dbb1d70f904cbbc5ae7a8f54115d
dfd403f0e16626648d373cd0619d8a046f351c9a3e3747de215b02d5298b
40be80f2b6543328ff3214da8e48b23777369e109821ac575df5dd1793cc
c0eb8614dd4e2eeaa29df446ebbd86128b99768b91716902849aa26a0f96
c3968a4ce2c22343d33c8fc1c917934d5c58de12fc886e0dfe8b5cc637d2
f3696a48f03dbb60d0333013c873c4aaa0f5182052c8a9ddfb0faf304733
6c4eea52ba9c44e9560771c723244bd59743a0b5e5bf492fcdb64936671a
e7861ef010b7c9d05416c6d8482bf5e6438ac3dab9b778b38f2ace4b21ea
9f3f86ac4bcf90b26f8acb6c12909661e1a6bdba1cd043eec519c6aba37f
c2e726a2400bf752ea8da6b9084521ca3b02dd680104e3c08bd4f679272e
f667beb6cef59e6d4942213121aa03fa34885e7af90c44a6a5d7d7f1f366
99475608cb40465bfd3a3306c29b5dfa76852cd040940379003d4056e41f
4c3376f1b609eaf0488f19b79394910fb6c7c2136955bdc853942f8f4d27
1b54b3c475b27d7f5985dd84b14c224806ae6358f05cfcedbd9884f38140
e62b06a7c2623ad5ea59d069b33e111ee889148d05e64c20ec0050a9d425
4bd1f6e7962defd634e464ea6ddf098e598a89a4a5009e2a61dc80029a91
3310c90abea864204512ac2624d7bcd3e0260fd1d9c9d653391d86ffe54b
4a13da40c15e8cff9da069255a8acd996f74716984e81120e51ba2577495
aee0c55c6464e3b3baa0116547da22ea0308c362ad03ddb151b7dcbcc935
ddd34e56d7f9fdb04c1ab196ba3b846547f7bd0abd354ace32567a86ba28
cb2754aeb1e15ff7ee45b4972d8bee3f24d0be7d6d796d9807d720243df6
243492495c2636cf47976cc429ee8dc9c414466099ccecf76104a83bc7f7
6a24ec272172447c660843c5a16f7b9839700268b23378c0e362e4afe415
726b4d82e60bc67208ec9e43f1bb55e34d9119c7b88da3298924f53d14d2
2d03133d05a38c9ee0c291dc5f09c551dfcc95479c8b490239fade8f40d4
7d352652a3c3a16d2185e8a0d59b77115519e39fa346c794924ec4cdf02c
3c92bf37b850bc7915086662b4dc96331a58501dc4f4307de3c91384ceee
c397fead1d3ba50ff07c068409ded39e41f9192c066244a428567c57d264
51bb586fff5586ccae14349b706acaa51ee95cfc87d22548daf5ec48e5f0
f9c30927d0d5a082a0d1a7e8b095c633a632e1d5f98cdcf4cd8882d55d50
553cc6ab2065494e4f174f9e50c12b132110df57c4b4d37eccacddcd481e
78f60694bd9a5362ad2b23e4fd5bfca9d93838e933272df162541a78f766
880c215141126d47af929ba4716c5345e164e1af3dd20e267431a14ae415
a8bc1729719737f881ddfe353b49cf83ca83a812718986afe3aa8fd93077
cd139910f1942823043dc724e66d6241d713e0107ab381fd197e166b64b1
96680f7e5c1dd5e366c9cc78381f505b31528420a630ace9ddeb4e1a4e69
c6a2ff43285e1cebc446965a6a4dd68f120cdc5f3160f7fce125421e29df
dddc56ce3802c43f52381870c215e2b7662d169a1cae03c37f18e4cf0724
5826f1af1262e77a7ec40e4163a220d7128e5a619369f1419f9d32c4652a
646552a788ee6edcedf235f4678159c8887d1a6d82a2c087f39ec2ba12c4
954493bd8a9f2e31e292f6fb0cf63cdd5fe6780c60d03a7adca6e073d487
310da046f65fb84f3bec638900645372b21965174afd16f712402ab6ca37
5b2f534617158e616d36e274906134b72ecf11678f6cc92f0093b9de10c7
bb6025ecabc5dbe46934ed0d4232a2af75faef2affbb7a33463cb52cba8b
9bd2064f556991c78c326a209c42934fdf4ea5ee265437f227614a16087a
0ebc9654a25ff81598234f2403e532229f3674ece80fdceb8ab540f7795d
66f69768b7c3626b25bf17956d786382de800269e24f742ffa6c65c910e6
5902edc3a18ba36f7b2c018d3a43f3affa1f8e04957d175ad32f5b0541d3
ec21a4f114f8c6ab306d294c14b10051b29e4a7793bf69755a1cd2ee5fca
0edb24b20644345d125f88bd3f369a9311e4b77cd0153dddee4fe8ed4fe5
3dfd9f8b6fc0e286eb0fd2b19998bf99fa8bb33f85bd1914f9109b631234
08e0e549c5706bdf24d13a744cad6eb5198ce829c347fe58bec786383d4e
8403faf9e2127d79cdb0a26fa7826a3ebff10c5644e28d002b26487050ca
35ef462f8cf493676de5025f51884d580f75419e27d99cc00567eecbca2f
35a95d73d92a1105933646fd9d739b3f15042c8d762328b52c92fb7be58b
19df0bc0891b49cea500a10bf48344f152f1fc39e7197c308e2b85af8e3a
52ac6afad4109c07d1135d87305c9b5add4c60ad2c6ce09e94c008d3f383
7bdff5ed7da68abd396100af21730ad35d6a69530a86699aa9ab4802f1d1
c980bddd027840d15565335cc40d38639af94dfc48f1a84ef2d7fd6d3059
06e8511a213c4cc0ea98a6a551c2dcef7124b692d25dac7d621737bc83a2
f196c515f05aad1dde0b22a62f4b02d7917076f4dff8b5821acb66a11a38
2321689888ccae192eb6fcf50ea463d2e903a85688257a0acae8538f0735
fa77d3903529acaef111f3d074d55487c3bf349ddbeffc14d1a6b2c475fc
6770c26a184d895ac430fbf53d72e1161820e835a135d1439796301d97d9
e0effcf0fb25c044466cfb103869e6c3087ca80bc73325374d34a2b7b1ad
316369c36807473007f08b2807ebdd13071812c0cf0b6141b707d8208764
3ae11c79f8e5cc5c52b8ee39c23f36915b0fe98b8287a78adf3f76224c62
b2f202983e9240bbb60d8e1ac79410a657c1df3e78861f5c839b392e543f
5e6b28e2a7d30f5f17203ea4898fbebde6cb7439c03e84bc1361c8f9f8ee
8a6899349cab37d437dd2bd1b455026e890314993e9a0f1567c9b8654a2d
9f68278e23e04ea9ee7fcb2e3716c7eda6d5958092060b894cdf93e19b6c
d84acc0534b29d349a9fc8bd1a5baa2a069ee7dc2def880c3bb93408ac84
1de6226f730f24747d4034a974df4fac15f3197c0a8fd8f64ca95e2ee3f9
ed56dd4d93b7cf42ed37e408d760c6ab439e7cafe783452a7dd7aabd8d4e
b324b01ec018a1c2fb44282713812f76a764201ddd7e184c095d132d6b62
dcabc8c11c83101831968f0f43a5c155ace515e2823aeae165b5e86d246d
27c75f391092e64bd924463615289d46c4f3ee86aa4d6684b703526c1874
390660c14c47edbbc4916c1dd3e8c5828c957202122abd9d79e377eb975a
4615e05bf6e98c9d01c72ef1b58b715030696a02e01ebfeef88752218a52
38cbf3c44fabf9b840b8fce178053cbd1769131000cae75022b1ddc584b7
5b0bf61b9442837dedd0ed2c92182db1825fc30e01c82cda03da9f20bd70
68d053f6bc3c63987cfd46d2e35b6d44e459cea88cce5a4afd17cf1fe6f6
a6eafde13969f5c38f6309a6b7867482f85f13a862fc245742b4399af0bb
c20d87440150a25f12b1fcf2de62a15f754adcea0b18f47c1c373ef5029b
76b8e1e5915cbd1f17a0307a4b1813c091a4c6a7756b7b00a3527ab5d974
b5b1c1df91657589ed2db10bd8624f7239e26485e41502b915ff910e63ce
4761f713c5a29389420423cf9ac01bdc80be060b6dae7fd227b352ebc5e8
bb7ac1a4593d3c0b2c76514ec5c2169b1ebf8214a023d9bfbb3c737a2900
08a594163fdb2c60c5074725514ecc673e66237033969253435588b749cc
12d51f4a750f07058be7e23077d449d418b1cf7defd8f08ed56490b86461
51732f9d266add683d480651ff2b4fe0892bcf0dca9b655e4177466c12e2
bbc79b13ad56f4438aa14f335998c8bb7d06c66d71288f18e60d96fe8528
4b367ada861f4f779dab3c8aee935fc0791969515efb9bfb4705319e03cb
1c3c781faa728039c85d571a3a76e475dbdf42c167add0e4f7e4fa3a92a3
367e850f9d9a9f17bcf0669fe2c8d6607d54c233605e93d69f28cf0c49ca
174e99fdd20199a31349bad6969a314a9ae34058b4178adda832aa6c7cb3
ba93ed337783019f736b0be2a726d73b7331b6f4d225453cebe531100d48
dcdf914317b80d6d09981f213e2f9cc6f2247027ec2ec8dbc551b36446f1
5e2398cbeb3f86aa312810dff7894fdda193c6e5216ce387a3aed8d7fb99
643a83772641717c77dbee85a07a0070ebb61c6393c29da6a7ea49c5d06d
6cd35fa022f217a969eeb6dd16d7df1e8d4e1f38efe7fc15bb8f3361711f
8fbea7771f103af8b31e5694f4d6e5d28f77e7251253465f1e07085fee79
52f5e3755ca0606f69df486a884fc629d5d7d82a6335bc3bfc1d1d993c32
ff6b230dd94dd2eec34a650fe1346b6e3c0ca4e5dea82a2832c6e8935bb0
3e500359776dcb9c0b211c49e3bd4e82df9eb9e491435d623ce061ccc27e
02fc3a66df74733d74470638e72a329609d382df173b71dcea98865c0ec4
7efa6d899126b167ff207b1a24d15df589892d3f46dbfb2b59af2aff58a7
a976464c9c47c71173e3b0870101034d85cebc20da76a0dd59984d58f34a
2c6ab0cd3d59a73257f245ed712354493e3254dac7dc9f7d2b30bc43567f
381f364ac9f46961192996b7c09630f88e6e5afd68afc52b5a860ecd47b3
9f29f39b0ee875e1b01c5863fec50bbbc770f023c2cc272837b09edb5a33
ccd529d0d4afeb4dc61056326c967552631c834221c07aec1c33cc6bc6ae
9a72789c3c322ca0a3cc2efd296b3d1900f897b5ce0943fe5eecaa1406d7
23136b827851a3a85ff318db25a8cdf95932737c313b4f6461422ec7be64
43145b72b951aaabbd04a7e7bf6820dfb1d4921f85c8924492303a205b07
b15324b1bab32bb3d9cb6eab10143444f32758715115c11ac20d7ab0037e
21f3f3d4dc3ccbdde56f7ed7f840e8979e256ce0c57f4948deeee227e30e
ccfdb82ac436e1c1e1fd09fd96a1928b6317262e8f8dfe55dac218d7635b
3386e362ec74254b7ace2d4cb6d06d82493b2b4ffbca1ad6f7e50dd88a14
487caf27cae5b73f0d4ae255af311143a765095a69a26c664509ff2d0375
53551cf504ab10139ad1966d7c9fa166917458a210fb751a8ff79d4a12c3
1e0ec74a602bc12ecbee1178398c4dfd4533ff0d5bc692203ac0b8a658ac
3e8dc9334b6fe2507ff48bb4064eaefd1214203ca149724eb701cf2f20d7
66ef5c8ec0f578980a008edef6e9d0a891b16a3c8122dd2ae97d8c4b57f2
471d3beb59c3ba1c81d941940d7f5073084575e9bb251db17840a9233144
a05943abd5ce72851a5584a6b7a4a48d88629064057248dcb273e7b72119
85d09a376a1f7164e6eb3612cd3562509b1ecd559cd0a0288b2221bf8f26
40a68e4799efdbdff277a45aceb5c086d78e06d9cedc8b07e27a9725e417
1d1ceddd2b12b1ceda08d29972e847810b3e3d695bb7479a6a59d064e4d3
73de7ab2c610d12d3a74b5f1dd450787e4b79c3a3c57b9c7dc9c6df936bf
3651c7613d250e463ee0e0298b12d962676cce6f529a894801ef349c666d
673fd61772ab11a5674de96bb035c766843934cbe11f8dae3bc5bd555f38
9bda338736ec5a110770eb0e6532a4248b865ee508c03e2b60f67b0011ba
939dd24f07b260568cf855fe6c8711e1f50172f4e5333a06b22cb7c1cec4
f00f7599c2fd1c70203fd86724fbd00b58d80b96591ec7bd683654da9eec
6ccc9220b06fb13b9052c36218394b8e497214e9dcadf77271b75ee612b7
f12e73771a9abc87462140e07fa012e90f3863a68d9f19e4bf37b97790bb
743a96cf329fffc47fa639d1f0c8e411cf7fd9a42c1e5dae9a1aa5b181b7
990e12b9d8b8588bb274601ce7bd3f3cd3922e0bf82e7cf08e7ffe03a4c6
425347e5809463c27326ac79d060a1b0cfdfe4e452f4d7fdba6cfead015f
9b5e85d911a1c596f38ef81423d30dd12969a665799ce2d18680bacffef0
807a95e8cc2332ecea3741e6b69e6ab51935ebb70b5702f450669e17203e
94bbdee7c0ade4fe96e53fed60c9021110dc9ae6da3ca794314dabdb9ac7
8c98ae7a1764e077afcccb8c29e25284c7caa6edcd039941755cafd76263
0fbf8d1e31afdc637179a16008c37e26f463fd66f209ea49815db43c7714
b41766e4512cc7b2d7abe01ede7c347e9aa35209b37ca72215c7eb7c12a4
9c404e100fda69e7ceecf077e7941ad8efe18ff3a61799d63f1112a234ed
273e2cee725c627f7c3bd24a901a7f404667c5fdec2916c92d7c7f0f0983
4f266d728334bf406c47db7754f5b96b6539dba29d429274b059c59ae29c
03a96370490a0d5ae370f346a8d1257c11f9b18475bb5c818eac026dc8e9
34f3f16299ca96cc25cfd1685b7c3fb025cc407969c8b21d67d71a8615ed
384fba5bdb44b28014e22990bd46022b0d7776b59a34131aa113a07b6d98
3e957e676c74d1b1215e220021082df68a84cb91262b7178cec65c97f879
4ee29ac70ebce954c4d6d1524f132a4b808aa94cb499c3f27d769f2e05df
ea5fc4f38fe20fa24a8e7e8089814caf0690334095cc94e50888736666d0
45aa57838ed3dcf7e9d9576c569991f9bf1e6875fcec78fd02e22fa8fba3
f27da4d62a011029ea4c062f4c27715acea08b64b403e67b996228386500
c58d3b270ab88ab2a102308d1ded4211ff8c6591288d099163133d42c0b6
d52378fd367cbdba96fbf72cbd3ce2928144faeb007d2d0d943e4a1fd43d
9117913b304db873d7202da30a2fa545832861bd92c6b3a8d29bae3825aa
74f9ba9cb68da91815337d975e64081cceca001d875718b37877d5a33442
84f23a6c84c8e8c14614c9181ec2eec753c153a2702d5777ee712763eb84
03a221e1c30630346006f3e75a2ce905bb0fd54433588caded96cb1a19aa
54e002dd1e62462c8ad38ae13fa6857d04837bcedafa94c60b1dc71da51f
9946639788c06afaa8b0084cf8f7e4c6bfa2eb0af422e9551cbdc5800499
4562cf12565adb77ecdf6836ef914e5e9e1a751300ab9f9352e5adbcba4a
8a56a67acff4b805deda1fdfc986a9834509c98058b68c38942df442af2e
7a3e034c69dac459f9552d4c339bfd79457c0e9814001518cb3e58e1a3a2
fc7079256478e56b9b009ad3aa385d880d55f9289601d5774ac0ccbb3be8
cdc21e2a157abd83921bd389fb6e74b0df0b020bdbddb680c7cec4598bd7
399298c7ed8677b394b4c641f602217eb78faf0405c040a7e4ba792c8ea4
4b056d9bd039807e9610ee39672d078b45db5992235ce8dc9dd710de4fd8
ddc4709ff15ecc9d5905f606a4f291af340f99806f9dde5dfbc889b081cb
801dff7a0db12a7687af5e2f4c3e4c4f0ffff524824589a24a0b7e6fbd27
ba6e71e8aa0dba95827f51e088bc7669c93aa37c1f64929e20531c694100
8f4947638245a549c091358983c68dfeedd25ce473e4a61cbff1608d2213
16e8d631f5d2a28e37917d2ce479a67c995cb2efc07125c06408446be114
0bb2b36b33286a2aba3e2bf54b64069178007c06cf7d96f5da1103b12de6
f34a26309a79327515a31dd14764ce050f4c38bd0cf2f18352c3de3dcf46
ff699b080490827deab840570a3ac1f64a25ef0ca4571b8f6c00b8e52a75
d9634d2d04513208330cb7e9d9a8632637d49c7c99f363f5047c5b14a7c0
416eb2fc01f7644a4f7db317ea322418d80cbeaa79a217a3804ec568085f
c0aff6b33448bd7ea4a0db8e4cacacdb36b2d45e42ebe1eeac4a81eee243
a44575e2deebe71da3010140f5ffeda15112b37009990a1f03f6c4bde29f
07bc93043c3e0ade93830e5aefabffad104b9246dceac6c97bc507260cac
9f0d4844690eee1ba1fca3fe4844429a706ad3c05081b6ed6efce45c097f
ded86be399a0af0c2e72f8377d50ab1fbb8be115536f59f383bb5fe8354a
03fe9e3eedfd37d82aa50c4e3868544ab18ad36172b36f9fed5bd54eb704
309c4aeb61c206641159fa4f3fb3a0b9cc43dbd98ce6e627ab845f19a5a6
bbe2072724e71795165819dd9da77e3ba288cb5013ea7b625140da093a86
543dc8579a03c7e9598324d4264b30f1c3039b98dd57da9a338306cfc442
cefb9f776edcd091fbbc0b0d36854e4945b260aeff55cb11de97e3223aed
264272994d774e7a4099fe6a4505869d915695f9b92c79ef6dedcf0f20ab
523e24f4f579eb9e1153387a8e63d235a11016690d1f50d0810240023282
e6226c06531973c213207aee0f2eb1316063fdcc47019e5adf5734096afb
c6226fa9a50a6adda8c7f8d5ae7c9a3e38e8b174fa9dbba18cc0a92d64fc
17761af34c70cc1d8d47537df757de76e98ce409e169a87d1b716b516f53
63c4e4052517107a32a50bc0597e23c74650fb54711e4956eb7cda4e0ae2
fccba6513e2114c6b3f2875cb404d02520b77115b0c5fb58e6348a24e0d9
58f177c15195651a20c7f4020d71c1703935a01f9dd816a3443ae51e0eac
490aaec1c6df5f6ab43781c7fbddc7a9a0c183e6d11b28bdf1d30a531315
3c0a6ae92a619ecb0122ffe55a492ad5d43d7a000625fc5b8b6e1b0bec16
feaa39769e9472b26883890aa3d05a660ea3317ddcb014a242e8cd2c69e2
491885d4c71ac7a48e42b2c31a7774a6bfc269b4d125fc3b7de4827be370
718bdfcf98228c00a5f9086a250ea74bc11f0358219fc0a72599844ff84b
f5939a9b5f43a7bc94e9c5f3bd2af588577539fe53d68036eff357814826
94d17bc8e933460175bd7472925c636d3c066e8e96a059856232d0c33dbc
171e47390bad9d7568cd9b87eefb1abc2bfbf9daefe9d6ae7dac8234edbf
b591fa8fb9853e072caf558e92f4566e251bc9b7d95da6d35fb7ca01ca5a
267e1fbd0a6024d1d9a9e4a62fa9d4cc03a12a4cae3b218e6de1c73acc64
406de5d90a0d14f800c5006763586411437311d148fb3da4583f87e459f6
b97787f54f0ebc7523d92f2190f679b60d9c260a8e2ddbebfda3fe0597c0
92133eea9a641d834648a3f2ceb5381c2c68ce685290a5ebfe87685f2308
1104ef2877070736168272f62a5247bc84e74f6f4f1693d8f63e4008e87a
f1466c7fae1315e567ca5dc4f5be0c5e7a74a7582cfdd5578e06cbd9fe72
f40e3100a4b94ad15d9d208492fb5fe551e4c6297535bef9bea7aff74d6d
352a9298623f9f1fc004afca20c108b716d5d9b4ab10b5135a54b6d9f979
f326b255571f138b71dd1bf291985a236f4dcf3449874961eed63c91373d
0b37307a707a65978f849da945f7660fd0a1b456b91d9e632c3396211a93
a07231b24c233181b5490c40e3c4b53393b1e95328d30838e6a0b8d7ef57
90ac4e45a59814ef6df37a9ab96bf310f241520626ce1b20e379d5d0d7cf
b2f709a6b8f31c1c7ffcb882f726abb81ede5f3c07da1bbc955a5f74a2d4
e08ca6d033a42e6c202bc959b1818b7d3e16da7af753078a1a7fe2e4ef7b
c2255e5832a84021d9a0cd9e12eeb3ee9f5d9fe5b9ebd1db5aaa2b8ee13c
faaf1e2977977bd092cc41be6d845e5c8f93fcab7ae8c1b9d6298c5f3140
3b3ec3157374ba7e7bebdc692c45a0f0c6787e05e2e1f307de22407f2111
18dadcd83778dd7b2f6fff24408a49d722e3030d08ce382b3ab58c74434f
603ddb68d36ed0e9a9e8f85d57c215a946dbbfcbf1aee4bdff83061c9db9
eef35de48432bbab96b5a9ad4c4ffbc3a6b53cfe611b4f9ba0b4bfef151e
af672f7d9e00bbdbf75b613bea94ba079647e6165a7485192c9a3a2dad30
9a74d4dbe9fb76ad44a2389f2df32707fa6cd97fb6126e32965b8a36ca59
99a4f8e31614730bb812a807fdaa805e647d0c63b9d3a8a003cae4ec6db1
38732bb42f99dfdaaf3e311819b6a4846ca9971fd17b84979aedda8d4726
f26e67ee3ffde16fef019f6ab915328ed1343e79f531231ee0f62293a937
038e313ffc0fa54a784dc7e1c655f09621ea19272f9ff94cda6312939844
40983aee15d9dee5c209bed1dffd9d9e9dbd128e193795bd6b6f4477982a
49bbb0f7668bbc78626a0967efd45ed70d39093f595f02d3556506eb6d10
38a93e5e1ad504cb2205561093447b0565e23631e35e2efbda523b8422a4
6ca54a75fd87e8071098ab8a511c5540fb98cb729c31eb6dc466982239cf
9280c5727505986a13223dfd0b147d162310bad09d830f9970c03fa39bc3
f3a40ecdb71d7cde69983cbbc90a91cb8a4cb9cdc773b77d7ec46ad2e8f7
94c15464513c84cc8247386014a23500fcfc65a55f326a517418b18903b2
d78d43fd6cb2346d8c9109ded708ef3c634fb7a7fc0101c6453708686932
5a281beb34b57a2a7a43b5f99a61294145bdfeb49acaab7c2517c3694c74
2bb3c07f5b5f70e835d04e65fccfda98e622dcc8b8ea7b18f9c07869ef7a
8e3a1f3526325b2d6fb7f063ef97bdff7e8ec00bd10b10379fe4ebdf6f2e
ae8ed9260b45633dc4f0a5317100d5dbee758fb34ef203efd5ec448c7ac0
a2d67401b543428f175df29b432ff0220bdd64bc8ea7df197489bf12068f
f60385a7cbb87f0bf6bdc617db46c2509c738c360e479867031a5301ed30
086022d63e628571dccd47a45d8e9a177e0ec47f0813c096f242eed094b1
1a9909751177304b414df1a49eebbc364c67144f779dab3c8aee933ca84f
d8eba9a2f226dc47b446e50cfb9b898b9e1bd35ca09cbb15ba4126e09182
73dcac033693928402ef582dbb689d81c75e40549fd4666a3026c4880b7b
12a4f11c363f875881786c45982e4d62dc7a678aa26e517db7df35efd5ba
f278bed4eb3d298cc3b400f6a0a7e6709dc5b92c9e3e48bfa5be91bc0da3
ee99d6ea98cb94aaeef4f254b6122a445edd99e146ad4379d11daafe282f
377acdb75ad3e82094a3bf74d758a8719b797b1157ed0df5c90eb3b6d8df
78479a8f65e98ff995257864e8d8df26fef15b6fc954f67e8941a14f07e0
fbeadb85df80e12e60c262536d2263697e323f7ae408dda00205ed61bca8
6e0885ac643c700711d5a69a963a13f37057e8d2505b86358dcc920ace6d
50afe948c756937b978479fe989f88d52e61953b4ac19f3f221978f7046f
5090a7027f1c2a6e7b7495d4a9c5f6e1b48063eb50dec037f51ba118b6cc
8cda7f9aeffebdd6900a3cd791242763fd449b1af59bc178687b0f2f7647
71edc0eadd37d80dd6a22eac5a3f9d962eb0bd328b132a0e9ec7d7196e85
ad8523c38d05385614b2f402286854ebf10fbd304b41cdeec6abdaf38cac
9fe8c2b35a3330a098c862a72f41f313f00c9f34982e705af9ae286a19c7
3376d66da9243230d62345fc3aeca92a47bde590b838d8accb05f41db1bd
761276ac96343cac367df2453187c3e818e49e2df1d5a5fec76402542159
cd556307dbfa66871da722dc4cbb499b9df512bcd4653457fa0e5e014cc4
ffe0077ca68dcac3e2a3dcf1c9d8db322e5a37620ae4def4c40ca4749f20
15e2cf4a3f95b6b515fdea414ecf42eebf38c6e7027920a02db0ac8947c5
2002ed1933b85c6f56ff3b18e9e8d7284d3b165987506da5a2a149c3fb54
8b862a82a209e2423e1b7eddf51e8f7e23ee1d947cb7933b865dee855185
6ba5efb86bd91149d23e5a7fd7063a46969298bcbad78a3a647443436da4
7ab7c174ef28453382966ddb0b950878ecf88bfe548f1d618ff80b271bab
e42452d970232cf211e578f9eac53a0b9f5634a0e0825d979e785158f676
9d34a2346a79040d294f9205c9e4b76417582b4f744832e6d0275dd7dd0d
d6cf8c87f87ea5724d88eb23156df538dce7dfcdef457f81f253760297e9
03b3b119d97a2cf9cd6e18253c853fff569888d44f418e9dd00d9a81cab1
378182192a70650811a9bd4ff655a6a97a88f4d18f91de1bfa82e6fc5005
74d625a6088223179ffc1eec83bb5674d6a127668959110f6eeabe3d78c7
aeeccc6436d215cfdb24add3a0c182116a0eedd9170b11fbabf8b4947f59
33eb73293b175b8d04616d3df92c8ec0a1dc86ace75c5161b53faf64d013
81decb128daf4182a8a92339695c5461727bc6bff2819fa9236baefab179
7f470078ef193c9b2ceacc5f0a84482b449c019df53f32b2557286fe976d
7155839cebaa5565909ccbf81e832594e6c78f0e35ccf90e97a90b73b55f
72f9cac8d022f0ce82591bdb856488c729dc69552586987e508a79c1de77
e8c3c06331ac1c0d991dbd792f1601e7865aebb3583200d300e3b2488013
dae254b424cbdf71cd9675c42a1968c9c1bfbc72999473b99fc78f65d007
3b566cacf7bb5c9f0575b401a1e45bfdf270549ecb7af2749e441d215562
c764e7e2d3320dc48cd7e92be025fcc12b290bc7d6d37cc0f96661f208cf
bab50df80baaaa399c390757f943237d8ae1851970372b72cf35172ff3c7
41bcf0306f419546a7668573ee528e90e3f867842a8ea0492a750f6d890a
41f10ae64c4905665e392ff8f648a3a9e209cae2af91318ac9f3b84aa964
ff48d4b632fde0f30138fdcd7221a0fb7e7941919b3031a2d45f344da36e
f3d77096e62a8399f8007d7b111490fc4917baebcbb4f483087da8efd24b
b6c95328b189ea29e319a8a2561d834794e5f14201cf5cd5d53a239e9ac0
6026d9784b58c0dbff804898146b1843b6c8b29ee898a605082019d64a6c
c100bcc9ec15715638efe29338c06a9fd0473db90bbd19ad8debd7270b01
656651fc7871516c7778791d063967414731f0aa41845c2ecc21ce58364b
d88a72c35b672edd9421a9cf402fdf5db3e95252c7a1a45e38424a37a52e
07a530cb33da1e245e0656a582ad21095cb5e02ec4d8b0f73b4a0b39d25f
d7a48ef0c740861912dc84303ffc16d7983a789515c749694c0a2b0014ca
518b49a1877456e9b9bedf40df00df844fda3bf9d93753268ddd86ec8f16
02ca4e94ce5fda3e4d32f435d5bff1362c0f524d4ea45e66e89c31a0167d
93b239c91123abe847d5ac80a3827fb70e0ffcf4a20810e79057b49dbf21
83841c2ab1a63b038340cbfa0c9557fef95efb54f1c329d5d7d82a6335bc
43a10411ed9843db8e53921741047cfcd57d56146ab9cad6f0640c08c691
7610810343ea853bb305319defc7c665f17e14b9fe7bbac97f4a342fade4
8af03de01d179d789e0a9e7c18f1087f21d8b6a58a0bedf184aa18b05ce4
f18977ffa57f0e148007873199146124b280ad0801138f236120e286ee3a
d320272e0d971c0b29174744009532c7a7ade776f34c21215e74a6589519
31f96f029bfbc63b90de3c2f2963da9fdf529059f9d61e4ebc065ad994c2
b31cc6f6c40fb7669a250e4e60ce230288d2f64427fbb241eef622fd7222
8ac15d0d1538b8b4da0ab3b6e18f16035fbbb1e33d293cab90d09c1e485c
fb4ea768e8c8cfba26b5af6585e9c2cbdfd6c3110cd716f3bdefff56e05b
2be7bd830fb51541dfd848d140a126159b31994ae698db32f5ba1c73250e
14736f544ed344b302734b1b6c03947859e1a99c699a15262a3286810dc4
f20586d623396686ddca417b9ad1a4910b3753b7bdf30145f0e8971bf60b
86ae97c9bfa114e19ae2811b1e98e259719aa449853123998553ad509905
f0981631fb1e4ca474392deb2cfa14afcd3446482737612b350afda7e7d9
42d40aebd79d4ede3ec0d110e868be5dacec43096bff8cf83a0f1ee6411b
a2f73f3c0eab85b4bdf917226df3bbf81a1a8e2a625ea341928177f3a1ca
d94b95c2b5ef4b994061200b6a1fcb907fb2677a1da32544160b2c80a7a0
1b772fa64a560a0ee4086de018ddc67e1a414446abe4f86103db0e7023ca
4a6e1691ba63c29c3a6678028d9315a2f422d56340e9411c13be5c3914ac
a9e59b5726d38617047da2b806fb0b6eb79ce8b5487584b88c5fcbb74675
0a9d27eb1885f8f476030c9f8c4b133ee6cbab831fbaf99207b301fe99f0
243168b1365dfcda140773daec8dac75d569c08d537491a93fe8188a5ed6
9d2dbd2dd6048ad564ec23bb1003ecfa9b826f3c65abebd6290312cffc2a
f1bec11e2f9a0b0bf6afe662929f20956624482801fbf93f90bb44ed5f23
6b902a47f12293a35293d810b63de1aea9a1e80efbdc6424a2ec3bf5197b
c8a6e00123a7a586a8f54a4792ca83dd24eac5c812e48cc78f583e31cd06
fd13d9fae8ee6d3c73fe1ae57164fbbf38aad47e59285f3fdfe603ea0114
1c18fcc390c425ac9484a4bdb7b8be5a04a0593a9c0407bcf9e6e1ecdc6f
650582eb8aa15fcf55d409355c83494c811458f053f226b93e02b6cd4afd
0416dac498b4913f8b50158f5eb7a749ac0dee4cbad30183393d69245303
572fcba286d0e828fa9e324f4f57419b275a77a0e204049b7768584a6e35
3eb1cb923c0e4b87f5cb4afc84c26ad39134d41dfd7f6ff29af8d5969a7e
0f1d4d8a4d91c6f9eccf3d02124c4bfdf287647f4954e1a47b253bda861c
16d0283c2b9b1397810c9f9cc7f784bdea82c77122654d673454746cc870
386ace8e65c0623d3bb63d79d00e7e0944071860a062ea1ff40529617aa6
4a84e1dd3d001f6fcb3846f1d348168ece11dc4e9f062b18f42c3ad3bcd4
e545f0d3d5b8a89b0be1a6f7c564c5afea9ae00b38da4f41822386f052ba
11810fbbf434c5356276597e292faebd8f10cd9c2e67efd88b04952eff6c
50cdbb870da56b23b83e93f9f8212db18efd296561669c3b1cc3b5d7ca99
a6f90db191009e98c587da3c52b7a1cffa4a4be835291eac92d96495bd3c
224916686280438ffb1c6fd5570f9930c72171b0649f69e51bf0aa1828d1
1f514d0df5804f8c2f5f03da3f57e819122856b4c9cdf8d31921be21bf2d
a723bb4620f1ce1f90eb46ee7f79c5c2575a961c5fce5412cb66edde5e05
dcf80a52acefbcac72ddd320fe430640a9f92880296abf4ee287a717156d
bf6e316a7e3b909b010f015a670e2ca2d6baf878198e29484ccf83a35db8
d70598303686a5ec38e8867725f77a603c80a751ed82c1d459885db534ae
861c3fb4b3409aa3733e23b35ace83b9f594b777dfa5e0efdb02355e0b5c
56d926955c7510ea319e90e842787ce9460952495dbce7f9543ab2c4ebc5
30082fd10c3f9bfb1f39db4779071fd539ea2eb389640f2294af805c0948
64e2c370be6198bc7d0e0140cf13c50dee7f5c97c698d6b7f1ee7d0a5bb3
961f49d80cf9490f8851baed4c4b7f59b0c6f18fecc1c93dffeceafe4e93
68c39d1379210dc4439e0c0c96f4bbef559bfd6a024c5346432f2ce61fd7
d23d94fecc9816ee94b3a8b83f37c97a3f42666e653f380dcc7cc1e33e6f
05b33a92b6637035817320b7bd4bcd245104017bb3660eaf2c99d3653797
8d353f009a1cec85e505f74700eb841d44ca017d4e01cfda540c5025988e
b47d89480456495dfbd6027ebd8c1716e9f5a6fd1c3870f730609e77c1bb
215662fa3f6394bc186a6e400bc712a9fa4a392979bc5336e60f31b17da7
e0a195cc8fbeebf64aad96041fd7f6955bfc80fc281f3d2d330940af4416
c56007711c5f556f069757db93c400b86716a9203796711f72a927c5a69b
4251925f5d505684937a2038700cf387379bba8c09f3bc4a8228e60c4c18
40373e2d9aad0c37044298e20573d206ecfb6096c2454e06866711d0c504
49e7191d32f82d265dfab592f8cfcdeeab84efa132333df4a09be742a213
9c57e125e2ace2652509cc182128b51438777e0c4a67a21da3c51d27bbcc
0ac594f579578de7ba9924d77f4ca6aaa2bc0af34baa6c6fbb6730bfb605
42686e2487c70509b2978569c576855f3cc752d70f279dfd18d39716c888
a0ce3365ca34bf5f0d0c6edf5f31364885aaf6cb7861320ca76282d4d0df
f8bc0cc2f93615bf5a1ad00988d0847d02a9bb9744d6abd081bda7fd3d7e
506581357d74841005c654e2fc8fb72977d8d0a2c5c376603666f08406d3
e2d1ba05868aaec207f653957ecffff26c100c31d5e616f9f82fea1a9f40
5bf71795093c74be0179079bb1db67be13f9c2e90fdd2c4ad737b0a974fc
5907c59c7018ee3fe426b82216be8ffeaffcb3cdfe66456bc9a27ac14a58
58e928ff8464c254182f4b54750c73518c9c15dd85ed15147d399f286dc4
7fd8efe1678582b67960014e254290d9dcc2ee1171a5228e7e45ea5d459f
325d24b4a3913e90cdb2583f38356b5457d67580800b8a17ab351587280a
cb2162dd017c4e9c6f1349faadf14a866f29f47ef304f39dafcb48162a95
7dee70f6202bf651dfa2290ba1260a2191e2162fcfd34eaa289bd7a717cf
50aad4380b244dad9d86b5639199339cbc4be554c75d3887dc1cc08f5af3
902a5a9902ca66c3801ebf4a110e11003f3b6a9598e887040ff1b72d68f8
047bb8755f8e9a5b3480ac1087ddae983f34e595c736eac85bb66915fe3c
54e884e69eb1e23678606e3c5f4878524575bc6bae84d6ad854604768f06
0a01f4e92ccbf2bdccdfc5c4460b356008db7dfc6ab8938e8b7fc3dc56df
73176b5b6925be8d8831e3bea9f249ea2d7f6a70158874a49b33cded173e
79ba18ed191cdf99960097b12afc53d975f9edf953dda4399433335032f9
89f10af383ab6c7df6803480c224173fdcab32d6d99a208315117a966d90
6f4feb944537f518f296666a5563c1f71398a06dee08e6025f4509283a43
8452d3b78d8bc13f4fbf89c724dcee2882f1d4ec2d4e514efc8dc26d570a
491c42f4059ddfeb0b9b2042730b94a8b918455b4008c1649cc6d43707a3
0a163b1b20b90b3cc566c8bbda1c184a05bc0c810a6629e64ab1dd143a36
c8fa71aa722e3374929b1fb37f4d456b35e613d15b02d6f3610c0db93573
a4961a9d6598d8296b655474d9bc2ef34778987a951382fd232fa057a0b7
65bcb0038976a17e1b7bc2dc0a5929d5ccb0ff2aa2aafcf541849c3451f5
bafc2df6e2237905083571ba89f1f66678b0e41321f73570080996e5adee
79c74f9670d93db925aceaf9e4b67d82af9b5c1446f34c59abdf82c5b2b4
9246aefab35220df68b180a7732284996d4d8e24adc0c48b56333769281c
e4bf5bc64c8ba08a1019d4d36216c845e01f3097f11e97c1c8dd6ffc62d2
0e6a976bdcf7fd0a1a8151ddf4551b8024eb7b88c5f2b9d952b784c87568
7e5cdbe02c82a40ec81333f045a795690fc7aaa2ec9c8a3e17826534f853
841a8ec25a80adb62aa270bf6335d670ec10f659147ab5e4e800d145eb9e
8b4d94b7667b5025c5611c0f5cca7a007ba99623ef0a7a8cc61fef1a84c5
f6246c5bdbc51f7a3c7bd6b077033d81ac8e21b5efe1e06cb03d472a4c9a
cca30f7afeb05258c82121fb8e0de89eafd68657feef0932dd0939fd6fc2
1e275269ea5268f05933e804eba1348f28e20947ec7242d28aebb2ad5784
d016979d57be3b68f0ee18196c4a968b6554f1c1fa3df6df028a32a53121
7b3ac29015ca40f347e0a4c9232781beae8f13f0ee513e8d4d4699dd4a54
691ff37c6fe940078853c5c3b13fdcea874392bbf0ef536be310da08377c
71d0fe7cbd2dde06ff19d5ca9978b12230d50a4d11225ba172fe70eb033b
ecdca076258ef1efbf0ff1b5b18bffcca0b8bc5b0d2a370a3867ec0757bb
5e8392514c2255689179d6bb3be4de7cf9a8a8cb28daad2cb83ba82ffab7
652590a043b0e22e8690790477f8969578fa26ec14a5d163da7a3b63b595
e7f4122da6a202c1a3d7ea858c1b44888702b182d10e949822c869efa508
49e863ed9cf2d7a7b4e6acb89e9bc9be36ce5dded2addc8bf7521bb0f1ed
2a9bb029ae0cb26470827b20c58ca79e5f4bad7f59bf71f840e559c89cef
e5a44c82bab58f0e4ed85f51cb0279ab1a0392dade42b539a9c3d789d645
0b04bbf515dafeb84f32267aaa52792ece9f1a6698c3224f0257aba5860b
a2d0b3775d27fbe493b98735ab3ceb9fe944f88220e63cb2d2c3de97f4f4
9be395e474dce553a4c43d7e137a6757eee773d83b1b55d28afab4c53382
867039da66747bc87092348e9d29665375e4fb3a0fd7b1feb53d1f300cb5
de013159f6228d8db6367ca1b1fbeb741218c6e55ac40291512cfcd5080d
a7ccda9569209cd83947f78360c928f4ca129399e84a206d222d5b784de7
186a2d069a4530489631f75170b5f36ec09c438e5506206d57f4036c3643
fd24a73607b11e0e1a18e43e3998bb382f96e8fcd1a667b2bf9c65721849
453276a63564835f5e20e9526c7b6f8e294c542de88aa4c27becb29915ac
27066e437640f58fe28ad6479d6dd54c0aae90533c70f9cdd5d98e107acc
f00ee74d7dcd60c4c94507a19656f7e72cb0f05d5f332d7d1bae90647b52
a5eb403545f96a8ae1d115a0d20ee5b330a4bc9cf400cd59b4cacdc57ba3
daccf4072586488bd6713c1baa4cf0babc6057a80d606fa5a20eb013c361
2831b7e1f526a1c3e37c53b97e0058afc1ffc6c7b8f603cf1100ec792597
0795b2ca3f4f2a7a2985e03a91b0b429bbb441373a00ae54f17f40c4b02c
5065b488b4d569d1d7b000bb2461a68fa3a1e5380b5dc19ea794b209abfa
f0601611ea61fd1025c7e556d4b99c8d1ec27985e9b16f106b7a5b41e031
feeb112f8707429fb315fd3e79deb3fbf2b579c2ae31de70baf09b138e23
7d158f150ce2c1a1afa68f726b4cf7d99a75edc3c8b7b24a32a9fdd26c58
2381c7865c7e19c250db976ab9903d2f045764f03fab88314d8507622ef8
a9b65b21a0cb0be34daf02edc80b2d7bcbab7cf6313904ece78b9d3c2405
e95edfaaff3d9b9e40842c869e105c99ddb277f6679ec4243bb6a000f281
dac7e467ba2d16139bbb96834733dcc5171a0f5e02a69847f6d270ba0f9f
0cc5f7e121edea49a099b5f424d46fa282c7937cadadf0b9f8c20f77a023
59f2fe2ed0b8a5dc1a10f02e3e0eed4f50a56ee6ba83916b20ecd7460700
5069e902d857fad7c6b422dae131eff63176ec333cb37d72a9d54df81954
583d4cfb72054481b80471e1174b1e6e60b25db97d8c00b74eecfc6961c5
8c1ef7980cacb119a8dd396475a3c882b8041b797201b55cfaabec6db8bd
7669151688d2e1b69473611fc99cdecc2b6cd2eb6fa68ad90dc84ac06663
c90e7e5200773363db62a9be620aee103fd5a6053de37a43864976a6026d
0a77f7772fe915ef9a175357be2b1f12c3c3cb36eedd5be87eec9500cec1
494d5892e55479cf8b09d32dc6b27edfeba33ebd86fb997295c360793538
ffb8491ea5ab346d0ddc5ea8f8a18a14de79b690dc025b5f28d5374e545c
493df7cd3c3c07773445406a99c6db9e3b9756f2d0dbc12fb107f39b2f62
8eeaed6b7a2cae1e7ed3e5701529e3c28e1e5a093a2a1ae0cc27de744e0e
74eb35fdf96c1c68a820e9d7d844b007ceaaaea418da1cdc1d0878033e6b
1fc9fe4de96ccd439a335a9ca2b544a4bda667f8db1476b7fbe5e8a5acd7
74c113fce46f0a7af115c748971b69f604631703134de85f0bc632da9bf5
cb6e5af41035476c834dabd11cb391281e64b0ef472b2232822d4e08053a
3622bfb4d1d75c0b831d4712de14d0afba7fb1a8b725d28cf155ec89e37e
d498a936ef59d940b8c1b202b90bea7ccb5711219652e3071c12d8916265
4a07e2f4549203cb1ca21fa5405e357270006181fada496fe8d650539266
8fbc1095a6d702b0bc9a21803b116d3ba66733572c205683421c02380b7e
d95b04e114d6779e70aa4bbca0eac4502c94a90b97b2afccb1a8c37ef2df
d6cad5dab52d61a96c19b8590dd471fec9bab32acbb1fe2ea817cc539cc3
50fe982f7930f75608d53c52aa02f13777197b8b17ac6560897980245a50
0991cf571d8219907e5028d773f42f904f2c2e5bf1242defc5440dfbd344
bfefc5dd63ddc3d6af3301a98ea791b3f16a25f542efa53c5bb578540a4a
59d14befc11c5c694d57979931f87cb24e7af6854b5765185e28f8a6936a
2a8b62d025d64978d39cbf40a22db484b29969206238b6249a7addac2e83
126a89eaf76e1f58f5d0a2862c28f2018e539b5e2d98ca1297107da4e6d6
4f2823cc07ea6a8b53e10c9fb324ba060d76482cb7ab639cbb7337f8ef40
7fba4a877d83472a2afd0c332fca0002758779ebfd7e108f04321a8fd6cf
3bb3091b70273e3cf053918d445f013002b8895f8b9db0829c55dc636c7f
cd7b56a4010747f39a26b8785ef35db49ba49d2495e8696739309b37ff35
354e7850e0d7aa5960df2563d6a6f63cd7d20da961b89e6dad8f01a512e8
85a89610a05191ac88638b588d8280db28bdd28476e0305d3bcbd284fdbf
bdfb6a6e30d8327eff7c8b79113cc18d0c6ac1c0d3dc47ba9c634ae29694
2118dd3010aea1a40fd1115713251a61a7bbfe54c0d77e7ba92d29629444
0084f367a9776b3a7d4c986380ec13faafc03471ec289111fe3a5a842b53
8f9e6fdebcf1c700e029724bb4197992ffcd7e451bc52e57149a797c59c4
0d561a4f68ffb571f469b23990eabae63ce09c996f1dc81a7ae096f6f859
ad80db68b3bc4e794617ad0d95183fa5c248e31b94609c7157b9121951b4
0e6a76003e76dc0281992fd23784e9f6fde7448e1f585711e4e8ec2b9937
a8a8cc3130e9ba3837ad9ffcfba40428dfbfc49b3c8e85a530c5594f422c
0ce3a0629167a881cf63dd686289d1ffb5403faa196bf591ca63a7076635
75c605172f75e92e6b7aa81c73925f565d36356304a83bc7f76a24ec9fc4
f76ee11ed0c8ede1d2394319c99192f3bd6353277580cdb17733f00d6822
debd3107f772c7b5e71746ffa499e83cea5b5c8e5e76cbe090a37191e2b5
7b0439e1840f6bc9dc722232311ad8639066e96a9e45cf4494ea740f0889
233948380be819dec3af14a95dbe944755cbf75c69fb15f33a2d2aeb0ae4
06be0dfaa65c77d88b3770dca427db713b9d99d9e28cb13e6b19b2d98e71
6e28fd31b638ae217b1cf2990983f1ba993753462a26b20798b86c5c260e
ce7eb594aec4fa308ae411b1cf3eac842c5458ffac7da28b1d8507f1130b
d01c8e6e047ec3b7c22cbfe3fb31b990c3645390634657d5379a6d10f7f4
7d86e5a01b6189aebc1f2f0eccf3818dd5fe7619b21c8d12fef72fa93183
66361020b69e9463a5dc3099feb32accb6eda769b49398b3662d01f1d5ae
c43abf85437948beb19688a513ae302cdcd962453ed94ce9434c0539cc04
96f194ae15f5ea09f8c7ef8400c3dcad69d541089dd79db4211703b629ec
fd521774f3760ff4a58eb790b25782bf118dc877b3f022fce3cd43bda442
b018c0c49f757839a98a698fe2c4ff486d37ab6dea893ebc2140c6060afb
f3489b1f2d8a2877c8998c5eb738fc3a457190bae0321180e48e0c689895
3257609e1a64352a6177dcea97ea69c679df56d2f0e7d8ab46549859ad33
e500bc7ebc4b63a2a4a5606fe1ee71a80fbd766fa78aea5b7c9ecef3546d
b34bb55dba38d0881bb44c1cb2ff32a780403a950e50ae391d06ff0eac8c
9a9b6746cca987beb07191160f08d10b77fef399083ec2227443e3fba614
d165b5ad23385628a977be891307f75d0fd6d4d4bbac5b0425905b28b122
94e1dd9a9096725290742b0008a8f41504d7bcc6ba0dc33b675658440765
bf4552d75a2766857841a23e8b59d938472f5fc188e2a3fd95b01a29cb1b
3ee93e38f4364dce1e396e2f2475f1b4b669e06864a7921b5e32755a31a6
ef216a4f6defb3add4d47ba51894cbdd80dcd266d5df1e19b1d212e5145a
72c422790dc46138be758e02fda3611bcf8b88d79f8c25c1169e01bcd6cb
4309707b40c7964b32ab00f89bb506e46031e8740fdb6303c373596400e4
3776c0b013f4caa980e3d35b1fb46653e4ebd8682f95945cc7ebceaf6863
3f6c83d808d0289774ab7c61699be229c8894115c07e256e8c78e024d7e7
36129382fcc377934d488fa2e70b8b25b31b635819a609e7aae0f9092e2f
6b3419fc34cad382397eeea6be8da8e96cbd742d99164abb17aa91b9bee7
72bcdb7a3ef1904068f43c7b700211b801952b79e1779b6e7f4d709cadc0
dc707124af5a70d586469cdccfac421d3ebe58ef74ac492d961de3ea2111
317038bb1ea4e1403c3f33f859628c6d769f325c43f6c82220747137b847
b4ced9f2525a7ead7503acce68668ac95e18134e3903ece78e4b4362ff40
710bef250a586790cd7666011ccbb01aa0081ce3b296f74b4aca4fc5c1e6
145ce95c0b428c826d8fea50e69177a3c21ac1e439ea033ca02c5fce334a
7e715d3e9c629c659a6d2692e71a76b43cc8447a8343d911e9d910451733
8c31059de7cf9af08c9568347914381aac57f4eb6a9fc12ef47274692723
974efd028448d75920dce464100d752d122f6227b93c037bc11c383d8621
e3b99c277a3338965aaae77509bab8d3aad92aa35438cbf82136de04a2d1
70b2eea56521120bb584ab720e10579c580fdc8d478961ab1cd563327611
0ca3f85c3dad30f1ace870b111bba5fbad881cb2256ef3e9a3333c825ca6
80fda0dd28eabfe472002c777a14d9c60cb68b85726141a1f009385a9d06
270103e33f637975f9183330c708f2c28db622672f9019c3656d0f4533e9
df98f2f886c19cca1b1e21b79d28a7c80aacecb16e1cb2869e44b541ef2d
a9a90c4cd60d54c964a5539e2ae318bdfa02654c8895eec959cc3af5ffc4
37bc3ebf7b53b5bdb12dc89de9a69bca635f62a3038527a6acb48a221889
566044299852420366c8c3469be15dcc650490b99c500f31218bedcc67e8
b08588368f11f0db3e8c743889fa4e395fe29ed4a93375b0ff7986190992
1b2f7059ad2fca444456dbc92ebcec348cc27424e3c1cbf752f0f851d131
fc0f03373ae2fc3c2a67bf31da179cc3c9906c00d1e97089218da4915988
b283be0067ee8ac7d755027150cdd2c5b117c84653effefa4881bd434958
d75ca0965f39900188c3391641dbc7b64b6ee862734c26b5fb0de4f1f2b2
8a107489c5b1d40aee18ed89a938356ee1b1810fbde33d6b34ec7d170c8d
a6fb1bcb2a4ce7157e09512723a53e1b9327f1b6457da5ba375d764914dd
351d8b2e0004470b17c7ab2f092b3b207d76caa7319b0a3798c3d8fdf25f
26b32a67b1354b98d797c190f8946bea4235df6962805dcd90e83ce90ecc
40e0ed05f8c310134767b95fbe1b9b80816bc7cbfb91618598ab491de5fe
3793ffeab003b799a7df95c09902199bd40096b6803e7faa4d9f2050534d
c57fabae22440249fd22945575da65307c1c9a376b3552b979feb058c691
10c67bb10b9b6a47453a9fe92c78a7dbb57e155dcabc8103c58e14315e39
6622128492c3ec0ba185615b19c609c4f8b22a34006c8e127b9d73d25dab
3e16505182ac9736f5110f90db693d441898da48cfd08b6c255368a65509
4d5fcf381116fce66cd135d0e1312c6233fd394f06b2ec427aa118c3258a
cee9c5e804be27fa21b64456ccc84c7b87ba7f5ec1fbcefa69ac420a7fa4
0d7dd89252cac4b38e19b1b14502f7c23c82983f98e210b555e40d9b23e1
207e8bcea9c1d8eac5acd063c3309fdc516dbda9f4bf0f29bd4a29aace6b
b1bd01dbb81a974ac30355122a423ad28bac6fa88c708e71fb52d1af814c
c033e271a38606af128d2a7d4cb96c05e11e207e82cef9f1932c0d99823b
d5840b9df104bed84d52d34436b205a0f1103d54552d633087da5812660d
0489b39e27621f62be0739dc5ff329946eef3a78691514f10fdbb9f10e41
a37fddd8a0aacc6f612e31688c439494caee19f9e31f697943d22a244fd0
54871875331bce6923a7c8d7234ee5f2df517757d3526dd40b505428e416
bc026e3aa357863cb7b81a3815758bbc92f1b4f5e22826a54f0be0e50357
c19530bf5e07cc5555f7d846b05a9c8b6f46e93437c20baa62a2cd0ce579
b45484fda9e65f500eba65dbab198380842309169d9b0cb6052df42b295c
a458859b82a43a9a9ad1deccd4c74ebf63367de1661757bfa4436be5962a
c897e786b1fec65f800aaf3d816f1fe72378abfbf1eef131d4cc61a965e8
465ba4eca1331e97c8075791ce1242d7fff60c9328d4ccb220048b5dc444
44085c3422e6a4d3cb85279387fe072d96eed336bbb46542a98bc0617baa
d6d5609a4580d1259d39f2c038946e19d2cf11d7f559b93e4d453ca5e6fc
074c1c011e3afe1c0417eae4a483a440ece0e29334b0fdc9bac6cad2906c
f9378daae3497f308ef7431c4ed8d0227429ce797e2754b445c5f9dc7de9
be3a147623f6cbb59b32252c0a1a326a322caa2141aa8e621e16906faef6
6b8afdc4702a7a33d0049ab072dcb3fea9337cf03ffb186478236c4eb63d
2ea354601df3afc6b09210f22fd387f473f2c0ccf40ec1f4856e798c44cc
98f284d7c3605a930f419ea82e60abfe3ce884d21577a161a174d7692909
ab348388203cbe8152f1aaa031e99a1731e9a06e80b5e59525d1f9a8e66b
0b0e3e9a9e4b7b52bab802585eef75bed7c3b6eb4a8ae05508adaaf39198
144db38bf859694f25703c875313aa656e5f3e79dfa1b1f39674c3965974
75b5ee7d4d88021004ef06f1f30dc89eb6385dd8d3c77c44a03bf83325a7
39f562c11176a4536ff74929024eb09cfa291de87958a9730bf8f16fa8d7
8cd01880d2199d9f99f4f99e5f4199e094416fa1a06a187f70ea53904030
9f1f0a203b03b4fd5bc2f424e8bbf15e47302061045f4d3289edc55ce0d3
40abea7d9cd723351f016a5914efc88b0ceb4e53908279548cfba731ca5d
e27b92cb48defddf8c46f2191998d5c81c344fee8c0aecf963e35ef92629
be19d1837b27963834f2b5baa4ec338372d9167169f76833377e2bc22ea3
0a039f1fba6c45691a0159851e0f0294983499f92be6fa2bf2dbccfb712d
1fe1bbfb651b075ace2b0c2a12a90eba379d9285df7b03bb247f1bde43ae
bbbdda9f7cd25d2b247d779e0984209a2b7ca0e4e7220714816c8f581938
46fd51422bba68249f3830c3c0d3c058c3209864951173d3d63d53179cf0
37d120a0fa1f037c70b30a30fbc16e8fd5bd2ee1508e511b4a530baf7b28
af2f29ec582ab28587f449034b1c6fdf87016077c968f81ecd259aea1cd2
ea56a1b4c91bb89f0ebddca556820ce1051f8feb40caf0de75f895a7a6d4
2b88b8f310be6347de01fc9bc76590d4c85ee8425e02d8a7a53af9dc1c7a
5adb7dacd3ac733a65fc3ceda419de1f27304c57e42c37fc87d9aac3b938
ad9baba678de07cc15e7fb27943d186d53053e3fb34c32e6c2436f239944
ed73e3c88c72cad90567c7f862968808a2099d9b9aabbbea5a4bd10e0ee1
e0c22bbcbb36d66de9417334dd23e43044d4621737cd9d952b9cf58b63e6
210151ef57bc5af5076998cd798c6606ec8db1c93230319a5240f69d2340
32d67a15cac3fe2dbd0aaf69c55c3d7de1bb5acf0aae09a36685bf71bc85
6e23aa1f5367d6afcc2b82a94030de60a8376239551be18c6603225b6811
a1b1a69e9754055b99755455ebb3327e2db3c80a85f6614a1756cd77f3b4
4d4416adf350142267cf76cd87b0e598d69632e3e93ba6d20afe0675efaa
7d3004b747b3639342a425925585f797227b12d9e6ee986860d435c944e9
068930343427502caa66bfb982bf4d4a8282fd65f7f4a44d6d755089d942
6167cff2986d7e5e517a5adf88168ecdcc0f29abe44bb0340579067585d8
f2f5238025e6f8ddfb68f1a2928497a88a590f89722c89f3d6a7c62605cc
465766102fed59e57ea61ac81da85f18f3b43876439eebe57a845b419161
ff135d021a872927d448cd286a1c52c6767c8350570cba9c0e82e1611e22
426d058565ac95c2f2c7347bb7118d7e073f7a4398d26f9ba84b0a5f0a62
866aa91131e892215da9564ef283a94a86fca01e2c60df9440df8746c3f5
bf76074442ad35a86cecb647abaab623e011ba783957c015c5848c152853
48f78ff32339ef3f97f8894ac13e43ca11267b3bae898707a9ea7db5d0d6
e362eaf87ed76059e6cd21b67c29405e75e866b7165e20adb9c5c306e9d3
6445c41351f80517f2c971557d513be772b14f8c5517f03c9ae8fc46e41b
55b29cb3cbb229aa300c2ea702d65471cbecbbe959531ce647f51a3fff0d
26f586eb92397c684d96bbec1ae54b5d921493f9d92c16467b04095b0354
dd7705fe31ccd3693ccfde68b37e1fe4371842c194b42bf7bcbb44c7a0ad
71bceca8e8b41120054a8a63d228f686ace06854df44b63d13dc87830ad6
4f68de46f8fd7e9e608bfa9218cf003de5f5804d69b3f90085f6cd8f2d6d
1ca33913d387193a10e1f0e32800e7a9d13571598103e42d7c78c2c7d229
99aab2c8efa54aa675f22e93b28411153c0a0197404cc254da2388ff79af
28ea7ebfa75425395e816e5bc07a36f6b48d25f22bf33d790eb73a54778d
7bb7596516fc50243ea76ccdd368e550b1c60831f1300db015746ed0ed5f
514372fd7bf15658a3b83e593dd6900a0be473273a163defa88d8e6699ea
948b2415017b4b22cede9ca11739b2186d4bb83d95eefb072c86a42707ac
6b60c48b8fc3c16a8a09fc4bbab30c44d431e33653b388b70b8e0911b396
1f06c4a848ea5132d1e28d6f230b0f546519ff7379aba08bf5b00b49e64f
e64fa66f5c081ad89de139b0efa6f312d07facd898fda42772b4595776c0
086839fadce840afcba6f7e9430632f9979f9eed33af394dfb74976885de
1019e3f6a2e3b33939377fd12b1a34236ec86e165bf47beb17c2f58e87f5
204553f930eee9511ea69d8f47db46cacce79d5f72c900bceedee1987fdc
76c074001861072d0670b36e919e8fae00362c9f40443acfa6d9d4521ac2
a8499540b22302c26ea91aadb7a8566cf401d2094745ab023620b0f98efd
8423726b057723c71468c639012940b79507f809f09ae676c9b7f12af165
84f42d4d2887d6873cfb5af680583e1d7cbf43a1e8df943b62d31672ef40
9741a55f3ca6fa15c567706ac29345605e35db985c606983d91aa007657f
f015269bb5c7ad98aa908ce85945629ef15832a6187501b1a2b9a7d247e2
08dcb7078ff4379c19ac4d4d31eb13ec070831f90c3ac69233634af5bc59
dd885c3b83fb00c89da98423b186995e71abfa4d5b24b7fdea1a6158ad40
6122b2b810af71f823184a7c3bb55991c78a9479c85707e63dcccb12c2b9
59090cfb2de5c1899e8cc897a9d83bbff007151ebc47c9b940353a1bb58d
7cd717a9fdd78451a27657d7935abdf09a8a548a9028a2ea4d890105e1a7
ef97f386322f5252b4cfa45fa0233117375ef7a3730270b314dfbb07ef96
c2717a3062abd64b514332c002de0a964f22173e19088f167dabac0cc8ea
8eb9b2cceabf3fc2e387c734f4f7f8391362c86363f7342a172fa74a0d6e
a1fe50e31ec272e0fc4dcd68f9cc85e5331e0533bf5de4cb763263ac7831
473538c37096d6cacc8a007cb3d99eaf1fbe70fb8cc38cd43c5ae34374d2
0bd06cacaef400fe46fccd94400cba08183d6b72a75e41329bccabb8d5e9
d28ce18701f5c8edaaff1f59835157e992cec2ae00fed4b35cd6f2ab40ad
cd7990dd3e032ddc4cb39b54467e545d7da1b4943fa7ca07bcd62472fc6a
da0f2ac769d75da332d69c46c0da1fdeeae5e7bf7ea52d8e5ad0a135dcd8
e949de03ff795e96ddbc762cdccf5d6f4e78e490baf94c8faf0b9307cac5
b7af00217280bfaedffc104273b023dca1fc42842b6cbf028cfe53a0e413
f361fb6d1397067690780e5f90a0bb77faa9f07ac2d381f8264682cdea63
be3c9b48dcd379717c464e10f0b4d3b010a9f59c7e2f9a29cee733ec78d6
7416d24a5f57312cb12c50f73d74dd691f336bda6366dfa418693834e720
3574d55e8768261b879b1586c75ef10994e28eb67eb294d1369d8dc8fdd1
fcacdf75e74828c08edf2f1596b24bb4202af652f23e318c58fd7c8634ad
2d6379606b995a87f4e3de72efc298f9c18fb3d10ea820eb69766e2a114a
625f7f866cbcfdb7988595c4eacb6079170592b6247b6f2a15cf614f2fc6
92ad99637ba04594935391d1be02e388cb26ea0128660ed420502901da7c
c3db7bd21011e99e55badb50616c86332a35dda61f299cbfdcac85762648
dd08c2b3b3670bbb5b46236a357547169190b0276da9b9c6ee968c64f64f
4066d010ff33afcc3a6dc1b18a8adc2f589d7987d5e50cca0ca4c674733c
38b79009b0f4615f3379630e9421edf301d83e7ba6fc66bc23ac78205df5
38f0a0cdf6e237c58f84cb5d8d00059996e8606a5c76a9ce230acd9e0459
23a51d5d670b318fcb8285f86a7c7f0ef83ce722379aa951cdee252cc8e2
a53e798d5101e630701af0ec43a7256d71b3b03b707f9007eed191eba59f
31e1f182cac412366711f66c672d9f162bddf8a1fbf81c65c65aae909c56
e38799cccae1f9cf5e259e618ec2df1bb5350ba7b42d190c0d3c0441e5d2
c6adfbc3338de9fb9398eb863a596f8621316b192916ec9418c62bb3cb5e
aecf87f1435105880e8b41918ea60e6bed1fcff068b7972c6756dc05a549
c885a31141e7a024fec437ab7eeea703bcc5c198d4b41ebaa6e663f48378
20b96c88b7adb44eb079bd33a495b2d0be31e334c2db1625b630c1b8ee09
fe09242051ff69f9be6b433cdc0f05a520dc7291c494472c512d4eeec14c
32dc7ab513f7bcbad851333a17d93987a9ea5416e6f003ad96c4d13ff404
cb2d0d0460f4be62b92f18cafe9a3daa570c9c07ea0f12887006ecf73360
cf965f2fbc5559afb8aafac9e91b30e7a014b43750bd324149d098e3ec17
7302abb855cd26ee0f5b1529eea88df235f8f9d5e3a64a10b9aa3bb8ae58
c9719e41c4d6caa07e849f4d69102a137f49da7e74fd30e2bf857817b626
762789cc89e3638b9d82b8e63d20648aef1f9648642ccb41c184e6ba8904
e7b506049f1c64b295f76e2003d06f09354df410539fcf52bdfa42a61689
f04f12b780ebc594eed9a87cfc51aefc59b1b3ab4334166a18567fa9360d
47f5e449d6c87f1af705d6aff8295ddfa32b18fd3f99bd7c00198e6aae3a
3e21ff7e8a417f1e5105d3ab10283b7e1d36fd2adc30497254143cf3cd1f
627b12dd8ed494d26f475a654ef7aaeac9254e15f862239ab0180a2913b8
5da833d6085ebfe31250d7585b7b6cf8095eeb97330aeb0c3056008548ba
e18a15339ead4702a8e248c4ac74b0ebeaadf85623c26a3ad99ac78c188c
a59ba81b9e3ca70e8d1354c13d30ef68d9b8fde05a79ac12f9647bebf86f
6f767dd3bcd088eb8b896b2e3fbe22567f4edd704c96f7afeaf6f293d4d4
c0adbd15161c495d65d485112860442ea0fa3cd6a106e714fd67508e8a29
7f17272edcc8a1315efab87175dfe9237a6a7d918fa0810c74b3634d4d91
da344b55d81f0b7cba848141237edb4b5d4261b982c6d356e90088a5fb18
c5615ff53a8ce257cd454a084581fe32ee29e45159b4d5b6872fa2009d90
ad014054aaab347785cf64e7789df7fcab9166ce543f800f75d4b1e279d9
d2dc7f4c6375cc8ccd37d77ad4fb7854b76506449c9413a49960e88b5d65
92c3241b5f1687c6cb3a96cafb15fbc2a3b40260e1e72a860c0f64770dac
d3a43b79840ce903774142d7b85bfb0940c8f2ab6b57ace347d87d837f62
88918aa5f4e4a09c0e55aed26c6f9bd30ebd5828380dda7e960184e345d8
1021020f06b37061927cc985b257e1da537920dc24e4440ec4b097ea6d23
0f1bfd6d79c0974ee26d91ecbec1bca2cce943de03b566090517989e5c41
807754461b71d25ddda3f529a899927f30c46b7c8b597a06675288265af8
fcb7af854470983a01b0604b2753fb2f0f9b02da451de855e79a523fe3d9
9348f6165e6de0a01103d5283fbd0a6522912056433f4eef5db294bfa757
e14ddda0fd008c77abd372ed01709fef1e644537ad72eef7cb0ae5aae8e9
a0d8847ecbc27d08a9a31de4989cbe03cd78cef763e5b16440d9cf230309
5833dc89ada152379743312c6beb98ab6ff10a60b66b25d3aacedf693951
1c8cdd8473969b273133c9b353dce86ebd69510e8e4353847a03b7c13f3c
4cc1322deb29d99cbd3287565120850f565d6ccfcfb4b399d14e8da15b53
5cc70c5a7335b5db7d6647ec352c28e1228ac8124b40fc8b801fd4c1430e
23791d1b1520bec120f7afc6cb7c6e630769065a54716e20fc3bd556cdcc
012e5fab6a708071fc4ffdb4d114d3287fbf8c4617b817c79c4c1e4d89d7
550b78d1823c4b3124a2031b47dc82cf04d4765b533ef7a2b7ee70ee299f
16201e45900a6b447361d2594eade54ce660e3a0c245f83da0468be435a1
1dc9c5ca9ed6e1ea2257c252e0e18f1f004b8acc974adc54b023af276b01
edd70ca9dcf8bc80517d031d9703d5a7df98e946500f45a83af4569a8fe4
af13879d37583b10eb6666b905710cd04f0c67f455bbf13891515b34c215
965683ccc42b53493df542d21c01baa13b78201ebe474efa8bf201c40f80
b83d6a924c9a492c6b10692a67d112338cace5f9793fc6e04e7f2ba7a27a
50415de2d934bc65ac17b9bdb4e8ba31008a0efb7a2b41f2cf7bc67e4382
2b46763298048490bbdf98608f9bc7adce1834b19eb9a58810097eeb1fb0
4518146c73fefae8c3de38848cdbb8238e439fb35849755df9475459eaac
ef2a191699b29ad6a6eeb1c2b53c2e56701049082bda7f82d41e2b15ba17
83f48f73b6fbed2ae9c4917b4e27301d78763d5d734171b3cdcae20a5fb1
e9bf4e78d1bcbd4e324a064b71ec170e373ff7ea66c31438386ee13c664e
d06405b1d3e6d4ddedccd305825c1de3fca8dddb44327f9a24f0522e486d
7d4e554ee00dc0aa20fd9e46c38d10dffc6f93a3cfd70e39049d92019681
5fcd28d8a017d9fb6d4e1b2cb8e12c268373af6a7d4e70894aabac12d3b7
faa0f13994772eda380ec47782faf7d1e975a9143ef772e6c60905e06aa8
ff309a033f02accf9b7df32824fdef738d575f6a1b1c5513d7bcee280f9d
4768d3fa8c9c24446842538af23ba78e781ef5b9983cf7e0aa6d058008d7
205b88766eb156515f2588320786959bfd9db69657d66cfb31373659371b
7d7a600d2e11dfd62781f9615c2cb9017247254596120fe355b1884e4b55
d2d4eff7895c230a397c31715b273b8e770fb35fbe3b65d45025e5db64ad
15e8f1323ada74c8927078c98cd56bf333abbb5eeb0ca99dd2e823e8c3ca
e83e057b0ca1f7fd0945336dc82f6465476ed8e771685947707093c81b44
a35d813b0af1c7b85227f8a8ea73551dd84ce15744b2968b4c2aefef6773
1a1f36b8708680bc26d60c597d1934ba160ddc53c3a2f5c40f2bf3bb1ac6
71ca604ea04b5cb6dd315ac9ab076049495b8ee843fb7c05e5ef1ef3e19d
6b2f4ab913d869c0fa01b864ca39d25a47b21588551a1a43ef6ba071e0ba
f1ed3b1814aa5ea64c371d328afb64655b441f91027d1ac96da60818b539
1c27ec9739225ee04a3a90877203c933dd2ceff05ec3b7a0fe37e9f0d794
6ae3862beefbf39408f7674c18ab761f84f201de90d9fdf1bfebf008d0ee
e7872e92652fcf4fe5c98e4ad6625856f4e795ba8eb3610d97c2a01ca30c
79c6567b961e4eaf88a17f9db435e719270a003efae606d11a80e304633b
557cf77fd13bb046c742fb1f372a18a63ff1281a5211eba81fdcf3049b9e
aace76e051bb1a6925fb2f105bc1bf5380b7696fb7d39f58ebab85cdff35
0d4a3b7051bfb1936e49774db0a8d1c5defc190ed1bd3a2fa649a23a6335
e4ab1f16029fad299872f7930dfd574b59db3ca55e9765864728aeb28e27
e0949e7caa179909a9208f82975b63edd998f4934d2ce7703a222553aa75
37d088541835feb4ebfb61165d2c24c2537d04905d62e4ed3d7e09ac5784
9ddf05f16f978c183827c9fe1b316ddb1dfe6ba39e9984e9562e84d11902
abd891b1e2953a108abb08a70a833d4ddc5b09ec58e8ffe8e3372e2a05d7
1f2134906dd306a54e161072adc2d64cae42358cee398c0de9667b9c3b9d
e91033d0b5106e93d80147343b0d737c36ea2fe8911d1ff3dec523ce136a
7bd3ce54ceec5e4d57f73ffe06f53c026e906e58bb8638168a81637bf63e
8306c7324df31baf731e498938f090fc320341441cd7e8aed98fc72fd756
0d3ca984840d0054c224027cff66a05172dbef9044b1ea99016e3c094e3d
5eff26a82a9a1f26bbce9539664ee3810424fbebc1ef438c7be2daaa259b
951220ecece575cf870bf0bdd446fa60df94c5b4c09c839cf0364f194ca8
dee326bd7f629e61eda2dab8ac064052b0f73d8492de07d3f312af0a9507
62b5534b8a9717cb0de2f2eb9bfa17739cb205dd34c44359cc4a4902f198
0c606064b7dbe8ba7d70a3b5a263a62759e16c89b817f26b2ff9f1df24e5
6806e3c22367f4940bf6b1e8eeb593840fb5f0b4a916004dee96c22f503d
ac29adfb0738b21e5c656e4ed4ab49072bcce0421e9c4db8271307d406bb
759d81c7f32aa3c6e63cb25277c0b1e07b3fe4ab4a78cdd204cec53d8448
27353e2e9823cdd93762a30cd979d14482b2b2204c51b07a25d2c232eff6
4a3e3e0de4dd3ba1d0ae25ba80b2413a9f47938fa242f0446016faccad66
ccdc6a50423f7eee1230b622d8310ecb4eda0fafefb73a1e989e97395d64
d8cfba8887fe78ace755ddfa4b41ed75bb60bc2b19a76a801ff5261cbce7
e6666acbc773e88ac4263b9546d033665abd92d5e76253ac3f0bc7184519
216ef33d6a83d07501b793cf4e35d67090f8ed1b7580ca3bb25c6ae7a628
d1a5b54fb2dcd51fc6f6d616e0b79754fcbf2c53b1e1f0952daf4eeb6f65
27a70dd3be4342a6891b0220191b6ce3d5b5fb1395b270451666c54e4614
798d33af88908ed2af22a7e821799f67f1d5486b59aed883f4d82594195c
ebb63e9c5d0465581f2c0e7f055c2b813c6e7d1e4d533aaaa8609631e59c
4df32c68ab95f766a67de18d180fdbb666b40053d2ae0bc53408a4998f53
42f1f9366439fe0d742eeb340b68ce323c3940dcadf89896b549798f21c7
cf0e52285ffd2ee1224c12485a445fac8c6e05bb67de7b5e2afd60abbf0c
61360d93883ffd5a9eb3360c2a6f241f15b7593c9c13a0bac6f49ecaaa67
4841c10aca2a400d33d9825ef072b599fa3477afcbd71887098340b1a05e
aec4f607f1a80d2eb11580e24e5d2a70b42f721d084c91f5a9f6a14cfdea
49411f2d7c33c04500460e4a3d7ca5056648fe3a04874d2274faa086e54d
0e1e79abacadb83a82d3fb145e1959beaab8933814a2bf083841512c7940
5d328be5aa46713e82a0ab9ccb0bcb10c6eaa73eeed3e94b1ef7d1721e20
b836032b21483f31e2ffd811ed47f919768714f279f117f6579a4971c552
99d81a8b37715c9e8d99ae67683db987e5db44416f310b4f12c5768ce346
bffdb9df32f0d6b474b3a5174aee833491f4fb54e83210a596c2c915b2bf
00e61a44bf841e8ed401555b14bb0796415026cf36578ba85eda643c6959
ebd92b7e50fe30bf1c0cd7610b551167717cf1095d2d8d864bc6ba86f45e
e2358cf40fb1d69c5f7f9b78602b5ce6b6820c5a58d0fb934fb0585b45f0
8459973722b38c3847c2778a79da2024e56806e3c2238c62e035f126a082
1a1eb423b574d740fd7e4647939637a87b49fd980b17032e8214328bc926
bc050666b7f311134afb395c4fa7e8e42603b226a6817f8c313cd21dbdad
50b03c6bd7cd2a755bcbe283a4864a6e736b34c0f73ae72bf40b21b7c475
612460613a8a8126ca04e71b4744f355f28c422f76e3cd3f5b826c17ab3a
a3c067ff49b513de17adb8ea7dc1eef4b6f595c9387c870c76020346c350
53a7824d375a8aef536536df578f286cb34f38dffafd149f21d528c3333e
c048c21b7329db933e7557fe1859d59747215db088e7cbdf219d7d969e39
cf37120ab3bf46855f16c911bc573a264c8bd2f1c3e886e7c06a8aae4060
0a757e2d50728accbdb97c717582c8d294445394a0d8113678795230367d
d8001ee530adba44319cd2f2c465328de747aedff458c3ec27cd9eed9315
0d1c9b372ca62b8346b4f6b6ae61ed129aa0dd957a0359ddd991cd9ec0f5
a3f8755f42b78fbf2221f22686aa319dce7739aed619199293c7a03b01f1
d1ee630084a3a0bd85a249ea01936da0b929dc581e2c7a1bc71b85f30b09
6ff6b531bff35cf352927636aa8632693de6cb67f564ba681da9ea99b1c7
b37bfd82d1a9cb9a5e2ed9c46e73e0242d4d7aee9b7942e9fcafb3846f3f
e4535aa82f94da461eb9b56b270bc385f4033be6ea77cccb682fc746e80d
b273925a6756086311099919c52d850459b836586ffba8a3ca7be40a12b3
d2b2b17181a29f5d44f065bf5ae6f00e15abb441395f65c4fe20a78cacb0
444db73641ead25ffbb53a4e436264f5924d07b2fe7745b0af57564fb53c
b42cbcab5c5ad5972d85c486311ef66ac97ce6252d5205ed13743d22c911
3eec21730c9643b00805b03ace7154d14660bdcdb97e0c199928b0bd1181
934fdc01560c3c271ecf121112223fe27c812b07ff0baedd33b10490da23
b9fc2a00a4e7c8c45fa461295a01172735e6a0b10d7308d71941f467c5a6
5bef9d4f11006039052b6358f8c5c3773b32753ef90be6a201a99ca438e5
2fd44730f5994c6eae5065ab466a3590a341d6cb1c00611f109956585bcb
fe3de6114a95b0eb1311c84fd08f35cd00c56feffee416b351e67314d50b
2947674e4aadd7da49b19b5d80714f1737b707a216dc68e86482920bca32
6e30edf67753af66a69d1bb81a7f414a6e07874940614135f510063623b2
24778ca8b574826a6b308e2fcdfdcededaa67c00b7d32345523dd42faf31
f528d5b176f2eef3ae41325e2b98fe310dd481ae92cfa8f052c5868d6355
e0c2ef06fb7309e2729215e23ce4f7868e82c6e5fd83e22a67661fb98263
c4d2b085213d51474021353fea1e13fb5f5e126769986f964201a91d797f
a6528ac99167cf15d64149e1a87544589dfb50a3eaeb48f76962c4503ddf
961e7795aba0682506cb7379e41190f19214de74c403c0ef4497c9d18c53
c824ac376e5d7858bcd645bc02b482c73d6be31b6798c98723ff4ae5927d
dc9f0a2e8198285a06f3f3bbd5159837bc85f562ea68c8d36147fbd9da87
a525e72e784c0364223a2fb571fa4b340bce598daea2cc6a189f942047b1
e10ed1e9e0537580ccb8ef3a65e8b118fe05e54833f2e5db45ee6807ff3b
4a2e5b6f77e470965d034c8880853a35b732a92c9974f93defa6764907cb
33e3c24b273c9a4d29ca955ee24209da6337788b2c9489eaed69acf3fe56
9deccdbe8fd08e72390aeddc8ff76c4a1fb12de92d73802d5502c214be98
93147540127b9d96604185bf7da2d4c8cda64ac69e80c19d7a348a823e5c
02e360f8365520b1a6830a4398f082cec5ee4cd6976382d3f3d46c495b73
77608d803a80c4c344b18cbc1c647961a2f6e568ff3f632f316682f65768
847ade7c60c977ba0e1681a205116f1b0a74bb5788e51e2b4172f6ffd40b
3a1f49f45b609100103e6b47d6f80d7d32db8936e5b6b2faef98fd37acc7
4e240a6eb4000e38b4f2aec8d3bd106ad3ed76421fcd9550393606010cbe
5d609a439a837852c760d9bf2a0be9f944d1667e7b342e655d42cd7586b3
2d65cfa90de7cbf8567b3f540701f45c63df3942320ea384deb563b3e078
0d4f0ee3f2817fa5959e3bd5a20378a000ebcd756fcb6ea6b36a34345772
bef582a25cd9d017804ec146d28b15927373ba22a830e7d2d008b10e2c6c
daab583e148cfec624aa6c25f8ae0a7523ae852cc5aefa8f8cf48cd7c9c4
7d7e45c44e096db3e3eaf03f26e8ddefa1e89c149be8f16f9d948b8dca9f
bd036cc69a28126d6ad8c10972508f8cf5142181efff44e6c67236c25e9a
68486ed78818c4326d4c3f6e77b00767b18a4ef2714dded7013f7c47179c
b7d2d4d339923a5f8441194d13488ab3feb76f668b26c0f8ccc9b1575f8f
d96efff8551843f86892b99fe796a8e53f4bd0323df088335548a062b673
cc593fbc5112f203287f367aec2e43b7adc4107098d0570448869cbfdd59
1e054d878d77c96dea57854bc1cab977e7a79a5c123ec8349c4cc7f242a3
206835cdf2fd00b4dd642d9cee78cb74879bef38a94a1a95ca5ea4b73245
42fb496bb5f099988be7914d50afde14027b9f9eb01b70adb32ae9f59957
fb5740e1d60532a28324a5390a5890b944248d6c7357cd27a2881202d910
8f5aec445620a190f5cc17d3fc8671bddd69bcfd7f5d618711a615f1ec22
06125764828242fcd9601af4086a6eea4987eb410fa22ecb46c5f47bdf36
8c44ce0a8565b49c2117009b03a83210887e96c0aff5aad7058a1ebeb66f
1d53f0bc36b3cf6e92eb261523f69f450f043342793f7b44c3534b82aab1
5256a71cb09a0cf2db41c066d5124469b3a059cd5cbfea52583ef02432af
e536061ae3f5bc39596bb96c8ecde351a992f327bb707a6201bf21af16b2
2cbb58ea29e42726033768ecfafb198812a12225cd4f8197ff297e749f78
ffa948d5ee49ee2692eec8304261cd3b90097497e46b9b39221ab1bed31a
d96f753fbcba19078a38a4cc0dd89e2b38e305371aaee60fe1ea33da7d7a
ad4882488767de3178c561b81429b268a2b6d9013e767bc7d2b3ef0c0304
814a1a39291d1e943c0180dfaf06637c3a4afe81900a0957dcd73a533490
432f31f348adf665f95268fa8bb6e90835810fbe50994b9b8a325fa09b09
d15bf8154711fa1649626ff01b9976403bfe0970f02f6e708441fb6fead9
79014b9ae29bc7568319aea310c15b300ea081c05d499d23bbc8be76c005
7d7519fa25d81ef8ab0756752214e68871f6d8228b4b3d94235ff86396d6
132f937736c13a5b017a01437154bc37bc079776786a080ecc361cc047c4
a8513dce81b2ffd4acff2610a4a816ad2754b5c438d96259633f0f7d0e86
318e36326ec1dddab4c9bf7584e802a2ffe6fa3a94fd4651e12abdd4177e
3812c86e110405356656232e4a84904395544878a61d773cbeeeb0179f7a
33a534fdc797102054b2a8bb6fa89b73ff1d2016cde0d86cac97b29fd968
0946e4d58df1755dd5484bd2fa396943d2ba000d007927d427027dae6d6d
55e5aca70a29a3e8ab4a0f538b6cb8041d58f980a20ed33507a73dd79159
58d6b57447e697949970f871685fc6a7c186af97b3c6324c7ba2fa81ea04
da981dfcde4650c5c25d0a737df70b103636edf5e833f46939759fa787c6
f6842affde618d8723919e21b483200705fbf33b9ee86c3f05653de55726
d8335f8b93dafec474442743c31c8b223362c37c1475a07c412aadd47c62
e9e2ed6a8cfdd8c8f1f0187f19e24da21ddc296bfd54b3c243d4a87fa2f0
e7f69beae08604739a45651ab240e24fba7933d1ba5638c78e90ed998090
9af4d8a0c7f4d417db72b3fc16626a145bed1e31fcfc81d559800c070bab
0bdfb1c4977222147bdfbdd136cd9b2e9764e90a233574176aba3b4d7de3
9c13c2613b87fedb0102345eb509034c82721781a1872a4b255e86e38dbc
2f3418a41a17269813f13b1b82fbf3ddb1f7f32012b74b10159d2fa5528a
f16994410289bff1e92805e25d5a0be2d5d143c8b7c27f7ddc5e6f031e88
52d7768431db3490a9993cc5802489310abc8a74a159baebeb7894ea557a
fae8fe3ca20270b4dee92f0032f04d6f9ecb589ddd51d969442238b47ff2
0fed19ef4e32983ab72efa1869e77f4bdb7911415062150565fbfdf8c484
a5c3bbc8e0dc3d6567e4e0de7a8edb56043ac5a849d5f037541ac79a335f
6b82417eb3d3c306ee7e6a2e40d0086fff028c7c946752168e7ede9b190b
cd10db82a0118058f8fcf36d7ff63919d7fdf57dfa3b6927382d9ba45657
366869f0d319efe8fca0263827ccee165f641427af31d51d2db5aa163789
e82742b04cc330608170064fe2f6a44f227e86d345957750c855f66bd527
34f0496b6f1b6bcddac153baf62e152e46175eee7fb9e058058aaea2a89e
356629505a3f8f54eb2252b65dfaa3a910afffc043cf6f7de3f504d20e80
b2ec6463426ac7549cdecddab8d980ae35d0437b017208dc4550dd38f22a
f442caf3db947d00715339814db0403ef0caf4533a8d3ca2b6b3090c323f
65cf5bc4f70b66e1e15d545b86a6280a3eeea0be02ddd5d89dc9beb913e5
6bc63590fee1385f1cb9e742779e5d55f0a3252a7715ec151b4a6b8cfa63
b7b10a299d5c9cf69f73359e40e549a554ece334bede9bc9b48bf807caf8
3c75433613b0773821ad4a50f1eb450c30a1cccb760939a95cbde548b4a2
01b33eebd82773215d0d1b4a01e32c7bda2e0821620fb5955c269211416a
7143d37176e43328d5dd99ab92f09f23b1d7ac6b3054ea159215e774658e
beb6b31e885058b894efa374ffb810805e822a803154325afdcb655a384a
5d991277686c365628026c05c9365234b29655955613a0a0ec56b2aa298c
cb4ea71565ded6fc78d56fc13423bd196686fbc85d73374fb660ff91a207
087913cf60d6d7f5040c554ce7ee0e3046ec5018fb87ab92075fd5a6e758
540008cf764d707391c024755914736ba65ee517d6a5d36c8567ca9f39de
4b7546e883a89f2a0d80e36daf5b4c3d8170fd7b8067b369005388573cec
cdccac3e735f49e85f0671527f4d405e101af1773a4ba4bd054b3ebc7f13
e931285177c8be1ebc066229c4d1f29f3aedc772c80ffd304d5fe894fe26
f03f531338cf7f53b7effeebabb7a68a24475342f1eecdadfaad149cb9f2
5e98a26dabd495ef5e490b095dc1ee30d1713a6b6e3cab65ad5e5e23002c
1b37b95103d0e06a30cd368b55c3dcec39732ccb0aa79184714bcda05a9d
e7e49d5f45effaa521e909830600aae73840ba92948febd89e7a860de54e
860e57035e47463d99484a786ca524a82f37bc69853f14e7124d98c8fbc5
6c5f2b68e7be3a1673919a542b3ae8f123130c11508f5eac99f9adb34cdd
de154d0a1758d0e0dbbdc65aee56c6796b4c6f4dda634bbd833470d69d68
b1370194ab448e73c54d531e5f4eafda371fe4ad21dd4915498b78926389
69970b98910de2cd672a27429046c3ccccc6939260b386ab4f238b4c6a68
a2e2c6131faab1a643e7feff57a323bf42b7d90f68304e5318502999a62b
78f1dd2583d12552364e80193dc7fdc3f2f37ea500d9c6eb2ed2005d0a5e
ac7146cb91663dcfc1e5109048dea26bd43a9c768ccce911a0b73d179986
edbbf940d2b8883890232b734aebda8e353bcb99b878b054d1193edc2723
92d7c66ce1cd31526e101f01d740e2b580c3e733cd25bcac29f6d56cc53b
5b0c4d4edfe08147ebf9c7df007c6d22d9f3667ee9842569c9631875dac1
1e9184d05ee58878653cfdeb7f07bcb003b000886a9a3f1f92f4ea403de0
c3ed39c621e7f3322db8abb6ab9c68a8482726b27c96255ac852f6eb49b9
a5f684f8caaeb121697489445c99cefa1dafea777916bafa5d8d76ff31c9
7e9b27da21736565676b38f609c556d075e1b74a667abfc84083b532fa63
b7ba7f4ca75749243cd47adb39e6a23a41b3b5c38ce4368b5f6566b20399
9059713ca344243898c06ec6da5695860b2bc538de08470ab6038ec2fb15
9ef4c224508369bf46c19983464ad6f82a878abb24762c78a95cc52cc5bf
b2d1e9da46a60eca5688fe5271740defd0fae36c2cf480331a9a9f0eddba
19881d5d6ce44d16277828576c7015395c7794b5a3a6ab2e7fa2061b8085
e4eb4fb4d1e5624befd9fdb33a92b0e1ea7f5ba54ccbe74dad1fccd40705
2852135b2a490864cf2592a5733cee078d8072a191a3c10f188a50382685
46d843ccbd848710be9499a4753bf39aff28d1b7e79a79cdb899e6271669
d7418cded76970af56cc6d3a031a418f9f656eb3b021478528ae50572cfc
f783faf20643ae2b6e43a7365e759e5110a5c959b2b116fb856360a0bddb
e877005a20ebe92b166bfc0e032686ae32002f5f3d1fcbf861ae71b72716
c2499ec97d0be0d8e664f3cdca9f576d6e9631f9571516a404a4359c26f5
e14520f115e589968b46ee0a8f5c722165ed05ccbed05ba9a19a3b8965d5
cc4d8eaace6073fbab7e98beb2aefb30bd8d287658cf0e0bb2cb240e94bb
50c1618e2471d3223c25d7d95f9c443768423b86e1ae8428e0d46cf7d1b2
4377d224db65c0eb1c1877129fa131564b2a1cbd68b2a78f58f185844c0e
da3388e6963982e4032b402e8fb78dc08f7a2dea0e24d069738d17862919
9851922d530f6776e8e07a229ccc97a6ca01e1491703d48b43080597077b
4e8ab1e80904aad494eb462da7f00ce0c011d63b426ab0559e901632a54d
acb1f327452fb74ba16a08c62130598ac56b6fadd2e42af33d00c3c844df
5a5b362980929b9a2ed763975fff28a8c25f87a603f345e025562cf73157
afc01d08755d303c3c440881d8e3e476eb63e18fc297d462369b29911f25
47c63ccb8bb61158c9785fdc7c013cb814ebcb38f4706a8616353d82578b
61b68c98b2737161fad6733e6f15459d6794f7021857a5d22eaa76cbd232
8b00c4bd23c1e994eb870126421688a109a220605a5c203dd85edb5c72ce
d69dc9855f1333cf81937ed069e6cc56ba20bec72cdb67fd3927d00f9587
0ec391714ccfc11c06b94e491bfbb95f1ca5949bd493f54e20bec6681be0
e77a8e444b9f98503bc428db4027442f97c2cd4ae6050a16e0709fafa2bc
aff87886d0927d4958fc5400ab16a73d7ec81fba5a3a3338ec3f82f6b2c0
95a1510dff3c9a87ac9e5f220fb886f56c9ac1dfbb032a6c7d4d60bac0d1
c0232891a838105f72ac423323ef78790ed5ca086b465648ed6f77d85970
917739c20835f7abc256e77ca49b9373f7afc7caec7860a079ea3897898c
d49e68de8292b4b4f6056b0072eea5dcb55572bb39bff201ef88b9d6a96b
727b0133a0e865a845c9dd2383bc233e82e832bec989896ffbc55d462eee
55228c8d35f93d7435fe5e800f7574e57184807f106e1eb720b86ee4a6d4
2f64d2ddfdb792bedd3c0707c146ca8f01f9c3472949aa8a4591f04b28f2
4ac972a4f75721764dc43ea759c91a6b1b83541d8acdcd216dce55900a57
72de0f249948028d43e0d2e3aedd09dd43e8fb4f472948420222f1f0279f
bd1eb3646ad9fd1eb8990204a25ed1db8a86f3b32b689dbd05ad268b4c86
57f997a3c7f43f5ca6028a32bf8dbce56842374eba98234d892296c57de8
42d37f34d35bf2dfd40e4af1367d60ae4f803cd26c0b7da855773430f508
c6e93ad8508bf3731f38d01a516fffe587487efdb9c7d96a07d3d75f53a4
50f17f2a396a3ef2b99df11bd422821a034ca07e7dd4d79ccd955487909d
8b7a3a20fd4c0b31099bc23722210801e922da6b7af581615aa84b13aa31
7d82735d257fe25efd93c1bb8a2eebbd6c0655d4304a4720c995bc3497cf
53bc0e9f861f872db6ed84c4603e1233f709ef09688333b5e796d1abd4eb
726887e07090b133299088127cd6b30308fef4ba07fc9b5d8f33115352ca
e0ae098149ee39280ad2bd535ea45a5e72e31ba69583ed0ac51f0b2976ce
088b69c9bccc7ebc0d965061750f1568c26d4965b5e02b35e6b504ae4657
f7064150d56c6b99f1ce9aadcdf9f7c525fb0423d815bd1ae3ee107a1935
99e3faa4fe442e41157160e47a8ea19ef61391c3380b0abc8d99929ba245
8bd7ca5f6313bcbf499f6b69a3afff1281bb6422b4d8d63ef54b19ff7e45
1136d2a271caee977efae618ca892923dc1a53a86522362388cb092a87b0
a6f20c89b3cfb0fa36735a4c26a93cf17ad22bbb82855e1f5f4578de7ef3
c113e073bae1205d042958b95cca2ee85575046360cda714426a72c686d7
1e04290d8aa6f03f792139fad47511fd6036aa888b5e125b546ed4816e94
528cd2a577a07fa67008096a745d6ce183f47cdb37b3f2ae75c770f39796
5447a52cb541d6868153e7af45a36c702557506c84cc08cb5b2c1453d986
252836792028c5028215f64d790fb06ada44dbac38ee4cab631d993627c9
69f0a82a44fd435b0adc5b097520fb970f5736a4275c6b6be47e954a7755
e8af958995939ccf4e4befec4aab1cf3e54fbad89c1b63738369984752db
53090aade4e4dd24c6603685f767edff8061c5d576156ac9f7f01354d6b0
33d2cf900555cd4879e79b802c043830c616dc62cc10e5bbdb5af6921eb6
c3687f09d0c2a85214db930116b553829c591577dab85040a1c49cdbf4b3
94b704fa4719cc2e6db0da94b4753a49ce447d4f3044fa5365b2e35ac60c
9574cf13fed0cf5ca9d167a46c55ebd304fdbe5754edd5871375e984d5e5
00276e40aaa9d77f75c627715854a09f60fb50b5fc1559eda52d31820eb7
70e950f141b6d8db6c53f543473d7a08e013f3403740b95facb084e667be
9478632822b3c9744bd0298cbae5e92ddb55a47d2c4e310413d3f6324679
2b9fa26876996701c7b0cc02b86ea9e9bf8971fa78aad25d2d6f77c43309
4dbe40a9bf82c0c97cac8402e712847fddd5be959e449b483894197596fe
b707ea70c717790645395937be36f9f06a01a68b1d60795c663edca625d1
a284e7ebd4822f986112673b0d1fb9d659759571699d9d73e1c01f751416
a379efc368da4f735adbc0e3eadd850c5735a429a9b60412218e7efe2c2a
01082b4141efc78d6f719c3888fb3c8e76e5513b7854e3208886aa329b93
aaaa8b46f48420f73e3f7295de0c563643482b3859672d1ea5804d1a4799
2c9fcc90899945b86af29b2509285fb816cc340ee8e20224bdc71cf5ddd4
6d12926f9d30b95598df299b43b999435f87a704310389251ad13292fcd6
1f6d0a435810cf58e6dd669811bf13b00435208b0041f3c8de25f4175ae1
17ab848892a0918eb858d1b6960a8cff153fb9bc0c25ff0336bc00515945
2080498e5cbb682b759e79c982312c1f9d7decaf86aaf27b982d3d35e554
bd670a4ea9ff0896ed671f7b8e854916042cbf4b5e2944e8297852a975dc
29dfc8db0bbbc3552cff3e494435bcedb62e96e367df32e77bf4310ff053
00d575e25f6c45a49c5071812e5159ef3e4e2d14baca6cb8ea8da5ead9d8
d90071fd6941c6873defe1584707dd63a1eb40b84004b86447e318747aa6
dd5bd99cb5101b5eb8fff48bad1553009699f28b16b5d147a8190774b9d9
90a09e0081d9691b3006ac2efd07411a7bc49caefa00852c988cdf8a7699
596e5cd172fa2b7fddac42f2ad1dd9194b193f4a5b1b02432b65eb89abee
3bf6c3313ec97f5d04e3ddc3af3454a4945d3bad04b57b61092260c23223
e93a7b261786ba2c566e4808d79146b716144f26f1e11ea637061ecb7bc5
b5ef3986cb2b1913bb0e3f27e25ed08bc3beca5c988aadc9dec88522db3a
d67960bce18fbf3dc18e44b0ddfa6fb23cd95dfa5ddde1ea18431ecdfbb8
589acdc117cdedc4f8c62ef58a24e190e7d829dc3c0dc91d1ee8326b1b8c
101f50e64f116fd33fb438a0d1536470a0046bff9f8903b78b3ee3e2e7d3
1bf109ddb2a61024ea41151f98aad3b1759e502d2edf438ec1c196815182
f913a9a7737ff556c319a8a28b005d0acad04ae898c2a94a9dcb4c5e7022
00aec4cfe2f84b4ad1b4b99ae1c224152a1fe43a2bd373e58b4b84eb9ed3
017c6de5d11429a4f336b37686da83c7a8afb54c1db5c4bc0f7f68667568
45e2ffe08c02dfdabd4de624a12b687d59a03e5439904eb854f6a6d71f84
9dad21cf78dd10a675141566464ec588b97f8434383014c06f179e5e078d
055878511f41c857bf4203a34fa39ca3e7bef1b70fd9f023e57d1613f23b
0dbde242bde5877c463acd35413e3606016a6a0ba795eab583167e033a12
e4e5f91d208b9b7a84705a99a309c0b0ea0794ca2df5be5114cf1a40bf89
276fe5288a4a29b00041cd3fd306d7385279d3feb0f311c1d59cad16f577
1fa59cc5946d6ae3b4c59ec16cde8353005028826d2848e58f1a8562f570
568475bfc3b2a194d78ac0f9dd7bd600cdc1744bc2e251631acb09b3a4e2
fd2793dbacd0014a82f591113bb24d4a79a9b2e45334b5317e7d5527d156
05bd1277ce8bdf448d4a91d22f408be9c1c3c0c2ddba4af3462e5a1b62c3
18bf48f3611d7e284214e4b5e782c1b3595364ea4ae13a19eaca1f888a89
13a165dd3b9e24ce9e2d75e33244f37a567eba5c23440f97010565de5457
84e15fdb6761992a6de148cf1ec467ef3e19531eca6ab6d3315c59a7cde7
d33c50a8b834642b9001396b019776404e63a3076cf34614edc64e1f8b29
3e7eb1302ba4e003a0876c4bbfe5bed44a2421abae7dcd4e8a9ef2af3932
48098c0210f14903de9c3c42286918946928bd113e4096b700798c0d107a
d46911ad042947009cfe587aeefb8a0ecf574799097fbad8f4e658709fc5
057dafd3d45ea471dc7eb371721848e1f9a13ef7424313546b2980165aa6
88f8b2a027a684b5d81eabdd43d77ae1af0d2ad6ca75cd5dc8bbebd408ea
f84890cae04adfaef23c5ac11beb65148badfe8fddf883554209a2cfa6c9
be86c897d33bcc1ab03616537ceae43cdb96aa43e792ef4cc622cbbcbcf1
446d3a83cf33ba5f04508f311d7e72aa19848a476b32b914ade14b56bbb6
3badb9ee0df6eb9da461429eeeca3be8bccd267f5ccd120d1250b5319a93
bf19e76ef14ec1d626b024bdbabedeafe12bebc6868e33cc0b8ed2d6b48d
fd711904326b03440a4e186dbce2a12592eda0d75d38b1ef60a204e3b29f
c95f0f4b2812aa6cfcb91b10e20a48dd8c419d8ad5d9b821ad095ae77db3
68a66c03964f9dd7f0f7cb05b59c2275d32cfe12fdae920c0bd9e4596897
68c150f99b1183aefbe0ec7ea92944ea16cb66912a15dce012f3c29ccdf8
4b88b934bf9b3ec53ae372af8981a82adfe8c906634173926176d28d18c3
1f22732e3a25971020c20381970b9373d59863d926d8bae13e9827745249
ba00e1c291d5ff2a6ac8ec14b85c2f37932bc223e24ed39188269c3184cf
60a533075703753ab58985569b59988b8c3a6e1515141c223b28514c8476
1705609af5bb4f5466a3ec640cf0961f2723a840c74ee541ff1077b8c6c6
78f2cad8e45ddcde7ac78ed77c19d735ba779b46d3867f4c78fb46495bbe
37105ee9402738d2cb09e097056ae8ff7e31d6f60617c19f81fe9f17a4cb
208e214373a1d85ebe5b1f804a567a1296aceb40470839cd7dacdf48c2c6
be314ef553a47363b7dfbe46decd2759767c7c9c827e0dd8e25fce248c16
a6733db6c0e89c9344465a17ba6bbf5c21e134a31d7f73d50713d1cf060d
b4e686c6d0e3976c81d85cc24a593b9f1be0f6c73377b78a12767e938f7f
1a154c99069fe531d5042221656c23d01503ebbb11d83778f84ef3000861
34d5e542f9dc40715cf1c3acb3fd5bcab123470bd4a3400f79402043b795
33a3f86b903e3aea081aab87afcb0e3ecebf2ebca317ca82b1ba625eb42e
f3b1cf3513eefa9074505c69477b82d76c7bb5a77eaa2ab867308ca0f3cf
7c17c55b451741ac6ee31990ef5b99b24b1f52a50246f126299fd5c05392
88cdcb2a9ebdfc5446efb120e4bcdf0c3b2929b73aa2fdc3f65789a0c03a
dd8c6b6394169c0482900b19a1788ef52fac7136847ddb68197c4df1874d
9ad571198d094fb413d787e8014d36f8a510fa9cfd267e743bcc227a4226
8215a31f170a1b7f5b93ec0aaa7b364f8e80e8a947ba063698dc75358569
75481201921fce6ef9d8e0aca774618530815b8a3f4b3b6f487ebd04866c
33aac7f2a4e48dc95671839c38427ba63a9d5785398efbae65d26823f0f9
1c693fe1999d3a695363d8f086380287965d459658290c39cfca47122d0b
053f9e23235c81898298760e6409885c060f4e8ca632c4558c4efd379826
499bd2528c4e19ba44677d6a64a26db0a6fbf7b373db8555539652b0f11f
385c3a3c389f305f07de054737e379c84bfb0fea6102b699887326408920
edb68c85b4491f03fa1ebd6a77b1c1c3ac133c4e174e3f07a114b0f04892
6453173e28a2e009a316cdf7e3d2227fc0a0abdeeb9d7b06ebdc9c822e93
6fe02385c32af90b5ff4cec7d3ee8aa4b558daf9d07caba51dcaf9ce8306
243b51d4fc39f88b89cc1a397e03a519e31c9ea31271f81b1ae76fc37cbb
b0b60a59f1a2c3eb5148ba9d1d5e40a95a770fdf8c2b79c4044198415a4d
0a30c43af521a22f722f43edfedc83fe40ccbeffde3660e34bb040d6d8c2
f98469df19a881cfeeff2d35bb92997056a9b6dc257a86b35eb62c394098
e022961f1fbc565721d91b7ae19adefdc761c0e0789d10784246a7125d5b
bcfc5422e8b39f9248125fd08ed43b92ec5df76cb86dda6af96360536bf6
d3b89769317d5462203e4b89ea91ccfbc971aeaaeceaed45f4445b701a62
4b8fdf216a1cbedcf906c6849512a105b0afa64d26cf5bbf74e364fae6a0
95d0caa6e6d08692caccbd65f0fe9395e2ab33a744dc97e36ba99c6af93c
7eada4cb890aa67da5fac70480775a16b33e9b94d4b9b545004bfdbb2444
0ff38cd66d07092d227ac3bd1fb6ef2b229f6dc27247b1940bd918efa83c
4355a04fcdb7564abe3dd9c203a3972034a1076ca03e3a084d6e3d797727
3dc9c8288fd46effc9e888ca9bd139f6d3aad203880867c3b166766ab604
9a9c273d95bec17b3a4869e846c77b3273fd39c8fbdd5c58dda171780a13
e9d5acb8ec1586e8fe10c5dc29088a5d06037db3f1d84a56a1607803c46d
dc894981913ae3bc7548d9af0b4558f8cac18d5313720696b0d11a6eb9bf
dc4517bb8a8b24725ab724cde2f76414f361f01de00c37b86ceb6e41cdb9
bada9c39e148ed2a4795ec9485b763b86f6500752a3c071fb6c06c18655f
bac7569b51e1b18c55244608c4364c6d8c7956b786b1fc4355e98b75a357
82884e3cb8dc2677ebb0cc49eb75a614a5ec5828c97d66cf58174087ecb9
c7b3d29f8c86cb9beb906700d4b318378be1fabccf14c6965b3f63632fad
214041f9437e25f670a200da49eeded9e7cc5aa64f028467ee9fa9e847f0
4e669c5469164c4025f6d5ed69399399d36305ed2e2fda3baeb66a7a66e7
8fccb1bbcb25db0d94a77c71d33e9849b32cf23d75c75fe94a6c1335b029
34da9a00998cc0d0a86fa056be69d678ed3e96edfe6da7fbf1dbaf81c361
cb9840140fc981db51042bd57739e59cbd7c3710fb0c99b13317002a7434
a818d97008668e243ab49897cecb8933bc0a4e69cf783a0e115fe8752038
1f22b03fbfd191d1676b33d7bb383b111e116f1de8671ba2ec6dd3e6bc94
1ed8a2451bcbc7e02d0207b8efb009535db047704f3d85daae2a8cd1dfd4
f174cc313394108d64abdda7043be1b4ba45c3efba8a5486723ce606ee9c
e2201e05c3fe6147cd33793f044f64ae204d95bffd7905332ef56bb607ad
e471ca5161505383dec9bfbe547c0807dc94a32baf2d18074cedd9e6a4c9
ea72143fdabd84a03870725ada396f70f3c78f4b6a52575b65aaf6f279ce
e082763a509cab00cdf488a3c5ece279e5530756ec2514a2fcd10dc8a550
890c31bed6cec3ba497ed37694aed60aec9bf3a12b8eed6383d0bc44f0e4
e6022565ec260fa83dfa33baea041ccafb2a2c148e9219b56b3706c7bb6c
ff0bc36f19970e250bb71b1bb5fbe6c547827c7e109e13947c369198eab5
f7c009e3cd1fec710d949bc2be1dc9d546ccaea228545cb5be2e6ac04fe0
5a4c46edd0b3082ae2b8cf97d83eb36d35986e0c6e469af73638a63e32ae
48ffb4652e93b74391ed9114e652ce82079a7c74a856a46ea177819313c9
5c0005f2b3db9eaf937b28bc67baf381acfa432c5d4796bd2d48706d4556
52e3ad592f1399910d51dacbfd1acebcffa76494259a839821ff2cf821d4
9ae2c539670441858eb96b87114229a5e49e77002c1e63d75f31f31e390a
7cb021d8fd09aa698c892f6780b293974774c3caf73817728171e76d381c
0b7a788e7c57602a57607165677f45e754a8903daec8d1a183ea1da18fe7
94cf74aef719e4168ed8cb43370a3b76666a7dcf6cc59d13b6dddf752de3
8e911c36cd761c0b54a548085fc3241081ef35d43132ecd54a3c677612ad
eebcdb88eca5f0f7a7534b9c3bc09fa3cb8937e9954dbfdaa4ea6c52330e
067840054595d3f42d1588fb49c47aa6e70fe3865e1745cb5dea8dcb2be5
6da4a2bafe8f5eb6d245425bc0fe4603a75a7d258b523f79c80a6202e866
32a60f81c712f442091900253fb30b54d033a798a7bb537bde816523263a
ead12bb10ddfe4cd2fab34bb2723cbe7b4fd544db2b598d92ccfccde63d0
7f987db9c1eb914d295bf86ef30baf65018573db4279b65b7cf93c8425bf
8355e2ee353426cbb20ff3ce43187ef791f43fc12b59dc3e01c6310d8209
0f3224977d20b0c468104181bacc3620f1b5d6a34f298739d99937aa605b
d6980b7b2ac05793a2d1958905ec703b19d2f6bad81bc44250eb223037aa
8ae3ca4db18156516e4cf2da02905f0f35240cd2e6a6c018869361c647d2
d053e266d99271a1555eff4c80a03dc34db36b5f56f85e94380e8046f4c3
fb63b2a7addd25facb1a531b03219ca523593b7a3d82084807370ee05796
445af376a401e94207bbe84c6a7e8061dd7da9e2e15e3d8e584a80385832
c03dd2f47989e5b525a63ab10d730e978bc721073b06d11a331accd875a2
5785c27282c430a7c7917d717a4960524f8ab636806ab510e5650297379a
4d50bb1dfb9894c09485cccc8e3b8a0245abcf5bead2531f5d9646860aa3
2482e0938ccbe6fee215e3e66ab3981b5e17b3fbbdcf8b71cc54a982f840
165a1285121bd8914a567add9d9b18c3a3f63c97e53f45c3d1e20478893b
5b7602b0616293402671d4d05d6af5bf6a24dd618bed0ef930ba421cae00
8a25189a4a0c05ded90545a56cd7526c97f84b2ad6344a398b4951016b4c
1a38f1e770e52ab5f12c7f3a8104811ec6e2c60e1d9c4bbce3182477eead
3688e7ae026d21092f5926fe0e487391813c9abd335a377ac222e289caa6
a0fe7b58b497819cf8bbef97b5764628ca0958577acef061693887f8f57c
7e0e44a12c08d89f1ba71658e28e48a211d40a7785d598f19b4a594a5851
acfb978f3f519177e15334dcdec6a61b0aed07edacdd7b1024777e4ce155
0a9416d099bf100061aeda290e0816dc93eb086c2af2c18ab06e09c1db45
31850efabcb8c581c6d68e8a41a845d4490d77b5ec4e2296314bc69d9eb8
77ccafaf97770bd91a0a2969afdb11445906529c9fa253e6857447ffdb87
17c16b8188fa21ea2151077ec4fed3450e9c1fb4054630fe4f1904c6cbf0
2abb1f7d1144376485a713eaea90e89d1be00945aea3cc86d3b9202bf021
71c317bb5d48af1c05f40f9b0d467fd43a718d66052354eca4e3cc968964
e859a305e85329a88ad8292d0b42fc424ebc26db128fd2ca87b116582455
9f0553495cc17853af19edf355b33efa28d3b5a1fa29352e978f8c6d38b2
dd9ccbb026b02c3fc6b173d73c159aaef238cb68d3689d00e50f80463543
8c05e3b9943a23eceac0f0ad3088e06f6edfa72ed2e72b6a90732915e9ab
ffcc9c976e551e6c14f59acda3e853b5159f7a9b570c687d5a628c2a8a0a
1973088cbf4f26081b60b0a59268db6eac5ab3bd6266d36d554b48275381
fa90e28910b3aeb133e27d5121b1f9e11cc670a4dd0589ac0ad0419899df
f5efe8991d6f0ab709b9e663f2555cb6e46bed6c68a70899b3dee0c74a61
c80524b269b5cf46c0b442bc291b63c441b07cc6b9b48a40afaa9dc4dc8e
bba9f31fb3bcd47cdb38e25c027fcf05313612daf5f65d6938d104f59aab
059a0382aa7088b8c32c5174ad181dd510691f643e4892c4cd9afc0c18ed
31cfeede9c265589d65f14a8532c50e9ba311c54cc423fc5740bcb1c369a
d9a271b829ac9feb88031ab28b533f910a70df065e1dbb0c43a2a8a8764f
a36afc785a506e522bcf2ce53b6b7b8ecb39fa36cc91e3191bc9e84ee12e
a134e260b400ff2c13a392cacf0ffdb748aeffa923d3a0a15ef93e627d92
13cf5b49cfc99e272d6b22250d3e0931f43a6abbecf2225bffea8e28ccee
2593d6c53b9b2514f31c277f5994b1cc2c6dd0d74d59ed408f1653d2db7b
551984badc4b4a33df3075f5e1334855b4eb91b0aa6f41017fcfcabeb5da
83f7b167f23afcd95bc72697a2b8400fe3b9f87f41472255989ce67d955b
73213d7d5c890fbd2b43984ea804c1590c8a0975edba1281da344fbd9c18
d63a2aff3d10149d7890819a4c7901167125e7ee579c5182210f329c7796
4eb477be29dad9e307b5974a92c59c64b8849e2054fd47d3365f69c62708
6811cd
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndResource
%%BeginResource: TiffanyIt.pfa
%!PS-AdobeFont-1.0: Tiffany-Italic 001.002
%%CreationDate: Mon Mar 27 15:47:22 1995
%%VMusage: 36778 43670
11 dict begin
/FontInfo 10 dict dup begin
/version (001.002) readonly def
/Notice (Copyright (c) 1987, 1990, 1995 Adobe Systems Incorporated.  All Rights Reserved.) readonly def
/FullName (ITC Tiffany Medium Italic) readonly def
/FamilyName (ITC Tiffany) readonly def
/Weight (Medium) readonly def
/isFixedPitch false def
/ItalicAngle -13 def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /Tiffany-Italic def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/UniqueID 42150 def
/FontBBox{-219 -273 1134 948}readonly def
currentdict end
currentfile eexec
7a3a0d3099753deafcd2046492ab9d68baa879e0b3a07181398178f33e90
cd35d9486da54912e79fbf232fb0fa2a2c295f97b04747f11986c2587334
263ab80cea810e7ab52828a7b3619a06d82303fc47d60c0c0aeef3533c92
4707adf144e78cc0914728de36db9138030bbd39b2e25708530c9b77122c
3eaa186d506cbce92eb8148d9439db105e6d4135b77557acfdcee4106062
d4510c8b2b187b12458e022cdbaa7ef1360fd8e3d5a61b927a9e67fa9ee8
bafe8e0ae803e38b1afbcb3985d946389ce50902b81004795e4e9e1b6ba6
082e475ea2c72026dfe1747b12c56ea69144e2dcc82f823600c51119a974
6d7d03f0a39939279c9bd804ae8c4024dc8983ffa5eb1f0c934b1b9e51a5
5d6e3fd7ce89bb444809d523595332cfef5fedc176d2b750dba47d28651a
05cf32e47df5bdbd865ea1ed94b28070289f6626f81c0df2d1d6bf29b2d1
16f858130bd5bf9d1d386ae806dc72e05bdba4217223b795976156fc3c5a
784f64178dc0691f498a764c228b9681bf9a63fa5f23fdb5bce6546a8e1d
967ff05573085749257f168bb4f51da704341f8f3f4922eaaf85fabf8ee8
487d1e157b8c712df83bae61319f820da88130e51d1550d81b85cdaeab3c
fb37cd7f15513d01fba4b538dd27e1acc9db4a60b8d9d9e3a492882f268e
25718397ded3e2be1a0d86cf204e33209f546332fcd161d58848d0af1cf5
1186ff47379d624c80757ced7ec2e3d1038cfeb00cc2d8afafb8a3722857
26103c97abba6a2d032958a455ffa53a5e5a6e5d0eae6575af5dfa671953
a3ee9d9d4720617c26933b6e6670f8fbba1729ae5a388dba50ca321fa2da
8ea8c7477d7df4d93a2952b548452856aab012bae98ebaea570bfd76c5c2
88f2b46c230f47ef3dd8c04a68b813e15db967c84eb46eb7523b5258b365
ced9c7863e3a4c57cddb28b1b9097e3a938960753f00d28b81688ff8c1c2
40dbe929704784291143689cb11dacf6e3eb10cdd20351f31c25e8fd55b8
798da5ad26ec0e536f13288f22f1c41ac6d69ac3a869ffbbc79ae0fb4aee
e292a7ab8de0b44d8e16512eb4089634edfd62895a8c15e17b7b5d7a5b55
e2fd24604aa59f973db3b4e3b69d01b00b698bce2ac7ad2e341f567f7acc
a6863f48b495a8c9d7583cf666c96fea3635262c2f1ebd6f482582591a46
4060567e5765d0b248443231031ca8e90421b60bcb9131ae7f9c37cc81da
db54e54b38ea0e3a812054196bc994783d39dbc3942d1026e1a484c7ff2b
330cbb08f461991a7c4deb21ed45134788d4fd663d62f51d86e48b2b7ea9
17dffc5f1c26e73cb523074766d62e622244b9ae733b6e907f178e647fa6
0bbae9f2dab964f985f5117ed394b20f7cc02515410039c6c7c02e74926f
91b7b84e228d6b0240e1899670023f7dee4e1407d9e3d4e709bc1c6391a4
bf6ab46b0fb636909c39575f3c31d225c8b6e555fb0e330bcf396048e5b7
2b89cb3ffb844872054ccf51c07ca2569d3d3dc4e426d484a4dc24e008c8
08d1c01ab9ddda775170be09d30d8eb42e0b632400c26ef0ecdd2ee23cb5
24d6c21c312a613bdc19dba3cfa9cc8381f5b192671386a218b4f9248a82
8206609e39f5fadb1004614377e3c9caf09acdd9107d435126856ce5da66
9dac6505aa359861cd922fd7c9143abb1dc1aed2b834bbcdd01f06373cb9
6c4aa9861bfed94ffbc0921de2fa1c6b34db022bad6c1eec6a06c77cb73f
552567f8b7e599354f8878ec394e16fee2d977ef1f9d71f2d28d726d9788
7d9cec6e1ec236077f32deefa5e502d984483da35ff3dc6c5e0a0cdde032
d6ef975caa1ff748c234cda7d32ea259723c8458fdd21b67b34a4ab98a2f
3173d277c764e30e8d915ac35c2a67c65a7d8dbd20b7a19749723ce6bb4e
e44edc229b70d2da47c198db011c95dbedcf7fd67f41027eac841e1e2275
a164f2b55c86cbb9cf20e19cf22ed16bc149de1d1c16ab2b2e3f12c99698
ac3ac213a2b201b038d00528dee19253441e0a664d2286c1d6081622819b
3ed74fcdc23a245508bd687df0ef3d39323977970deff485987b09929f39
4d0c44fd55fe005a531bc464f31e571133182eb68ff297f3d92b53124037
8a125541cd2873a023ad8116b16f9c3b78679afd1febdfc45b00a151d573
1c30f2ce673e3645c33a730a16f87713fc76c3b01fa6929013c45375767b
c7473516494dc4473bce5d316821d15a3ad41ab4aaa75249344eef6a7cdf
5d41ecbb05b44a6b35d4c4f5b28f141b1f8d4bedde082848936976f4825a
d40528848cfad26a750d7216e6750251a29e13ab3f5771eeb52079195450
82e1de1e43a05a171248fbc2da15cde5dfaebe46dc8ca33b4f5bc2b1f7f2
70671486a5fbc326630a140d3d68d66cb1e8c81eea689516d91f7ead5790
a4f95e540395911ba73c5ee53728f852ebfc8390667b011f4c6a7dd3af74
7b4b4239c1a9f1a8dd6882bfcbfa868c782bc5c00c483db895e4a7074b48
28353a06ca3a4232b2577ad3656b43e2ddb4b0ac6b174395f92690329a3a
9844727ed007d247fb16b2175cd4cd29ae4456aa102894306d923fd97eb6
620e7aba7b340f3789ce6685c47474209bedc2cf59b9cfd13a82c4161e40
97154147b3f00a22540ef47b85f21f39f1511bee908d93346e71aaf947d6
6d094122119e0fba8ef83728cfbe340609b366269f1ff4006ce53d9d0347
6691edaa1829d37b02fe0ab4db390e312c2a5bf7a6c8543c22c02a02d167
c1eff5f8cfc1b226b94f53103fc1accf7b61dba8a119d21e28b812b100ab
1f14dccbc794d29592655aed0452e39aaaffa153d3a68aac38357b6ea425
c675e4537955caf43f4cd27d8cc4a62506363e5c845b88d63e71828d4c20
58f0e58906bd9480deddc6498e69f70d6c4378d3703ba39c748160767461
15cb05d7832d7c911d06b86c975cedec0b1a4dd09f862bb8708c95fd5395
f8f3eb6a48f908419b7016d1a509f9afa579c41afcf93d8ea9eb409eb89c
0e086c0730edb15f6f214f04aa623ef343eb8008e4ebfd44786f317200b1
5867673c335061ce19c71a203114787e7f3faf4a8013f074e08cb4549a2a
1f04bdaab9aa3b9da4fbc32dcd018e3c50717146af277608c873e130bdcb
29bd9c85246dff8b3e14436b90c5495fec52f52395d062af3cb94fcc6a62
613c05fdceba25ddecf28ad24daba32c17b536df4a6b54476e21cf6ad11f
76923d321646edcd30a27ecb4e7914aed8784954d7cc1571a2802bc539d5
f1d6573c9e05ea88d466f78f4b128446df426ff193765cc2d538ff01b9cc
577fc28bd2778b317dc4ebc41489913203f29834854ff2949838878097ea
11749e512ccf437658b21127d85ddf89eb1ef5ff7bc09bf3a0d32697c40f
f58ad0f3e325ea83673a57427a9467699b92e5ede4922082170e87808ead
5457a1fb555aebd701cbd005c969bb4892d6804000806aa092df8ae08c5d
fe0a80c9cfad01dcdde054f5d8666347acb88c96eca41a04f9fe187f5a76
a7b6cb6994fe9578f2d6dc331a82d93ef61fa7657d8707168824c8f44c25
6090004f41a1fe36787a969988c78157f6d099ecf11127fc2c565314d736
520aaf632f3178e731c8c25958ad9ebf63d76cbcd8dec0b7129c49c79473
1abc0adba1ad86103c13decd0b332de32ac5448660225a46236498e6ed9f
8dcdf17a0872d79ec81579697d4cde1ea22cb2fe985dc1037f09ef4edf4b
fb6c565ae0166571ab058a806fb11a44bf2934f620ee51388214744b8e05
807a153a004ff302b797a9e8eb6d5b62e4915f660e0d23bd3d25d5b49647
e68236bdeecc2645e8533401e2b1c9404d964a27c321675b8eff5ddfde06
4df02a40453ac48fbcd88b7420897be26e7dabade3d4f898a44ed122de17
8d744e16e688b5611d7e93c22b32aab90037ab90f9eadf2025b6a76e3c35
184d9b190daf41cd71a3d45e004af837ea7c0461de10b2d418f68410daf0
5a123b68400f422d1b9cbc5c6a4d4aa81ea7380e44df46169951a878d3aa
213ac301e945646f51f33a1696d82131d0b79c6fb570a4a337540ebcd65a
9b591c6493eeb968e4ed04c8f46e1f1ed6b524b40a3ab641e6f43c1be08d
e3ae6dae9e7756cb7077630668261ad0590c72fa7ca417921c8248be88fc
b9bcd2ad4d539dc0dbd2e2c7969c67c235c2157daef8c050efc61854fdc1
64a72d3548c5ea959ed17848553e216ba85bb58766d7076067986f224322
60c3814d521a371eca95c7dc9c9d74d2bca16f8ba46dca4bc95a5e6bea4b
c2bb3aaa4ff6198eab1f2437fd13e8ce2ad4d56091316763bc146cf1e0d6
4cd631dadd3ff91ac2f970057693e9fc5af5fe6469726951b972fedabfed
1db0be20488472cb0b2da8dec718cf07fdf505b04f5fda21d1e368bbfde1
83fcf896891a75a148c6bfcdcb2e1ff1b1a587b653647eb6d7753ec42df3
c78cf92ec44068dc6542055904016b624b54cb84a104a218da7b66f8c345
90dee6dad12a3216e9aeac6579a2a5352fcfef151903c4b84dbcaae4dae5
8fadb2ef83ac5af81d9c8eef45253d4887b9f5cf4603ad66ce8ee2bfe7b0
5889c22f8075ccbd4aa384b2b48a6cabf09af611a6235bf3cc72314736ba
d20b3c411dee72444b884ec24f11a142d46c66f9f0c763845632f3b8b189
2b3efa1ffe8c17d3497108cf0ae8b3383ebff30fd04cb851b6b043621989
3507ea3c908b65bd9f3970baa7cc2ed2c09288443abff10e70d9b318dad7
65f3346410bade511ed7915053868677d1088d2cea42d943cfef44d6c4f5
f7ca959a2186627d16876b71c5d6e11cc347403e90283a65f0c989b57712
e0ecb7dad0c066f4561e09282a409f734f80c4d4c2d00eb23b9f71357fc7
c707660d60fe4c96a4a944937dff1564ed35e8e193eaed2925267e07a65e
0ef0cfb34cbdca02b599c6d544af04d19b9cbc3536a5b3d2495d2b955915
e160b6e3afb1b9c961618c14c3ea33ebd76f9477e7eaa3ce758604154657
3cfb43cfeb5395ccf516f32f1c3de75e32ba1c5072eb18fd1de3a0ca370b
e1a3a70540a206176c98335e02351c0680d9925abf4376f2ba5026d2c58a
f2bd0f42fe4ca058974337bc645abcfa56dfd5f0b4d9521a19117a056cac
7c3705661edd14e9a0451b1a7fafe41798f8203b2aeee2cddaebbf820789
94068416184ed492c6bd3c79a91d8c8154752dcc62517245492b2c1b2616
7c2f40004db44078641ad2cd46e85211e450080716ed92a1529f467d0c2d
e2df900af4da41ee8d78b64e830d28302190e781e785a28ae54b0b93cc99
88c1169f02d12c338c680a3d8607a45721df8f6bd8e12c1a24cd0799fa43
fc941e67502d1fb14adddccc24fe857496c44c0ec6246c05753ffc4dc16e
8753aeb99f18bd6ac6f4c2f9e2caa6f00325335531924ec2d0dc8da81bac
ae194541393ac526df491299fb92411ea7b388880d20911e556da239a357
12b6ef2145dd379e772ad96dcb8d7986efe443f346b35dcba04e9ea7a680
b162ebffb218d23a032b190f31464ebf59fd8be117fa8e8746351ee3b6d5
a17a5954b974f4f1ee8b8b6bf32fc7e15d4a53572689a42021e63c7997e5
354740180512a711523bf8412c50488b04661df687b061168e4f2e157e79
6128e338a5eb6a574b199f1f8a66682b0105bac912eff23ee3cabac306a2
352b39ffde4ed8f7853e8d6595377a5c50c939a63e4ea2015eb5186f7d07
158b1e9f718fdd1dc0ce8a94be42d755d2029f3ac2de3540128e9f120bec
0797c5f9205f55555037f147aca048ea75a08ca0a9472ef3c00a3f151aa3
b9d664dff9c47d86c9def03cdb67f67fed5a3c950dcf6af95cc6ee48663b
868b7b608f0720e1458e34f967f9e979a290994d9fb35765ca5ea3882fc5
32abb329cf6de89654b6433abb0c95b20e78380cd12d75f4f3e778821404
c854ccea74c9a037e1fad0e2564876f5856a625909b4399402044dbd353d
34073c205d130987a4d4bd656225245fb102cd8c623748ac5ec0b4dc2ba6
96ef13e95a20c39b24aa15f5656dd845db2914f513ea54a3c53d80bf9fef
50c3beabcf3a57d98a23218b4ab4afb7067bf7d232fe380d5696dc6e5649
32852cb87e146dfb8ee78f2be1a10ad09e57cab3d346f64476570a007285
84775fc291bd6fc06d7c37ffed36b01b705950e5ada089241422b7463e88
d70b39836cdd88edb852782bde11359b6173114b896102064769e9214185
9431620c7ff185103d5ce3a6cf8ae7238b05f110143e8d6455ffbe99583c
8eb072e83173bff087d80f79b69f74e0e3d066ce1ad4cfb1ca6574bada27
38ace3f07609905210f9103fea4c4ceefeabe9dc6dd4b59fd65b080cd231
25858b6c66995d660f3db011ac3266af9200ce48c7e2d68fb7ad80ef5055
54a6cbf5e2664a6519785c9b64a5fa797068ab8ee994cabc96d52f6954ed
e7437a8a10f7eba4b38039a1fe858ea0ff4b81ea865425096d7eb9dd44b7
548b76b19059a0d0dd04724beaa7cd2f00507f4f6bb623927b5649b46950
ab6bf07d601300230631f20007f350f8187e55bbdc13939ffc5263b4c861
2f3bf922189b85a690d809a649a25f8ed61a35fcb4a5ffb2f7aa483ea284
e78c6f88a56a3e240784e37730d38c0e6cb9548b0e3e67b4194cb5386a9f
de56716dea14c97755796cf7a0f123474e46a6fcff8cd61a771417838f4f
2892ba6831e2c5647890b84196c3c471a0451705802262ea46c10a3c6fd4
cd339e12c87eb05f6ecb6215f74257c639106f141d61ca88eb0e9270f156
7114e78b73818b5e717592daf39988ae6a85b5e130ba6cc722227d5032b9
3dbf461364c16845cb0bc54baf334912bfedeb42c9e9dad7666ed26d145d
ddd22e0e5c773c945f79daa35d54620431903d20979693882cbb23d0d015
39d67e9004cc7c419481f39ae662646bfd9ae2662164b98d9ddeedece061
ec542d73d26e2ecb249b488cdf978dfdb476cf67a07181ee08e5fb883c07
b4d1fe3d1d33992e979db35b7998bb509f24def4fc8d31c1bee697a44125
d33c6c77245b97df00eec78953d966a40872a70e7efd1fb77b7a8f0c5436
14e51bd9c0dfb1a99022071473739e1f09d5c5daaf0305cd48c69e079e31
7db0d048e0fc71591ffbfce8a4a1d30e8b43279f12d7854a57b6b5b2728a
f5b0e5944f6d7e8684c4a1503e2193f8ca49ad4bdd6bdd349dfdc3de2a7c
290a14b82a7384e30ce9451616da46b144133ac8d20f544747f01b659fe0
5b9e5a80bbdba175b9f82629a0ebb7e568964c974f08d8211cd679827387
e100501c89d2e34dea0c2e789f980cdc2f2c8cf8bc76b0e04e4ac13ffa51
574104d914c65f83751b027c7725fad07c881c2f53b07f96cd78fc1efa3e
cf3d7d2eb68282fb4b5fda3975801cd293b02fecec8f6ac22dd822e1a6da
de33c9a47136431bcbe6b27089ded702101c69546d22985223c59d2ce7bf
cc905f17092589283f3e912ebf8075d69b3e385755ca699dc56439b82d60
4a4ae4955f7615dfd783ebe2c7d0c09f5b0ec3ab063caa1d00551b941fef
d9de83159dd922febd61e874eb2b89b94fa40517722027f85f9cc9994299
49c0773df9116068335a8151642a8f54725d50fb536e8d554172e59ede7d
ac557d769b7404cea5c1e1a3923ae34b82b96e958eb8b0602a890f1bd8e8
1011cdfaadcfe37d611a8bfe8744296b82e39d074f3635d91b3cc9c7fe1e
f98c9daf7d72c850e790c2ec50f72f92cafdd30edb61c17179e372d08b17
cacc945a0c7816248fd166740b99cb00eb119730ef2c3445256df775176b
646b59746be354fe583740ccdbac192bfb05f63ff80d6897c0a00e7df109
1c911a27cc61fdda9719a860eaeb120ac5541cbeb3e1fd55cf9849461261
544d873cd648f932a933fd549ec45f5cbb457bab8b58ef342cde68c24371
33f753def24db3746dd056618264298647780f990e32c9c8701a9702fd97
68fcf95db3586ee7245200893d9e8bcf2b5d8d0e77099c80e18d092bd7af
81bf8a553abca2921068f7a54e4b48188b7c1a6ed715174fdc062ff36334
081aae29aeb6844af621088c626da2c7d454040942038081d4e9e0c3e520
c32544b1159e5cfc630b40d1197baea535c1a288c18ebf4c7ae7bfe9e94e
ba49fc91d73744ef19e4534c0f5e0c168338a54bfac86eccfbb6403b6c4d
4e685fe79883897652944307ef8b8de13257fc0b523e72580e2596b30d66
89e73c5dd51fce0943fe5eecaa1d47fa81dd4b72ac23bb0d7be44f25a6c7
a5512b37b377669796d33103f218407dd994d8d57ee7df1a65b07a025af3
81c35f5a23cd738155649a736ae27d687fd36ff23f55a4b6d91a67be0cf9
c5c003d389a7bb803be32bbe8a4a77da9dd874b1f859c8c1f169cdd415ab
0c9a088312f4d4c1c15af14f86ff69740c1f0bb18648a94f5e4bebd122b4
f6bac9904390835432dd32943aee55f80633e1e450feaacc4bb0ad658432
9792d1dc1dde40c372297e16c7309217d5bbb7102e954c2894c1489ff050
3a29624e0ba8607346d8fb020d71c1703935a38af3bae12db31138f30e58
d9c1819ad130948d8af94eda9e22134855b248fb86693fe6edcb4380200d
25a6202af8f9966c26323175eb162e4cb816e6c4e63f5667c85eff676e72
3c6c1599389dcef5f2982a2160cef6f32abf989cec3ecb09387c9ec0fd8c
a542805837a266234fd871ba8fe39bd0386d4fce408b0a0f12d90b6f5dd9
d2711f11765eb01f2e2024538a8bca0ddaa900ec119a909a96ac501c86c4
6594830c9e5e2e52847c9b9bca7c2943cdc4fa99be2840fca3727306378c
f65d169f3f92e0eaedc45725de7cadbbd0771ca71cf8598cac9106b5ba27
c4f699773ba555b5d71a5ed9efe08c7337457329a074ad2500bd03763a60
14124bc16b088375fd6bd1c56ddf5a56747842d84d3baa5cb2c343ca865a
d6eb08fa2fb069092d4ea02661a402cf4aff62f1666e701fd4c7e499e61c
4686faab794eb821b63db4d1fa8b554b652b355cddfa9f8df7de8c7e7964
bed66b069bf1cd919c54deda6d8b077a1c724582baea71ae6e29ee2e4494
6440b52ad54a7c667b746e7fdcce3688fc646c6f76fcc0454617fc0c38a4
8fc956b02980cc9e19915a366f6045f5d43a7914b6407510b64a1329228a
a093a0ee8c22f78da5dff7c1fb44735c6587fa4a676182b6ffd97fd3e210
8ce79a21dc798b57b6d414300cd6be92a1a01788e7f0516187bb81b40b75
4394e6830ec4826e6c7f3fa354cdb22431be8a451ed95c83caf38316e986
71568c022f8ad0d2d8c6a8ac5ffe38e9cdcb799f8bce7a9056479d7518cb
5148b8827e082fd5c1e77099fe3ec025d734644e89582829c2ad59c95ca9
de55cd8d1ebcf9428d5d82433d2faa8f6ddfff4bc1a6cbaf52fdf7cc2d6a
b40715f70b9af5c9984cd181bf5d37b697e2b8a7fbc499c3f136a98f316a
c3815111283c00ba39dfbd1712caa81ef738f8e1c07701a04ddd891ffa65
3403651a3266303ab23db7135aea375386cbcf09f8a660ca6cd43a262b7b
d68deee2b889fbd55809737ac8cc0a3a3e9e430250f8cca8c602590badfa
db86b3aba61a84428d9cb2d691578cec6a0d89c3b33ba3a2e4651db39d9b
4eaec63bbaaf2e0955e1d3c7da12f94c7ac998d31f9fef582eab5b74e127
8a39ef82312bed5b6f557ba2d3a523b80543e5c5b2204ba6fd54edcb332c
e00646590983199da6987f015c0ab4bd62e667fa06ab61a3c1d0ea8db663
989c7076d5c31a639128102d62a3f206d810da65bd8d3281145be61d1f77
aa8dc91c2771befaa0e3e4206f3ae88ffdd3d0087e9d38ace98c666a4d4a
7c57f65c454cff01f3bd2dd7ca2a80c1e17bb6826b4e35ab90126937f606
ce5a24796fe29cca3f2c38ee8691c30299e796103d4140086fd9f9cec20c
ee61a45d295f0825d1b48c061b7224fea381967c565e034c9f740788b9d7
b97bae34368e79712a5e8444eb60293fbc439469c08f07e98b00ac6a2c1c
37bc8609d46a2d0cb1049930bdb4d12ba2d2042f57f548d73dc5c490e46e
1bac2a824a390705c0f8f099e8d18ba4b5f121d52ee83b21d299d5ead8bf
f23876cb49dba0ffb2c83bf3307274d02343fc598ea42f95a56fb1f8c8a0
428308ebe55caded4a97e92f225bb113b3a3e8fc01d84dc4acccfed1eec0
ec92c3ff589a833caf0e9494750a1ab42978d57d8678b15f3416c56dc258
7b3c2f3622334162b1bf463feddcb9320664bdd66c9dd3fd7f2bdceb0e94
3007009ff7757a6d61bde960bf251c956ed1a9ac8c22ef61e0b567a39b29
b519be4166053fb20cfed9c5aa4d085fd01186a2472dcc659b20a80cae34
ce17665d13c0146ca2d33317382aab257d2ffa311afd4a09508774e95c78
3ef9c83201f9e0509c8717975da9d59e9b4c5da12b98a6b589b9e0c01c17
7ea3ed939bec1150e4c6e54e5892c60fc0494544624c31af13206b0d38f5
8b02a8796f0237df40ef2716d7c4d77ca2591028ddb00af4e036477aac18
74a32700cd93b73f4f036fd58bacc9e3dc44eda5cbb912584b266c5c06ef
63d681fd1772435ee75c8c5d6231c1f255744f3cb7307e166eca7812d485
6a0220d3366cbfcd5813ff0339647d8808f85cdb6b7caa97f404db4e4044
975a9c829b7883736033997e3dab254a5df25389fc7baa1ba1f0ec5f5f1f
e158229590d5c74520eda5e435310bd71e1dc9533a66520c2a48d82eadde
9e8b932406ba5b5aed376a057b88365db9d878f15b5372d5ae332f40bca1
a8080065d875e597fd86c9db3f47e833d78e89edb7d86bceb8e3a1672602
bae86b0a1d73456d2a52426fd9d567abbe767df8cce51a98200692200163
aa9e5ae09666534c8649dcc9f51823400d0dbcc82ad0f40995284ae92296
2e9b9683dd0a033de386f94b531769b7eb1ad7c452a48094b563b51f4c8d
bffeb2d0c59444a3fdd876c697e6d25e9504acf78803e26a829b61780a8b
1306671dcc76959a8c32073f69ef2e946c2007a4940d0e0c51f19db3ad73
d16afc80fa5df5a0bb70a6786cd5b045a18387dc4980f86f1c952b837fb8
13c279dddd0c3f35dfbd11c8174c9ed2ca50caac1e6cf707ae34c2dd423d
0c7f0d87bedf74f1a59023bff5f6da7fd0fc69efa0c89f576296e39b5243
489fedbd145a7485192cd106c0fc13a3479ba44c7e9d7c1b8b95e5a898a8
9fb65edf1e1a988b26704b215d6b9405a4843cb86fc4dabaac9aaab54ab9
d15b3ebab65bc815407597ce9f7f09f144050157b37692dfeb263356731c
5597365f12fd5a5300d498923eee9b65cec72ebf29b1e541c0ab8eb3b60d
cdb7e754249987e748ab7584e573bc6fda0dbc5c6b3a7607a1b4d3852774
a2321a14660afd1db39c4a5553e4afdbb1991e9399134fde3f9fdf192c5f
caa92332775ca3b06abe5a809fdd1cfc489086f239034b4fe068e2af4d27
4129db1e569ed5065fe5c76127646450b4dd214a81042fcdf005e30e8acd
007bacbe5c02e18d6cc8de9bf2df21ae6d20a01886a94d8ca1baefa545cd
49304d5e1cc74402da93d8eab00110c52774f2df8d7e1ac8bdafc05bbe95
f5cf3c9d2dd2e9f583ecfe7c1fd1be9eff941ec1ccf79a3545fe45023874
ebefe747a325e401becaf0f437cd98b6ec85b5b8190a874628cc9a65ca59
4a4aedff18bf467dd819c05fb85dc5f680c7346e831d3c24a06b02dc44fd
03b20f96993c69f022bb331368fe4e71641c05a5e21cf8fced7ddaa68193
1aada4a4cac7e3f46ada7aeece8d0994b38b71d6f2a9da29e7699306822a
99192d2a088050964ef0fd110b9733ecd7663827a52c642e743a1e031113
973eac0440019f895d8365e0560ee6fe799c929ddff289bb8ee993418ac3
07f04b531283c51e16f028dcfcd0dad189062346672138d1ad937937b0e4
3c349e57cb37cbe175fa923bf11322302e329670a237254858ae5321b119
518f8915d4c606aa3abd102469436056ac38d5ea429c41b9e98167d892da
454ad0926707b289ce2e9a59654c286ccd5f0f988324bd2c7ef2453ef7a4
e099baedb98f311f5a3413a510569daec016a4a913c7df64c738014d8afd
7c4e23b22f064acfae7997177a3c803782746db21bc3fc6e60beb193b070
80cda156b841199f3d5ab9d9efd6dcd1a73b59cdaaee7e846ff0f8030c56
db55b73041d06df7fe98c6d6a01f5b3576ebd2afb80c2dfab6c233968191
e7b7f96220e50f0db42ac67a77de40579277b7b2b11a42a2386d089ba20c
804a7d55cb116582628830869c4b8950541d6d38a941b2dc63c1e79dba28
3a93813e33005d08ada10eb03e52fcdfdd089c92653f25390f64b9300b33
03692d5c81423b35e48c7fdcb34c33eb313e70daf6a5d1797e4b7b953ed4
f6f92067f12929f6f4922912827c7042d0fa9579ca4a305236fa56f37561
29b5af759075522881c60962cd7c684801dffee3d925d00392d7fd880256
acbcd4e05b48ad1cabbe81b9e1c1c4b98fcbfc174bf13088ed9fbe0f9339
0f33f98314aed7cc2c65d8a1ba23fba7a2acec2e2e6cb17639c0c0582368
0e71f714c6247c7cf59845e3eba064d6c32136dd1aecfb57169147cc8e8f
9f6950eea90534b1dac60bf92bb61fd2d81dc84a62ac02bab5401021599d
6fe457350b7570c987008ddd25bb09a3fe79e3259797ba4fb8b5b99b11b6
1cc145d599f938528b2faf8d0f48f4287075be26cd4aca634202da201b0b
3ac6c9ca9d1ff0c3505f8d203deb5d23b7a614415e154fa7dc9dc516670b
7f0d812fdfa0afbd142cafff817e98ee589f79a70f034309006fa201bee5
5632a7c14225a59eaa8edf4c9c69d10a575b3a123c6e267745cac27e4ecc
02c7e3ecfe5f9099e9e723a9d45666ddc7da2ec8211ad750c454bcb98872
289a7d17b25b8b383e3e81a3953cbca4b311fcff77c396d0b289b97ff086
1842e35800e12f2697be01a123f96b6878db27d7bdd3070ea48cd513a08b
fc13ff1d460521c3a5688ab741087ff89c0b150027f209498fc0fc7abaab
13a065f1a9f534919023f9ae1aa6a640977ca14301896291144692cbef52
a22b6204039d36fa3b8ca48526a1897106029f137e9db5657fa5c24bf3f8
419710a917c3377cc5cf2d882ddb7a815c66634e5e55f7d815d2005f82c9
2797063c29872847f00be120faba63edec6577949f13ddfb4b26322f2c72
a67ec9c940381e4de6165cc47f64a271407a5ab8d1f0e8d878fa60de94f7
41680e3394e8050f388a4b2521b2b5cdaf9e986f028043ae2900842a32db
4e87e639dd39e2e1eb991bda6d0460a6a1431ef99380dc3c20536c7ae311
db6ccedca84daa491e0d6234f6b932d1365ff5f06a5d35b4e9f60dbd69b0
53029ee2080f14844263eb4e1edbddcb30d959460d9e39fea71c679e8467
7c39a8c72c09a63866f84e28dcd42c92e838d729aaa8a999efd6a87885cf
eca462a5d43eabcd818e0e86ae2df0e6af4d8d22068cfbe1744a30ab3a80
dfbf820b07aefbecb11fa3a6393fed4f4ce2b35efd116cbe43f3acdc4fe2
747e296f7e7211c060bc16c5a2938909c4f10a24e5ed1a315ad009dc0067
10cd323dc492ce737644ba73e249df82959b1e3eeca683d9207b094f6d97
1381960d54e70a58bbd371b20e7a772139885e1d20cc20db47ecfad56121
d0c75f109e72a03d8f44f95348136d96ed689ec4c1cd336729d2cd5db8a8
b24c96ee59e4a9153a30b10a2249d7138c17ed07c53cb0d9aa90fcecd6d0
33eb8ae473a50e81e89dd5d68ab16ac5f3b19308c7344ecb332c7d4cf823
7de467a88bf306d6d75631e2d44426123a5825393baa6d4a95d95ffc3580
c85ce740d69a94505015b5707cd69fe7f592ebb133d3ef1fd80f55db236d
65501129f4968fe0e9af453ec0cc4beee4b3187c496b4a644232a354e452
beb3fb79991e66ca38493155d8a748f5502714ec1d09bd1c6b7afe15ba26
8ddc6ddd1365b5b2f7cf918919d666327ead1b1f161b3d4c96189051c633
f209d16cbc118841e4ebbcbd2a745695018ff1a874d9bba41c7468aa6f96
13f84dc337a6f9754f16c8242ce70d3252ace41865f470304557d3c48347
50b95770133a43eb758be7d934137fb26990e0069a6df4e5f203b7cde1be
d929d879a97d59a2472b574841df5efaae193fc5edf546b77c7e41db4a09
682010af6fefb10965780329aa80a25d140163a55e4a435b996173bd41ef
69bbf938f2c8386b14314125eb76173331f572549018c120a4f800a63d8a
7feb04e0e86b7fc9a4ab07088c0be764c22e7bf89670962de649ac5717ad
6eb996ce0a8c344ea9070912d57718f38fe432fcd0c2f61a6489069c78b5
dbab7353f0cb046435e4390781fb0eb9d4369a85b030ddb379a4625b1ad3
5298c057ff78bccf1767fe060e1a751629525ac7cb408683e777b46a4f4c
7a0126cf813e1f62ce636d207ee691ee94ecdd2326b351f31fd4cffa4c70
657873aaa9fc7238db816e82af39f3342fa22348c49c7855d7d2a9f6fb44
cdb2e2436ed057875a7165e104fa6127b3e0b941e29c356fb113d52f35b3
bbb22d476cc4b2cd27484a3fcb13d46990d94315bf07fb703ee8a48a4ee9
754bf7cb8bbf9a4e154a5cd8eabc66c34755f10efc50b5f0bb403f74c5c8
59db67dc210ce8292edc264e9cd5b2f57603ff99485dd45848cd503a16ca
771197ca088506d7ebb2d0d5acd8defcf1ee4237bdd709400338851641c8
9b62d91fa2ca37871e0b5260d66d84a151c05113e4d80b82094df5adccfc
360cc0469e29342806aabf0d34282abd5be8bc3cdd7dfeff7b29cdc48a75
75784f418e9e33a3f86bdb7dae530ea6a3fd326492e28b5b35a9468d1c1b
4c20a84e98198dd30d17540688c7c475eb6f697128e126b25ef266b15d19
eeef8ee302da2f330d26f161bcc5922229cedd0ae3a7af497d43f7e87492
cfbc0497387e49370b0fe014a259846e2930cfc34ef700e93822b314cb71
fd6d27182bc79d5d9422e138ce58d8321471852e22b6d957e9925092eba4
6f09293490caa1bbea39f2d0b333b9669cf9ec7f7b40cab36919bc270ef1
b7df616e6740e938c44de29a9c852e8fb56b4fea676c2e7415e2e0852096
6d1dd1c67d41646d83d4055ae286e82fc696e4038b434f41817049f2696d
54328057099eca4390dc2807ca1cf7ca45e597495b43d7a02b914a4a27bb
5e37c8b079d3c27c347a1dd748cc8cef9b337be425e8b5c158ba68200612
1cb066830f7913eb53c363f639db7988d35b006ce68b381211f0b120bbf4
ae19ec8111d034a16fa91d59836fe36585d1613c263781cea4ce333c635a
f24e189d77c434874380526ff786bdc815878c50f06a64f7519d648d9823
d2ac409872179a4b6490db428b47c3f131cde0437f66cb47b1221393ee60
44858b4ee58c36e01b56a6f589b1cc22bc422a5d8b435403ca7bae0f6184
f38c786f5189ee143cd6a2a1331e027f086e572b1dbc2c67c338363e1e35
b02b37b0c060e44ee2f29abb7d715d8547404a01a79f3850d6428e480a04
e1becf92c9cda8a7ccf1d0aefc878c843caeee9f5412e4d7e8ea412a9546
92eb159ef0e4f96be47322d48f1bd5bb3282b65a413bc7ae4669b9f4681d
b493a0d998323f44145cbc976b9b001477d2edbf2fa561c62f78cd53c1da
f94706858ed67920fe7fd1fd37996c6b49a6e5462f59d25bef3db895a20e
502d1960ae240a1b7262fae895a5766538de1c390ff9c1930ea9233876f2
0cc1d74eb043bfc174d395d5a7c6124de20b446e467ae4516e235466093c
1d8c7e08416a3a705cb5d5fb366ce9465f9369470093f622c29e60d74b62
31833359b4088dde2925ddb4df62f4060ebeebfc183b9c98f936db2ace25
9683212f572d05934433c30138539a256153987c1bdc1c2d28c29e7f9f57
23e5b252430525fdb7b14b865a79209fb5c972370f80efbe81627c16c335
f53bca3f1d5675b30047bd647bf8f501dbe7c66adced3625ce44f1515e6d
8a58112f14e1fa98a91bfff7035920fabd1ddc42ef563a8e196b5aea62aa
166314d9f3b820013e0c3f20960c4463f65c05d61b29b6837e236987358e
251dfecb27c6ddba47f865c1000ebe995843bc2ab63d1d30be85cdd0e604
d0d7596b26d220fef63d7906ea86e8fa75c5fa296267a4a66901948e638d
e8290702d6153ab9fa8b615f46221a95490decb6af67a45a21b7e49234a9
97054d54beb44f0178482ac5c79e149cdc446b40376c02311d57c82e30e2
1cca6b7d53b373d903b306438dfd9b6f3d503f3c9d965b479ad1a8991bd4
460007d5951b4586e5ff8a20485f8b3e9774d69e95e6992aac10e7998126
f90211c48ce48ebb53978f7dd9dde68eb6f57a96da197edbf291118e23c4
c2dbd9c779444f03309bb283e167f432dbbd60aefadaa26cd5d56738d0c9
ece9852bea3dea91ecb34aef4e6bcaae0c58f7a988ef194f3154be115b20
cf61b907844e91d481711bb87020419613e3a9a94b8817933783faf43d04
3ea60056b36e68e41dca287984c11c53424f9ae966d5459f64f133445f9b
eace5a237434aa0d0f90784fd28703489ab9069cccd9bf7cc7d3453824d7
35f911329baebb777123fb7fa9b6459b7cba07d984eae52a0dbca0ef357c
23d40631e91fb974842f68c92da11eabfa772cf4c6a5dfcafa0fbb336ff6
0763c21dec0ebb81ba09dbecfe5a994a1eff309bbc6265f4b71e88513f16
9436c0a64a560a0ee4086debc97980cd532bfadc6968e7dee6546dced88f
6a6dae39408cd2383b76c7b5b32f92145cff3999f81fcd96889638948ef7
044a88a26e879472efa76a885298ac08c3f9450b9724c4e035f07618bdea
173b346dda2cd774b2af17cfbea57ff4828906777213a69af22b9fa55814
59a9821f369e632475987aa9fa05924a0485322a5daf9bc57c0465c70f7c
1a5a3958968e769ac0b94177a724393c4994e69bad926a9b088d8552702d
eea62ff45889db9880038fd73765474d0c5ee1c3c20035145f69df5e8c75
2643d1a451481d63a14d74ccff486d9407b360c454784ecaf49a6b78171b
1efc4e1b97b84804bcb947acca91946d82b3eb23f733cf9d0ed2a84d8f48
13272c7da1d9d35e6360c5e55ba48829ecc4afba48829bddd87466165b42
4b019883680acba7185b45f084598486ee0089cf45f5c6102014952c0f5a
02e5c60252b2bae87734b44c6430de87a62f7289f9a74eeb8c4434e9b215
7a170ff60c6d4c4e58d66d5a7c7bf1b8613a3368b0a7248cfe6ee30f86ba
85500ee9f29c09597aafda53d7976d388aa4b3a2b37659939df44c887966
e2be0ae3cbfe2222b42526a4cc457089598528185499d0abb49a352a707a
d35f99c66665bf4d788295dc7878a5fc0e71e0adf7604bf5811a247f254b
c99b4f1014fbff5d72893cfdd499ecb30538e17851bb792977a1f0a34267
d497c64ab3021246438d76342828bba8d70235617f216ed88145892e0edf
6729989ab7349bbf719a8c6815fd446a148c1552dfd92b68dd0020fe6bbf
e56ad722a51fce4acf18989a15413ac5300608ecfd4106df8248d046e3d5
029e5c23e170737a95c84c8d98372841535195812f0d49d705848bb84c4a
7180050fd0ae2d7fefb26e24d98355bca17d51bd544db6e0f5e11344c2f8
5e8cbe2858a2bd657218b9b03d111b1fd9ba8ed0b00ad4c2ed80a1e95a2c
bca333ff5b760211706bc355ced0821bce905ce8cc44e1130162884ab277
dd562a8221fcef98dbacf18af5e8a79c55ec528f2a5cea01575011c6efd4
5c6eaaced8514e4e7734c851ef910e3f0b6e5b3fa1c7f0d1ec37628ee679
e3dd712b9657436bd7e1e9219eb4992b1ecde7d1599f4b476d93fbfbfb6e
f8ce63b7768f807fc26dc3acebf52b1cdcd95be2c46ea10b310180dc4dca
3c87b0e2fe3288ad57d6840943cff60302022b16191a1af19eedc71d0b56
0a9a900be2a9498a70e1a238fe5c2b16d0ae794576f758d14cc0f0fbac87
a59216cd55472fdb958cbe3942244ce5bea26815b6b7c5b7c54d46546186
85d2549b093f0f074eb031e79a25378109ea659f89698980a7a7a1c14da7
4f9b0031b6a4793cf1924f73f505e32147948077333e4160054db9af2c0f
674fd3e9fb7ef81c51b4f4964e8ab236315346da80d01fdf53d554bcee84
59d041bd4bf386a454b2a77c37ef5beb4f975ab544da2833ca8227c6f65a
ab7b585ee55f682e2618008a0b5f967d8128c980fe9049c4e8e723e1c9d8
9901e92bebf155a146018a06adaa37a715faf71d4a82509188e1bbf0df01
9595fde474d281e209b290abf6ddb1f3df00dedb51da73147585897586ff
1f4ef30b3c94b35b6cb0c0d3a8135a8deaad11c52582d45cd2fe965b907c
2d0c3bf865958d6d160970461ac344fc5826af1b9c0dc63d3f5ada34a3dd
a375d34417ff4b57d4f9e6121f8ac8c12e22c8be62c7cdd60b76030a729c
6d49d2dd8e22a28326bad9b9a7db96b30ab5c98ef6a6fc6cbbbbdfb71b48
55ee042e6729335ebb1eb4da3a6f64bcd2e88cd8a7432143fdb6570d087b
dbcb13335831d9daadcf27aa9b23b1755fdf132a526b2e9f61912b094467
912bc9663d758f4b337ed576b4f9b3290f086ff971bdbd48e829167165ba
845db54c32f246147f070c0de17f0f88951ea83d905d1ee30c393fea8e63
6c244e8a4fe0da6562367b639ee0be8aea12b9cdb75470af83de455061c3
5a9db7e6f13da45695670593053395e95fc591bc02b0597d08f07e918fec
ebef77c7b2f33c385530eedb0f45a381544bc20cb09f73d786150b982230
b981780f12b2596aff59dc617852b3c8ae7a39d61724013314d85d874fe0
559400845922f22022ff20d53bd836b7d26848197a638b6b5fa41f25fd29
ea136803c1c6ec1473c279e8a98e8dabd0d3492ef6b51091f1880c68a4d6
d069485324c4e0ca40577f8417558058ab58a9407dd5804da0de708178ff
ada8474643221dfc2572094021880e2450df66a99545e89d72ddb1dbaa15
e9fb4222e963dd4c002f6874f10b7a35dba72b51296b8a6e6587fbb1f830
00da798568c4d334fe1eaedccb72672b8c9616b7a0f106ff1c8ff0f4bf68
26b6587d783280ff9c66df036bf2e2ff298e056cbc3d876de99167e57657
8110c260bdaaf11f3966d6c4d49fa474ecd1ad872784066a66d40cbd0daf
8424c16b1f2b67450dca2a7c39e10d3cec42755dde0f98ad5cec0ffed3b8
aad9ad70d339ad92c0c446c8404f021ba8638b5becfc51263830f8a1c54c
6a90b63cfc8d20c7536a76e1d1f8fcdf59d345aa32c8ca9c0fe9d85bedf0
dfa77efffb15e1e4d94d92cead8db5c1433cd87705688cbde1a5b979b8e6
86fd98d5c5160fe1d09ca697d63e261bd4aeb5428a2ea8461983d3f62fa0
3118e7094930df48f3359d25943bddce64ea583129cf3139645062b1661d
16997f30dfdf3e61875cae648e3f91863102b41acbec273bdb59c703fbe9
e25ce5c87be67e6ede40d63ca87874adf6982499fe4b7ce188f6c20447b8
cf9b1c482b80d7dd000d30efe20a6f77279486f41d5530a50f044ba7071c
b078ee81e588f802ecbed120b03d5536c866e713ec742dbf7b8ccb48039e
df42482934e589800e56c9847fa5b2bdba6c8375205d76b109ab3a9cff44
cc375999a80b3aa5f141f9032ab39aab3dfc3fc8061eaff9761e2301c625
ebd6bdad3f48897eda829af894ed0f8002f8627df78850c3b80e7b18b699
ec771f5062ba7de15c95029b2dfcd09abe57b371cc48f8dd8a36064a9d1b
3c40dd5ec1e57406a846656ff2d9b46751f376148477534cc3deed65321b
c40886a086a7bbdfd6c32a09873d2ff6250442e837db1fe20cccc3abb7b0
96d78fa90f8748ed8d3e01167e6627ef55d65fc620545ac5df291319d3cb
1b8988cfdf4f12f6e6538acc9281cedebe527def9c2fd2cf4fedd63a1e78
d4dbb973eecb6ba31f431b1c24bba811fd3da958cc5470634da55dad6830
498bf1c8ce4d0b0f97b9e6f9853e8a0b5f87ceef11b1f50efdc44c20c282
2b06607e82f984863238a361dc40a05d3e9adfdf17241d2f048c6bdda9b2
df32cf9026e881ce1b86b68713fef3fc651aad926df23c716cf12888228b
fe31cdd7ca37cf244b78adb56feb43f0e32831a612414d2920e359a264a7
b46a1d83e38886fc4cf291c6ebdbb094d6de3841401b0bc4f3a206f55cef
8c5db4c9064b60b6631be3912a40e6426a81dd294aac0b9a5d2b7e8cd991
b069b44f80894d806d7fc93b7de720763cc9d3cb9112ce6418f9a913e829
eb50bd2169bbecd6cd7a6e1eedd19c12ad32ceb5155d0745f936c7a2beea
19c5a5cdf6d2e3497e1878f60fae438ae3bfbfda48ddc81fa38e9684e3f2
80535fe21cf781d47b2a9419d007bf0459798cd4e870df0fe5662678d30a
72ce5e4d318526311cc9878c6ac3a4f9bd0443246386bc6f15535b7335fa
a8fb23ccb618cc9f5bd4d472ae061506442621dd8eb5da133f0ec6c2b568
a6b3bd5d4770b12b2e718260399c74131caaef008592b2c7f1d5e6f3e25d
b9edc07b438f64a902a207a294820e6b62d64210629bced44f381caa4b1d
627d785ab79660e47a383693ebe7a5aa0526e6ea3121dda70ce2c5e7819f
f0dff6cf826be3209808450fe54172bb567f300fe8ccdf8c24fac03f08d9
6940532e913be7bb4b02743af5ca55e2ae1b0b37e3ecbfed17499bc2293d
720a6d8ad34d610b2a288f028e875bc0937924df6305f0686bbfc9b8ef94
c16631b637e9227c0a93fefd9a024170b0a85c4266eb2e5637b4655bfb5a
d438ac58754befad0ca0987efec835c9c6f28eb7886ca1beb70ec79e36d6
2794adbd5850094988eccde34e88171930132b62b62aa5321c554e7556e2
5799f45ef8d98469fc1833823253faae1b45fa8d7f15b2ed9154e7cbd897
ea5426c828397b707b10d18247b156d54f1395f14162b59e12660329917e
bbd6b1bae7bb099ae65e31c13631d56a7bf63d77fbb6e66660e5c0adf1e3
359a26dad342f327b8b6fff33ab202d07dfc023af8230cf48d34718821e7
9bfa9a149b483ccd9c29195cc1ee7f8767ac61adbf73e9f6883a4da3ae6d
5811bea56826fa766c384cd4d22fd07fa4264e40a2ab33893b655d682934
23f43f7542cefc3361552b1b60a7b50fb18542262febd39adb207598955a
ad37bc8baacd71f56f59e14c3605c345c39f8717abfdfcdfb785f20f25e2
6d3b01e106b53432cb980c444c0395e13154347a56b7bc814e2bfee3ea0a
d96d7495fea059f1002577c99086af9f05cbae5824d303a25a8d3583e968
0c468bf86523b4e79f9a5ec630748f0481862ffdb8cac964f647b3fc88f9
16ef9505a9234e25b3850f516e4ae4f61a23022a053b7824bddb36749075
c65b7ea044b8ca13cba285e619f409a7b6a0dc77aee5eab5d3416d9a8ec4
c9e4749bc8f70909458479c7cea78be65925a870c4e34ac5a3572901ed60
8a200e2f5fdd8214a59afa32398c966fa2213714f2db412064cca2735b28
dde068e34ae72d5e8a491fc556f190fe6b25c7e619d7b64691d3721fa978
9dfee30c5eeccca935bc26e584df6c426959a2ffb25d45d37f03ad6978da
d0723106b6028b07fd9d3c5e2090f69493703be2271ca80866f1f3b4da00
93e78a4c734f1a6c5f77f5ce36e7831964bdfa58a2f075ddcdfa016bbc63
918c2b8883f20b46b50aa62a6c28378739292b60ce1f5b82de095ada66fd
922efc1158ce266b07e273fe78f080f37c2de90a73419a443875930a87d7
72219c6c28c5b70544a9ed7edfeb864a08cf488225528892fc0d9077158c
59921a8f9be2c4796ea43e2c857ff57356b7d32245658443059b4d140a10
8319656965577e08dc0abef984f30a349cb2fbc2a9e637d91df1a5fb359b
12017dfd93ac22e11f921b3e28c86459a74e40385df176224889fb1ea03f
7a985d7ad09dfdd44907550c5b4d235cf0b48e14d7ac24bc13e8179d48c0
a832a50aa3dd51b3e815bd18488f6b6674dc3c06d6999cd720ac58dc676b
8285724b8dc864459315338d1846e448c6cc47ab978cbfcc9ae45251c073
e22798552461f0efa16ba9bf9e8d1ecd6176f9548e66f3992be7cc6779fc
a8f6fd9a57f9d5971bca0a5713b58bec36f04c9f39dfbc0054fa8daac788
dd8ca338a9c5c198ec0d414a1650ddca383be1238523b2cc682c1e81a877
49d4f2c767aac1dbc0bb531b16d3a4018a33141e63b53db865d0b1f0a7a4
f9f3316f1c46350a46ba9cdae1405e6c04cca13c83b1c830b196b6eb185f
682d0feddc86dea70023337646b03b9792fc6c860a9a5ae8f9ebd3902aed
54191946d7e4b2f057132748ed91e7f84973d20f2e51d93095b559579dc6
c86941d892f60db36b7011fbafbef5e5c901d18ba7a5fbe92f7129c7371e
6275dff5171354c71c606e818b356de58f90e1be684c62674c2df6ee5091
6f4c0dbb79c6c8f422cb09f507ee3b786bb26a93fe293414142ae2c3ed51
a5cb0a8eb0fd15078b1181349b7daaa5f396d1e6dcd809340c0bb89df5da
6873bca358ba5f94dbce07d02f183f6fa2656854ed28e0796fcc6427d9be
6f3a337f426597520799a9a58826f9dc4571a0030d9801f893628fdb0451
bc1810a027b7609409cde629de5478cfb0f01df1b4d2408340d11fa3c707
920605583db144917391efbea79b5b5f65475076e519af14b87f481523ca
0da4eb1719ce2b2dd44d9712ba14eb1bfd2ee012d870ea00e28a7562132d
92b61cc37f61954308986e39e0c85ff6b759c28f7c2f4ebefff141d41d82
d8d0848b8dbb17fd74de83f7d9ab436377d3a6cdef6a9dbd86fa0f22e48b
4864d17313c3ae22ba39947ba8fef21f42de4d2840e2028065eba6de1c9f
d87d7e26fa7c3b689ee999a41aab3032af76d80565b7f35c4c559fc0b02b
130fd9b48b54c7ff3406468747025538b295f7af2db1c053effa175d2b47
2c37f10783c3c4fdb82f233438eec99717af59bb1181602da85de42b8563
28d4c5da43e1c675415f2834f3419467b113c8034302e8a5145a43961e91
ac844c3db77ae433c2642e4f2602e0cbb48a1fcdcab64633a05a050eebef
de9621baacfe2dd9ecdeaeff15c1d5593b1a8db1aaf8e83967fdb16d1d43
dbbdcecc0929d3a074d2782f4c113950a55b5ce3c8cab1cff5becacfaa6b
b94209de538128cd7d7a670c1eeca56c744c376cee7fe45ebbc19fca1d29
63d4c6d2ff7b0f28823eb2a7a8e9d67ffbf0a68814bfdccf92b98cb0051a
c2918e3064dccc0874b8875ae9378b09af9ca2702a1aa210de8c38497479
04f2b6f7d7de8f4b05eba3cf0769e858554fcb8aec6abdfed6976b82977a
b50f33d1075a177535120fc2dcb20fb1f1c058868faecd34ad8cd014dc62
4f876509fffbacb0980ba708b3bfde635be28b62bbdfcf046ee69014bc14
68746cbd050a21deaf3036fd903a208f4e2a18c1dd2084e34cfd03dc6f59
651962f828bca10bf8633a61608bf5f3846f9331c0ed1caba509694c4382
c187a77c3772bad4674fd0700061830ff17c7ef3d2b615c20f0eab0146bf
6357579606d3fccff939b1f435fa82a6c81f43277de5af80cb43b821883a
c68af242a0cc9dfebe091e40bae9a2fa50612c7abe8f67f04bcd72ccc68b
2f26ffb0ee9d5d69f633d4fc93c3e8d1569cc1d52569c587b6c684a775c7
71a2c17bbb46026c5a72f530a2a14f501ca25e7562e9a1ea240a7b0e1840
efe082c266d997269f1ac8aa5d9a915b3ab527a823eac819e752d8191367
280184208fb51b3d9c397631bde1987a8837f43e8e6d20670806d3368191
341bd94188e62c6acfa80733ba8a5b6e5a1779b96f71c50b1f282359fa38
9327abf9e2bfd76da08b91b25526555ce80cde402205fa397a24876b33ee
f05d90c588b8842fcb040fa3963bdfd8fb70ac2ba98128588da16bf9e233
fdf2a0213323f6c86b8ffbcdb4b755c16034d0f7649149d9b1c628162635
87ffcb9436613c34ebcfe05a9dd39dd6628e507707247693e92fb8cd80d1
05f2a6ba4c4aac90e2e530e44123effed81defd8f7d5af144a74daba798e
1c4fffc9283236bcf22894c9bac28eaa4a04675207b27262b4e9f8a8c839
818318f914c81ab65bb79ca9bb965d18e1b79829ad0ddc1e28c32d61c297
fe4fe69a3f72359bc9649e74e4feed648933d6765b85b2094e746448bf98
03937730f19675722218d8c3577c019068679276f0d2ecbe8ec14b35ba21
914337d34e8975628508addf3436df3d81d3955820204ea68edeeb3846a8
5684b118f72693622bb5fc54b9e0471dd005f12d7eee08b461e044597e2c
20f3bf392705ba5e05a5c323014be26ae4bdd8be100401105970e9fb47c3
180d05f6b8b418a9fddbe7200c5a655edd0fdeaa5d4dcbb5851a17a06887
da6eb3b64aa51f84270212a5c0f28b7f109f39ca896fc544e0c892c8ce99
d169ec8ca577442c71d2cd14ee461fe60a148dbbc473bb4cc72332eb3624
bf6c762b40565c57cd756c5bd80424ec956704bcf8faab7243afaf9a6b27
b4798af319ee77a392616a0d16a415433ea0bdf80e7ebe6e32ac4d74bddc
a2ad7208b14bc00d0c54ea677df69c4348b5747eb6f25df286d2c862ffab
362111abebeb5de53ca2c7c130f35406b5bee29e6c478408aa41c2223418
d088f424d21d6d3d04c1a16946a507fab7c317c6e7687ed15236015e7dba
2dc5782d6aff865f0584ed917420e44cb554a2c843af343fb3a6efe78b88
18e22fb2593fb6d2e6e5aad11c98d57e0244fa773e9c2dd65b04c466aabc
5341c4e1c0bc59a2e863cbec3fb74ffc8e9f48d5c125005deabbeb66eb94
c27aae232e7ab35cafc61a3f9473dd3c2d2e072e6e28ee2c8a2017b4a820
5396051cc3c7802643d8378fa478922af4db98ec6da7b338b353a1a36662
422d4900d2ab50b908a098094a37e97db204157c36f37fd70edabf0f6a0b
d49a31f7df4229361cf10185fd8aa2609b238c2ff9e646a5354a18ea5c03
b6c76ace5f0a963ea404ee87cb8002196f22ac8294308edf3820c6a70ffe
a39ba3a0d360da41ac3a47ea0523ce3478d8d33dd904af1b5fb475591d8e
b959501664bd147100641cfc2e44ef6a29e5d73b073b168599d6b32b5b2b
0937b1493956c01c56bbd61f631174633c1f0d7543d4e07bb0bcaf157b4a
7d40faf307ebfa6319153949874924bbe6f2395bac1bd30fdd09b422007a
3db5c5ef5de767abf8b996863ec70173452ca05cdc82e641a6f0500bc9f2
4c344a5b395cca1da763c0d4909c53890beb80c80ade03428ebd3457fc12
c7595bdb03b590aa5b6198fb76a24eed2807781f473776a95d2938df1fbf
6d30bcf34e91dad2cadbcba752652716cda1c87bc8f0217af48bbacf6f12
4d1050985e07d9b78fb19d55104d2f7d2043a26ac49c37d76938d757caa1
ad288c304cb1b031c1eaebb3f4c52657c4da0dd6adbbf1b86c35e29dbd12
cddc7cd7781d18c9dba187ea8f01ccb867ede0f9ae0dd641819c8fdda8ad
4525444002cfc9b1dc819f7fd8e8e2c3437e84645b62b3c6818902bc8c7a
0b9481323d61048857593dd4cc6360767299ac01791f3e6d4f20e175d43a
fc50a8eeb396140aa75ef8d739fb9fd74b6cdc36d58c3d0fa1422561370e
20b9aaaa09decaa934e47e1a40cb6da0c22551b526ba90840362f5530fa3
8cd0916e816b9ab281a161154ff8517d655b90e72fa2f4739e8740b14ae8
c8f73667e053a09c252d2d45c84eb4e84c89bb1b868304f171fde707944e
2d8d83c137e37d55e807a2933a9cb179cad180b449ab1f4015b0ed9cfdcc
0ba2bee01d28f37bc0507f072a89e0e1e1904c0aece3d1fb5a9c2e9bf5de
b3c3867c514e732668cd4e2fa6e912d83c900f8c88d5db65bf41f698e25d
9ac68b5ae85777fe9a79ac13cbcac7245ee567c6007343694820b0fdcfea
f5ac89f2c423471d43a45cb186d734c860ed696cf58fe63e9debddae60de
d976958f424d1fbfb5d54bcc94df6ec84f935e5d871bb64b7d3bb232e569
fe0437675d0bd14573db47e596239247bb744bd0127e74e8187c180dd742
cb669114bf61bf7d22e5ada66428e0fa4fc2a925fac547ee0187c0f5c8c7
a13475bb4b10432db6a6b4b1584579db2404c985f740881d9ab857bfd2a3
3f578ec7531e4de77ec41a838f49e30f8170e1db922bc2e949daeac5aea2
31e01baec7cd838c3eabf0fc97d345e9b09743b94c3acdee9c9f1cf5d748
e498c19e82c3322469a6be482d2401ca94d612296aaf5924e8810be05316
017e6d65418c485f053d402f68dd7fca1d988567d45a48fc35c40b7e037d
7e3f6528396a8f275eb054b361b3b0452cf6e459edf498186e7eb733c19d
aad4e8a571bec063dee27f68faefc9d75d8bcd0ad46f13cbeb750f4a8be6
f411eeb3dc69ba31136146c1556cae10b85512a8fe2f3baf2d3caaed5799
41999879a9cfb71a81925d5ecb16dd1a75ea512bb8352c2a5c40de6aa34b
ea4da6b12bec960460cbb6a325f93defed552ef3e8a4eb2b24ce2ae246d8
f12ec7fb4d9371eaa7fc017228708917fd08a6c71d528c1f34e77d2f5104
aeca91584455589ed5eea473fc76c264325661e1ae650eb6b82be1dc2c1e
50f973ff81d97af98b6f49a07c988ae6f5590a1ad98cc1497b9bcd772fb3
2e7ebebfe734941450e8964398c6f6b3cb54c91fb20b173f7cef2e8d90dc
94f9c7738960ae2f2035a9751df90002d5be094e36f17bc06247a8409b96
8f233d81bd52b2b56cec6623c85d2718569db567807525c3a57008420876
5e0e57f2db200f43465a03815127e3cb34fc81a851451e0b4cdb91300a13
d1b7209f99a51f76d5770fdb5e3fc471c10fa0c4cd27607bd787d31cd514
952bdc13f2f3a63d0c65bff5e958a0efabfa414e3908270e76fcaae060e8
da997a8efeb92c56fe0fa79b72cfff21b8485ab6ce283c6a259a0de8e309
45cc75d82af12a8c6ef2c6f1e62ec51d39763efdbbf36a8490f7e708a6b4
fb3e7cf21ab1a7ed048866fa54281796f21c50b40f4e30a1793604aefd0f
c64ec96b1324ad992da38382cd5994bd7b374bb431791ae87bfd9b313d5e
636d26e6d54b69626939921b691b5a6f83a6440725ffb6fa65120d060c5a
e52d874c0841b0f4b0e5708437f27fa872a6cad42a563f6ec695497c3d25
3144f25b3849b04bdb34e97294e3a85ef081d3310032706dd1eb53e705dc
d7366e1f39d9a848c67d37ec908c3b5b068fdd9162861ac78af61b4af387
a7998161eda5dbfee1739f489d7334913f4374c528a0f709b3a34a4722b3
8307b2ea0e4fd141187df77a921d8dfaf257a27230ce43ae8fe1b790f204
104114b3c8ae50c4287dd7cea453a1c90b841df2185acc28b1250f765649
2c1e5630b4dd5364db0417f624137a1f8d086963e41bed65fc12fe9eeebd
cd764ee77b86964a8cc1a49f8039d3c26ca98b1e0e5589f3b5fdcda1a97c
4c342282da53e5d6d1f09b904f62920fb22179260f52eb3c785ae7094820
f048c95c2c0dc66c12d2e0d1fcdfefa9419a56923a9cd8287b2ea474272f
23fef5f858d73b50549b47068b7b1e74a6cf0e670128dcc5749eac88b505
85b60b0b2481127236a8197197395821edaf77f5cf4c50367ec3fdcbbe14
1f2e0a56dc27021d48dd1f6230091988d638bac61d4197b853ed4303f46b
95192d19b848d7051f0299dc872ca1e87adc57be938e26a0a9f48e5cd68e
6bf20113dad138a3509660f46445ec279a2c65ee9cc1b17efd7319f89367
5f93d013a751620869c9e0377e967ebc471515268a6d3a749c22136945de
f54c92d80c642429179ad5f355f2a194014c321e89fbe06b70210b8a4f28
0ce13217b92576785f87e5cdd57f4d5577f4ff3b13990e13bd57af73bf4c
58a22061cd9ce6c73ef52a88d6ef0ba6060be0681b28a608bab596d9542f
1d42f32ea595f6d9e05cde38df2ffa1a91c313263e400f92100fa1b9b263
f0ec376f3067427bd25fb8b275e70bd5a62ee78b6a76d63ed7e56da8f78d
fb0ab864dd1e66c542af8c3e7f65dad9894958c73f9c91db0510e729d106
0da7bf591fc1f3f8b447ebfb06bab059b5227db0bd58a57c4b153ace7509
96934bf33ff96c56b7b92e9f3224d9be403da7f1eeefff37b3135775b6c8
a6bb7e1ebfe2fcd88f431eced8b7f46d753e3968469407617022eca1aa31
cd5c560e70dc9f2c7fc8b4854b8a0d2ee272b96e71cf026b520f0530f306
b609712f9a6a147a67a54079cc1dcb867ed9f0f21d5204c5689f0e4cf223
7e070134b28a6aa9659693aa9b64556f2b5cf85816b35721439a1e76cd34
2e003375917c40da99376cb2a8387462cff56da549ffba592d9caa5f84cd
11c63c4968da116536588d676c574f8598e05c1076cd86827b0d38254908
b58e1988ac4278ee51a3ef4eecc7312e5feb132748ad819a67b40a118309
98795584b48e08a7a425e0d1b980c758ff087bf5fa1adb50c57cf601a0a6
152e1f9662dd738074de2f8cd71f13770e72dfe5141906b4c0bb3ac2f3fa
5d14e6f64a012e6382793cabbe5c54b3e9c311ecde50f11353fd2dedccc8
3cdb145f61be09b6aff43b9eafb085348ae1e1b9c261876f21ef6e6c11f3
a96899d7c0c19c72de9ade48b87f7706529897da73d9ac1fdedc16aa4a8d
337438cab43a191436f2c8fe7a33d9e0d43e4b7fb42e616e46f09863e6ea
b694c433a42a1c09d16946c1dd47904263274a208ad1dc16b27d637b66da
62764976f062b0d31838f63bfd2eb8e9da5e4600a5efe3030665d095ba25
3761650283aaad1e22ac8e76bc0761dc68a114dd1ce7140eb136bec340da
187c4df320bf450088beb5f2a53ba3d565e8fbfa4620840435905e8f4382
47b765929f85ded3b124b0c3f253bdf2c31b805ec61559289aa35f69874f
9d745f7c66543ac9c5fecf77c4fe9d299a65e00b2e108ccfa1314eaeff14
d9dc25e4fd47bfd8cbfd96152785186666ff46ab80b464dcf4713eb4bffa
0121855d6dfadd30065562375eb3384d8934b028fb3797db68bba9096af9
d012861de1af1fa0acd103fe5693796d297f37eb2b1a205f94490a5b25e1
3cef68cc612d89536827f0103f002addbcd27f29418da26b31a9227c5d5a
1993f22d281360fce3da40065d33184b98b4a2e12357b4c0a8840dbb45b0
090a18e085dd4690e589ffa1e5814fd553cb594432db468b2bbfb525a313
da07ac993a0f68bd4b35052c1926a3c2dcbde2ff780c02951f70cc464055
453882bed2cfe337383e47685bd1c60bc7859b4588e56836a17cfd90721a
4d802983cba0eb019ca8d0ddaf54a0d2bf897c65a26921672f70f9f8e9ac
a7f5678cac15dcf0837504439ef5d1b994d1bb997bb6dcbfc4c15a73c7d1
76fcf13e6de69a91daa808037bf762ac690073c70c3f96f46ef32d908f5a
e5076ea1d01c91e2a66d54aa1772f4262cac594670a5158e5088b0ad9862
8dc3019de379632e98670c8b5fdb97e05941ebc5a3d9606c52b588eb87be
b987b8a74fe4c2b0ee64ee64f40cf7e15bf85bdddf706559635f3e0cf420
b66f07602903bda46513012b50e482e2fad48e78b8e9e51dcd31c69d0120
fe89b57170d99903cf842d45fbcee0aeb83c60cb2c79da9c9101a9f8bc36
9b278e7764666f447ac9d0e39bf6bd75e4ba837c49703699f61a78fb3505
639d16a981c1bfdd16a802f04053b7bfecf437d464fe54b741af0b3fa785
0832a642415161315038c10c373704a4ab86f11fe2bfd35294b5699eeb0a
72a3fb495f0d0af12cfba571e59ef02993460a78839e09eaa542f42c802c
5aae06f32a5d0f329a979816f579042e853f2a595b428219987f9acdac05
47685e0b6f8a030820b98e3bd0eacd03ab527d33fbe92f0241a027398eb4
cc52ac21654f029762eecb5a38c4a11a5777308d407880c6c44667081bd3
cf9086a9a8e07ae7084a07de97b42302447c707df91f74c141264697224c
e37843388ade33987b0f569020b3d8a24c1bf3c6e0f51780cd32d13da50c
f3918e17485c6742abcd10b0250905ba3dfcfd42eea9d29e4bc5f8e7e32d
2bedfb37e156ea21eee39dc3386a2ea128791114558eebaaad7f4c697716
1938875fd1a441c642094fb1fad847fe6346d482287af1b629b8f97930f5
66851d37906a390e8a8ac2394636182c1f062efc7e4f104a3b59d65ec444
bdcdead042b047e7ee6510113afa42ec033aa7e359cc583f6ad91f75188e
ae58193ab6ce7fe037b6c21c99d7045e8df133311cca07045a32df89f2fb
02c23b4907db8a9f8bde66b558c7b9786c350241c598ef08420031ab244b
4f2bd0a8a03aa9ed5e9736555b9d31feab13cba285e608fc80b11c1ff208
f156661d559fc0cea927a498693e642aaabbbcd947160038cdc6043f1810
5db1fefc616df3a74c80a48adc1655066c841ed34361e9a5a6b5153673a0
cd74b26749309b5250fe9477de5832e3ca31ce388a9f29cd35311486daf2
2a1fdbf720b27fc0cd010e3e35e4553e4d7eb7a5c7cea45fbdb2b87eadc7
d6195d7e0f7d99829500abf9567f680064a8db8b788758ad20d97a877ff4
1ebf48ebc534c3e36d6c66eb6aef88eb04912dda2f76c56d801a0bcd6a2d
f80202cf51e85f877c194ee2862ccf7d1da30e84295081d2f2ac11ed4eec
67d386f2e17d6a1b917548b2fa0ac967488d446f5372480c9f2a95d39ff1
2a71151f82335d22afec0f81d6c3419364cf79accecbce70df8ab16c5401
372e9ea1af5bffeda2f9824c3f9fff28a3baab006d3815089715a10cc989
2bd31ec96822d683721349e590984700267500b86485803568572d801458
688c09f5b2dc0b1ba77d7eb08b583587e5ac6decc1945b8115f4c3aa8524
32289a6c5e58183f111f4e88819830798e130f6c8bd42f9682815a48c0f8
38ee57afc04698fb08c6ad71d20f9f70c1e2bc8cd197151d96deb5dbcd6a
e1defffcd14c9a1be5b2ab2b809c02f6734a171b68ac2765033c7d4df829
dc7f03d374c7f6063d61600dc15afeb3889fffa5d68f1ff8914b767422dd
81567cde8d9bdfc1c59ac6f097ddf1759fac1dfb994d47439ca79fa594e4
7d8951afb9085a9b5a62b2ab46ff926848cbbce68a6fec4d683c377e63d1
84009c283fd9f3cd40477d12d5c4545ff3e324a0e22bd4f44c14c6fa169d
f6689ded12a31227794a781132e2909f7815f86ff088d6bb3a2a9e85bba4
61aa2d09e25094c5909cb7bd951df76fb383aefd230d152d52619c4dce25
9857a8b180303aaf01a118b55405f92ed74d2fa4fcfb17cb83d849d3865b
22941b660dc0e0b3b42906ab658bb9ea071f6fc0787bdf9be2e925eb3485
dbaf61730575cee0d42fc10898e24987578fa2f14f994bb99b41e547588c
9147d52e1ca26d0a3eb81dd771277d7503e3cd5b4ebfa843708d12de87e9
62c9a2831fd536b8138024134bffc341f6a5c45e4d06ad4118c74af41713
cf14bd553dce000d776d9546996dfdf4de8dc040b0b222595262f6ef5a9c
a76164a04623bd68c7520ccc0ac771a69883c249b4a89f20f15bb939e55e
25e593f15bee98982fc395f634de73445363246bef37694bc5aba5d831c7
2bfa7c0a4653ac635983b91bb9b5180555e20062dac97fb0c0391d6fe24a
3a8c08fe601a770012422e58172d9b2f495f371eeae42d11154ca509b8a8
8b5f4edd62019bb643528f7f6e72dfaf9a5ed64e9463121cbc1ee079a1fa
43a22ae0878b85aa3471d96f918247284d05e0f5d38572cef8ee633edde5
d5c5dfe294742e5e801b76fbfaf9cbfc9029a1cc1ce001b50f39cbc127da
c94f69796ecb28402f4f2aab8cb69759144aaf35e6f625e38e6459b9e7e1
54f16c40c204380c547374c183615f57e11bb09e791b97d7103c3a1afd72
08d82116e56e81d313fcdc2f13e893339c1a1e050268d0eba9868380b211
bec788f9244689e070d03a6fe41c71f3f6a6d66478a9cbcf1383e3f98260
54afee5ac3851247a99df86eb52d253c4299c529c3788d3637b1bbfc5819
644325cdc065c694cdb2df56d4db71eb6723bf213c9ba7acbf5c7adb6f0d
6184ac0052aec48395b53a574dcde913dd729b762e52480a8e3455cdadd3
15e1ab02e19e8b0cacefec479d25d74d537ceab324086940b3864db2ff8f
799cc4e88d6b8eddaf0bb25ea36c3e1a60bc751d4e6a0d6e1e6bf327756c
5713e130b7f5c0e3539cef657bcad516d82588141e27977189a7d4523064
b8d0f8245d76026966c34880f44d297a00ce77b2c64ba71afb6ed73b0fa0
a568e9da1716adcfbc16445110f34275f448ae135e354b54a8945e23b493
580ef4de15da3fd1d79db863d7a31d0f1517e7cf4ac3a3d7d4e779135a51
a2dfde76d13275d7dd4a1183b9b444b36e232ee32e0e40b36f7d6ed79902
f249fda7743226696af4862af618e79607e0501c6fdff2f3b73c4b618522
be7e52297104e88683adac3b68215911bfe5605516bc7a346805e4da600c
91efe50731f62e71af172b3489492900dd8e5c794cd0ca3e7ed20bb60244
e17f1ac9c1c1113e3ca287d448cc862f0d842bfb90834b3a7f13a9676abc
836ca06ee04e96141ee8b6ec5fd9dbd954964507a534aa8a6f1be94d8eb7
85e36c9b573fb6b2f868011b63d55d7fc9971cd70fbee96e54f34db0de1e
97d94bf35677c9cc80279b293003418bb0cff6fe10459965bfa1e031f886
45a9cf8f1e542205e81f9ab9b855be4541cb7ed1d3d1877c2d39685a7407
d3b9b3c8a40bbc2dbefdd6917395de2412bad168fb7a3d80abad491939f6
46103255f232c33d32da8fd946ae4fb6e3470ef519d1268c185eca9946e9
140ee85dc541379709529a812d4fd752869df1158b6cfee04ca65d7b392c
e61f0b7eaa4914335a05b1e804aeca3d42b34c6ea76f1e7af98c65364b04
43313fdb91a660c440ad6ce5bb1509409df29f387aebbd584b5969a1dc3c
a057ba5bb25b78338e1eb38aea162583e0d2c16ea61b67fec925802f6d87
cfc5d318c772bffd866ffcd4f60be35045a406501add300e93b66fd91de8
dee3c38ee8f38f84f65ac991684badb18dc03a4bca59fb00110faaa15b6f
79119229e1674b0a5bbfbe9567508e37e6a818b39a3c1f4edee29dd662c4
f83a04d61f29aef2c7d38148c0be98a9593f8b210615ce8fb809050c3ee8
fc330585753a199a2c7b1982de7ad0e01c84e29703fdfaacc130753dd433
231cd1f001106e5a5619853254ce8ccd46655b9bb487ca36c81e62fba2a8
eb81c3eb5f25250c5f8fbb2193e6d7e56ef8b14c14b6fce5f6cad197df5c
b8bb4de50e83bff1251364a1a2bbfd9112f99aa0af88185f62efb5209b71
cf4ea72df7418860153de299dff30809490951e7c43864f9e5a9fb11f57d
43d6d4b2dac6eb8ff32533868010307822130ffdbaa0bd4be5592a5a79b8
d70d7fcf85a8c2995240dc795ae970554698461aacd64dd571e5da551a8d
9561d8059440da67ff268dd7f1800d6da05ce4edec77b34051850c0d7a6e
2d1c7ddb60801c22640cffc535118babf2db9ecd1d6a0feb3fd1fdce3d7d
38517212f672eb174bd4f02f2ccde16badb9eb7abf8cd2e975bacd36f8b9
3be07f492621e501f2c3f3a37d09a97a381cfe86d3e50e2fa69afff3b349
a2ba279aaf0a41ae5256614dd650597550ec534a87f4849321642ffb6092
ce825b7682ea42221e42e3973c3e5c6d78c5c07d3cca829d1cbc0376ee4b
f24283adfe2b24078156d04f6a9caf180b06168b8af04c1e5ed9b6412084
56b0214e5aa0b4fc8035225e2b8b3de40312b57fcd67d0df00ce5acdb6ae
d59eb63d544939b4981cc14ff80228655e116ff8624a5cc663aa9cde44fa
e0cc55cf9e7874bb7e171fad0e40026aabd3091024f62624cccfe76cca96
6a2f7485fa7e310fc9d417794d3a5636d16ab9b40287d87becc00170bd3f
9d49271bfd67677d607851b8f4ccff49db90827aecfae3fece46a064ef6b
682335c3868d7582230713b27cb321486eb457112ac0c5601bc4f8d64271
bec0f8a0524c8f3f9d024d24381c5c3415cbe08035aef43bf9e70b18a2ed
457fe9ba198aa9e445aa5d9829ecf441790557e823bf62cd3f022b4b2a38
081f6e102069e878115cadf1a877953c4883869b3eaa132784d6ae670459
2e80e8722ad6da975c9b5b26ff94e14cae7c3f4c59fbc0916feb5d50829e
6fca8b7a38eee57453e6b137f348b0205b8e9b71098f5cc24ff9f0ad302e
cb0609594b0101b1f68aed8eb8227953b61be12f0740b087695b3e8b5e92
aa40fe3fc1240bdbf73a1e766ff523b235adb5fb834ef20837fd215309a2
630dc0182f520ab6a866babddb247c65d141956da21d31d141ac74e91a58
87fb3d9afb737fa982e87eefc775103f658f90ad05566d80cc59b9899428
46473a18f1066c220b612355e9cbfc559121522700d660a6e7e900dfce79
df17810e96c3a368e62ec26e5664f6b06400642d692df08b2769ba78e53f
85784f3f915f4ef566d0e2719c64fb77250697ac563544b971936b8673b7
ce36a26f279ab6de917c09f40898d73c88af55324d9700cc6c65437cdb31
d8757fa57fe82c21941d59bb2378158d6a50b2980591b6c42425dbf1c517
6c1dab0923b8aedc9908dbb1f45f24817d159a978a7322d681e700ea2d27
1a01dd45ff6a8ada7c8800ffc9b22436ea30ffb0c389bad60fa3e9b8dd30
a9fa2b2a1bb20bea82dd3320d4ee585613fb2bd38e5dc27e6e27c6cd7738
7e19bdd7b280e9eb7fb534a607de22cba4f83a083e7b7fc2bbd704a14da4
cbefe8f461ba4d1f070e37d20a5d931c400b9487a1f7608ab86aec62af64
eb6f2a9148925011c5afc47b30dd5094da32b967bcbcec2b1301e0d46395
2c6de6d74016077a6fcff94ee1f52cb4e6a9fc7b6e24dfaa7da183a8c2c5
dc968b18e6e1e2fac314ff110be9a803a8a70c644b558898b5435524b27b
2ddddf19dbf96d4f20db3cd3076e0178b58b7476f2e93be212eb5843b781
bc5ab37d976c35a1c74d431c05e427eb4011d598093a74cfb3037f13f47b
2aaab9d195fd4e7b17808ef21d3555ac7f90289407bdf8f22d10acd6162f
4fb12d3c9a6ecec179092ece915fcb46fc0c301cdd5ddcd45d531249f126
3be2f9df5fc2a5a171c897a88e960d1e495f61543a5ee6231e46feecb7af
98dbf0cb7b126e49f013c20f7c50a6719879de5e8a3ea6429e02ffa0a08e
d54b1ebe47753f7f06883db8f050d0b8b8861431c50d4bd760d9746411c6
8249d77f2ebe5f512a20fe2a7b789d360307516ee4bb8f075b601526bf70
592607f99e44871a7dc543a85834eb8133db6c80b678f868e74322b5f384
9fa101cb3761f12e8d35d215c39c15775ae283aa2439790627eda5e05531
62d02ac93866928f33d9f6153265d8d2e146b17c55d279d28d77dd5d419b
fb3c2c86d63a198217fda2ed87fb26d3a5935f12f83a1782dfad5a608e34
2fdb41701f9fcec852d8893693ea6091a7c40f2f4595e790fc93efd25e43
ec1aa8648abdead2d71768ffce1108d668666b95717656e297d8f7a0f988
695418295674f390fdd33527b5dc596761a6197b0db9a61b4bed96edd8b1
0f1defc09cbb7f9daa41f5a09ab946a4513d6d428d6e71787aa810adf6d9
213dc51a418d5f007d8fb45b67575404f4ff016287f85b5584f79835ae15
28a50aa15b49c52dc042665510b31bab2a3d323e10148bfa8497999a5161
7623251c1fd0b7cb6e88400313e00a0612050760db3a21986f7a84bbee4d
f95e0392bd269d8fdcde9c7488b1d7af7251607a22a19798b463629cfda5
db02509fa0cd07587e06573afa45d0a8de462fe6cb707565e9bb950c5bb3
f3632efad02e4a27d6a0ce0d1a099b8527aee7490cfd7c5b771b17c431d8
a8c22cc8e193e19979c78c591bc24b3a10c7200c95f09a4ea8c9c01b84be
54743ef59555d93bd028db79512ac79a5f07c6f24bf5386ba5b49219e96a
0e46f6c4add8b55bcea985a163a769f8b33f270b455aa1190f94f725b68c
398823d6ae43616a5b0991f7ec0a8b5808b06f08faf5e620081956cf087e
d1748be445bdb4f5310efb1adc0ed0cbb227ddc30295e10f646f7bd86166
3f060f17e690ab3ad8f0ca251a99adf758e6a551878b0a8142303ad8663f
390a0b49e040c2471eb689a4814177a18d9ed93c8b13225560d714d74f00
819e973a2b4b88c301fbc855c6f29844dab528c561f1b93cfe742a265c2e
f2ee168be8a8d08f21270a31c88fcdf8754b5ca9f549fba9c39621de815c
f0319fc834a3916ec69574bdcb016620b50ab90c10aa0ff4d6c417495550
88f1507518f51cc03125c8ec7b160415d30eb3de1dbaae6b8560e8e6f402
32c4b0303bb05abdb7c9ea74ae5917d5e009bd2850cdc5a657dcde3a0cfb
4a750506a18f68562d02d864dff1bc5e061daca061deb57d65704fc58046
cbf056d30e87f903eeebcef8916ac9b3a5ee75e738262cc4073d67a4d088
6bd310eaa23ef5ebb1b8dda6863e68a507ac23f05d1e40e4bd49712602a1
c18ac0863db1ac8528ecc54c3aa44dd630a6ac3b661c2c330df1633d6ba4
057896dcdfbdc53fa30f9b53aee8d01a003f538f24a415810f3933a8de85
7c3dc086553e86fad139fc71afa34c6db7354704568788366e0a9224dc62
07508bdfef9681acd40a0e9f53a1450969bd0864e2a1ddbccbcc7b331946
e4f21082ed034c1c0710bcb8ccf27256a4dba41863394a8861381775eb58
0797bb744c10df704eb15169de22ca10e29c049c715e26aeb8f12ab185bc
32d8f835906d4f5c01d0100012e8188b6b0b4cd6457c0726e33859e10563
4a567362144aca4a033702da2a4c32494e9b1ccac857a8961ef57427ffe1
6dd539b2e105c3d3fca7d05522d92fca5bd001a92f4d82e674bcb7965e7c
c44f1fd8d7b96c168225f633ba96a7d22b2352794c3210bec84ffdc2071e
b49dede1aa93b906906de26b50e05c28a895f2ee1502fad4f8689eee4c52
ae2f2cef1c6d59d028cc2cd7a80025fd7d26e2b06cef0e6801b185bdb609
aea8c72d333363c2c1d74cbad760ec115720e1bb6d7a7fcb5a786cf347fd
2a72aaea9c6b3f45f5061ed5ae77565fc56413a37a92fe2ddff15de6d748
f175ab76e117bcfe4e486586d2d7e982430420dcca39b02083e1104dcc07
52c18f18955f7201be243f5eb5d5578a054b5173d48716767e17e2727061
d915bc2a759aacfba3056a0b1df600faf07735778e66b91fee6174227f9b
f74f708605f0d92e523e1c39f59eeade1d1fb373c9b135885af9d3b69b22
e254891d6d4a4363d19d583e2f029a147cbab3e7bd18b71f813beaa17705
94636f3b325657eab9cdde1459aea89725d40b74ebe11f1e845b315ee83f
9f9b66865d16e4f1efa98c844c6cebd6d957395772372d0bdda543993c8d
ff34b73181685bd42c8e9c5a84d018362ddd55ab6014538d61b97d85bc72
93a0464bb3ea7d9021370c4443a75380fdfdc5ac871bdc913df63518090b
c552a1a700387b6968f58ad35815595b15d66c33389271ec723b06055252
49e0b41b5d30bc98b393680805e4507768874a8850344cb795b0d7585261
7fb9acac54503acf715d3cf6bcd780d43e0856b67220020b925f191a009d
9b9ead7999ce39c7c8993315e0c43518ef95827eef4485204a78bcf322c4
097a74535ae873ca263c7376f295a9db8933d08e0490d2ca2bba3bdd8b0a
c3c25021f60a3c2f1ff4f4b977b5c10356ffc36806b3ea8623899c23eeab
8e3c9df494cf6e72247c5e48134ab3f1e506a390bb2eebdb82cdf61821a9
c9f6f113562c82711628302093a4af5f7e68c0b09812b4b1335a03b58c9f
78eb61bec9ef0b69f50634eb89ef3546baacf5c86cd716f90feed2defec0
6ba75325d0673a2abdf2f8317f4d72afe43d67be955a627b0fd0ee793ca2
2d2e7bb50be16b4dc963d9b75cb49a64176d2bdd9732934709801c9275f2
99f0a2b2a035d2f326dc532719ca39c4c2aff444eb73c56dc8759d70425b
05dca5a3953b789b05c9372d496ab22eaad7fbc9053e37fe2b81440cf199
0fba431d2233518a3bd03ae1e09bffd6cc71b66b12072d126d44e77c453b
f30ddb9209e9942765b5489550ef6c1ff10d1aec3c89effc3ff6c8dc9880
02a5173898d2a2dc0f27ca737d36695df536913b3859b9740852211f7d51
62c4202265d6b638f30fa71c4727f0802ab4d98ced62498df5abe1fc80f4
f4a867dc57e35d2f7ccac793aff14c596df2d5eb5d0899323a73cead13de
a9fcfefe03427b35b13b494cb677c20c5b2d4fb778c9372e1b9df23a454c
5397b189cbc22367b9f5e1654632b917006cdd8785eb7282282468f174cf
464cac82260b4f8b962477669235151d4ccd640229d71b8cc72dff63e002
0d7c801098ba91a6bff341a5950bd5fcaf6e761715347eb06cf303dbee15
153ba22727c10784f4d5cfd2b1827eca2dcda9c11c55facb4420e5c76ac0
6ac4726a59cc2ed1824d191602059b6a95e4256dfbe4c004f2071f4943dc
c5e2a714e627023d9562b3047ef15d9e15e7842f8f9856c7cdd19e354a3b
25a0d1a8071757485114da5af1b896a66a7b910e3138cce8c4600620fb57
7afb0219faf5d87a35fbd5be4e956c2ba661e3a4440ef25898d360c873f0
5d7279eaa525595d4a1a1c2a77a42ea155f13ef2d13146b9db56b9c6de97
415881a9d5f0e861b709df9d60436764d47b366c08b4192ca72fc3cb6208
ba0340a8ce3a1ca0136ae440916a157412a9f4ca7836a90449f779f3aa3d
9f653d1bf62a85c0a470d9e55ad6b17101afe8a797af1f6cb4225d516217
e438edbf5ce78da6dff6d3a9e84c22be8c33dbe24da987fe7769d5de0d71
0be9d1227c49d3dab01b5e5885c836a24631e041828784b44c0d50f1dd4e
fbe9d45d3f88fe70e2ebd7e7c14d06ef7816cef9b41a07eb0bb15e78eb29
117aeb7f3fb2e694b9aa8601fde9d9b6a37d5951f99bfe092930229e5186
ff16be9f1b80a3ef10c1ed5b0e18d5cdae9d716a36e791275a7cace7150c
0f004c72a7b0987fc0b6b14a460e4e4e3e4741f43d32f39cacb6757bbd16
9fff837ab3043798c44b5b6f2cc1a9fd552ab6e505df21835948e1881187
1941696adbd6746d8205c54ff7ae19541f38efb323e88da01b5c2bd9f2a9
e83e27b028ebc7d6782c27c67559d3fe28d9369b8f3f47cbd921b3966b8e
99a1618608c2a75d4c3b5b50b8f09db8a01b4ecd0985a3bd8ac4ccfe71d5
5acdc29141722f9dced9f4e8d2e98d63404ee3a0bf6e31e65d5ad0ef18d8
f9e95df216cbf2d6fa15a995ecde6377445b20feaa3ffc1f9ea826992bc7
162ce02b46e7ad39df931ba24ecc9cbf0d66f6b7dc65a8529191271184c3
74f314ccb1f579fd8fec0a455487e90d08e08e0b08b0f5ac630fdbf3adcc
e09832a3100beb9f0229a93ee770503a99eda6c3fe5b9a2616e531b8c6cc
ecb97eeef822f38f74d00465200fd846cb15b8da4069e7cb2c692df0b345
b968347222f5cd167374240b8cd6f21e329b2801a9ff3ffa0d4ffb93336e
39bfb7dcb2c69cbf8a159192b17ae3b4463441b6dd4b205a9b8abd602456
4d4023459f8cdeab60cb5cfd718137b6364a76fcd5d04a7a2f035b3376b9
ca66af831957f147c1bd29498dca9b78769072d3d1d6f911ad2a5bf6aa2e
7ecc1c9228f9b21f1c51123911a14ce2bd095c7505b6eaad57d79f0099cd
e60a3c040725b220d6efe9a718a2f1e71ad9d5d910079e12c4bd084fe54d
0b687bca694e0bf1da9653c719fd2a68407c21cf851eb223f0d9b4385880
877a69a617ffee5dc8367a86c21d2dea922847c7de983cd56cf049597501
02e72b1ca137c33fa478b1ae94270b57b6f9a5c2d02277df184e1dc8edf0
b8687fb1a40f50d200ad2892215f783e397f3d5a2d097158da76175508db
f5055f4543ca078d853a150ecad635f4c2d1c644c9594c7ebb07b0de2394
a0dc31d9a5003af35b533350f6737e6c480283cee70ac0e471fa277a9370
43b132c84bcf073717180ecf065633376680963958beb684948ae599eaaa
3ada1b3ed3425c239ddfdb64a62060d428ef9bf537b75c9dce40f2651b65
d4de16e8f8aa810d03d2282c4b0f8c4ea1dc166479fafb73e2eda83a6f94
6d92a139db4cc017e163d9d7dac267e57017e461d9b97ff2801b6ffb3b6a
38c46063f7ab36e86561244811f7fcaa78b66eabd74ddfddab087ddacd25
ed0193b8c20fa968b85916d2021c9836c1ecfec0f79fb47adb03191437c3
f5c3d5b3545484d9e9623435a0fbb5fb3ff14034f103d450a654524d29ef
95030f8949c311783e9c7439fda82256a1669f516cbea7210a5fdd4e96fa
0ba368154dfeb32e9de1f90c1f0b22e5b20dee4e7a94fd195a8e80f8dfe4
05c7d98d61041117928e2740af66a15a36a178189c9e03109365d018fe93
ca37d0e36878f61c0618e2207f1626fa648582e24cc020ec21427ca7273c
446b949d9a923a1703d1b118db0e6fdf6c971adf990df7ef477dd3f8ee21
dd7d96abd49f870f893f1857364b0dc23c6999a5c2dec25e3ac25295ea03
c19d789b817efb4ba4cf5b760d7ac03e560b25b1e18c84b145d86a736540
b638b3ca5c02a12afc25db43db873713d1ef8530dda85b49c0033516a6ea
c61d89ce29cc68534b23b861544df32a0543a78cf8c29ebc941586c1a4b9
780f6a402d2f4bf98a8a6b21bf6a3c12a53e03192729b25f8726aba787d4
2082755da8b1061d8bb7033fee561e914bd9f499287440f524cd87bb4dfe
26af39b43668a3c07afec847ba9a4e9730f29fcf9eea860a6d19d369e75d
0cebd3f9946675a5603ac63c078084491c43122fd0a767e700fd01feaeb4
0370f885216e06ef646bd51750fc2c28b1abb8b8f3a181b24dccc858ab82
dabb5984150fa7b49deb84ece0c0f081d2bded1c2247389e4960cefa6fe9
45c1daacbd2fd421f14cc561dda50a8be9b3c095680f727b253384149c25
c41a9e3ab13d851fee38b5fb6900c7430aecbb0f6a31b9759a7df74e79f0
143c34b723f35a3b421a03abf0f99c36868b6ce66581d9a818e8798e9494
04da6382000fe7957dde5b85ce9e78318cd6433cd71f8a33363a0714165f
444b72df3244d55e3c44c7fdad0fd577cb633f9d82559e6951c0258dca91
3299d0f900aaca161e01cbae31d56800eef9dff8639e0390c562743aef42
f942d958b299d7458dad71103aedb83c5d4d02ef5158d4e964ffaababb23
cd00a8300689c1463f7579e8dc4a9065ecd5b32eba00281dfe635acf0924
f585f47b100937c6de9fa0750830332ca06ea59ad264a03127df2ba2d69d
3065e59021be6f2058a6775dd0a853814ee53fe7e7ee389e9d7bc58764f7
fb7a2f1965ea5bd70b77c89986e33b49469ccb50479ed7d6060be00b8bf6
268ac8ac16bf1622655994af46bb2662ed38c1c0a72d986bb59296cf4067
0feba20bd5e4152e28bb8093cdbd773a972e95928142087be4771a4c3576
c54378420f2a8074f6ebeec5e495ef30624a248cf87012f0778229666c23
1dac1502259e3a3fc3d8e6d8fd1fc6a89d99f2d3156c750e8602273c38d4
6874b6f738bbf7c5f918fa4f40b6ae2888dc87c4207458d82337f5e13f6b
52c437e3fe0a0d5ccd85e12e8ab3aa9a76aa1bb2e8d81c0d75a12850d5b2
19c18981823350cbfed7068eb31bc08b6b04e0771dc528396707a99e4305
566016b731add4352588711476950ad7e1e2890fb025015dad967a8c766b
07c52fa4d8668bce9e7963b20896cb2d1a7b1a481a8f88c18e3bb38d48a6
53c8bd3a34cd3b6f711f3de99df734ac22f89c347ee7c01972d86a5505a2
d0cc3c997de74fc13b336b4610bf4b3a01d00a882bf43c0ef736c1f13ccb
0476cad7a1320fa1ba3c1b442f4302993967eb9fbfd05f7f9f868da5aeec
0388e8230f5f8bcad04ea6db3da98c399fc3632e83ad2b5b7548ef4dc4f8
1d526b47f05d3b46ab8ab201464c113ad24a9be51fb09b5be13ef1da9a24
bc6eeff13aa325124752b9d9bccccd0e32b598bf84fd73e9bbd7aae864be
7d3a30e91cd32e1ac236c3f9ee953f9d32494dde59327f9f889bd07a3e31
077f6a1779d1855fb0d5782c6494a0ed3047431f429fc9df8aa36599c281
8ceb19a65b3c44b3d24fbe6d889551f9669fd9ec779459632c686a69e7bc
77b5cd6153a40cda2c40bb56d1fc80f329e7e616abbd22cbac60d1849be2
0b56c1210b3a2ead589de6571a1e5c43afa6c50a81029c822b3ccea3560d
f8b665d898ef8fc426a61a959605ef7b1592a7d01231db4c409ceabd1727
e40298cd4f4706de65ff2449b29c61290c2f0bbc5049f0c74c5dcb58bc42
95e572a5ce9222b9e0750a92567cc3f99b5e47d26f2a0962091d64344dd6
0a9a9ec6931fb3c6b181f8b1b862ffc5931f5e38b5444566a27da8fcf4b1
1f6920b6ed837eb07221cb8005658fcce7057ed8ef7623fb63d2698d2fe6
ab6c964989e7d8a4966ac5a10a0d5fbb1a6087fd5bc65324406b97a03f4f
3b42781940e5f3a94500133807fb4ef5c1ba2a97e1b8f55da63eef2fcda6
cba261602a830590b5d6bc7ff735ddb5b3b9424e57f435455c378c424816
86c4a9a3740fb3772f08bc9fa099ffcc43450f8443f4eb0e07e7dd51a4eb
68838cc279205e5937d5bdfc8f4108bbb723d5eaebbf2389c609f9661aed
62c148db073c5d174d86e76df3a09eb61c8e7953f468d88730121faae57d
b03c5a59db4af20499d1cd4ea742454174e18086838c6f2b0bd00c1094a9
492cc63d81c9502580334e92a2d6221a6863ca6303ad30bf38a501255a64
f48c4f58f77a93073d45228585aa68c4907c051a7835cbb849c70912890f
436cfe0489bff3ab650ba7f8965e85ed108fb9cf602e04e710685ba9b37f
7f251c92fe854a41a6477923c60c3c2ace59f468a3bb0f4cb85dd713260b
803fa0f505b15f30fb211c992120d80decb7f73b16486511da5966a5475c
ba92c832173fa7dd0da549168c6663a0853bb230cc0e0afdf3b275942a9c
4bea3c1e8a2d4e356b4c540a5d5c3ba85956bb965e406584c1784e64f340
0a474eae738fd060d2d4b09af854819a18901dff2c533acde43c7c153c32
c393f05f1ae8280dbd9e96e4da40dce73e5ffff3d50bd83d255368c79fb7
b9c6b072d334c47a1e1bbeca1e6253f6ef4a45fe151166acad3ad13305d9
b885e429d8a30881b3200b3034ef6627d8e46e59282ad7d8a1b352cc274a
a677a12a733b0d1fd9758faff0cf3a7a72472e8ac4937e972d3dbc9e6d4d
2fcd6682a11cae9d3f1a87132067f614db0b6c619f263d3bbf7a6361eb87
7f8251415c7f371f5bfd6452c088cab985da3473c94cbe5bc36e936a6d67
ce780b2c3c2cc67e023d7f16697ce4dde88e25cd75d41963d1f716739c9a
56d848fca1e81fe94288bcb0f4f2513208bdb02b132b88382bb1ddeaf3ea
6bd75c7f371c0c10b02ab3057dff026bee6aa5422886680d670fa8eae386
87a75496ec7751c0c21a88897e1b2124b7f1e8ae447e1e8f03d6543ad1dd
37601dc8b6597ab7de1d1388125b8685c53ef329b23493ca43ff4b551ecb
18a927c272c596bcd05921e19b9b7c6877037e28f560f0662aa26f46feeb
6c5987490a6cd900953ab83e2effaf6a0e017d3182d45c41ae560cf142bf
8f8e0cedff96af4f40e47b5acd24ac045bb40e9251c3dc18366b9203056c
4bfae1bf9e3bd5daf0c2a15e5ea4d42c7521806daf0b583fd607605fc150
7b4a060ea7a18622cd1175bf84f8021a0c9f4cc36bc8ec4e27f13b8b8361
21a0142014bd14be1db2aa0771edb927be2249dc93fbc3ac2e25a539a9eb
9c4b6bf3659da5084fab3731a61ef05e00a380a9cf197960876740caf50f
ef41e6def68585200af1df351526828ec23e9d7a0acb5ac2b0a669bbf063
f3820e4b7dedb04321e145fbe1b463d7b13a975aef48fed4a9d77478a2ab
954e91e9eb894cca450c7ab587e37dca1d161f993675e98c99e69cabe8fd
d69e9303895202fef255513c19cf4cab5ea0ea477825853cf399ce7f2724
fab95b0df5eecac28a317b51d45fc164ee5830d18465ecb510259a46a11c
9540e0e2c2330ac98c900e6f0c57025c0e9f6ac1b8b395844fa13d00a928
4bc7b67f394e31ffacba9afd075432754b3e42804803773b8d6c5d145931
80999063b2765a14cf5930ca9d94d209f0f34a639140edd1977b36439829
007b13f1ede2fae1e04be9c2003e5335a36c475782a11997a3a3c78c6448
a6e7d4c10a82021894a5bab0255856fa9bbe0a220c4819f8409266c21de5
b9aab8ad974af367b1bfa8ca30e0e21c44cda513b0b6e95e7f35f261919e
3c942acf3b14845447456c94ab1eb4ddde9720cded92af006af400895845
9f5edc7db94b7fdde4a1901cdd9b667abc257fb62f89fb4b42b1c0dff325
0225188513135c7664e3d2fb68db931fae2cfeede4c79a671212c5795ec2
d8c547fe0e231d5e4e4d99b4cd19bc0f15d0a55d1a491de93d6342868e4b
5db53522246f3380ae8d9c8cdc165a4b300732c6ecc3cacfde4feb9d0c8c
37c940d4482dd5c5ee8b9779bf578cbd831c4a9dead0698e98831027d214
7746a608fa176387bd35c411d992bf117dedcc6299b83726a3e39533874f
85368ce3685854823186ff76180c436267832cfb8d2ba8bca401667179d7
54e4bae5e3db20a6f0107598f46b21b227de819e536b5507aacbf55d96b4
61e666f8ac28affce815dbdee883dafab662201e6ca16865ac4e294d0664
fabaf66098ae3f8c4df232770109d0dc455686e0a0d11798e39332d9962c
aa9a4a8eca4a46c9e8afd61dd8d2b80de19d8197a21b74648c80f27f7ba7
546b6a7010ab22528390dc40c670f8cf3144e608fe33ba47d86b3ebbd321
0c420518efe08ec4e8ce95d825df38e9c5b5abcdc084f1e67bbbdaf1e8d9
b59c4ddb5bb42505cbcdd8964b78abe3982489704f945bc4c53db192491d
fc34f25f55afcf9fa8d9430e0b61c6896d2bf5d71141f5e189eb705e3d9b
d1cefa4d6c324255cc2ad83b5719c9a8865dc442965cbda184a64ecdf415
7a9d819a581936ef7769de3b96ca2a0dcdfca64642702a83641f347b78e7
857e9c6ef8a28e9222d0578afb347f4e1b162b0077996cdaabe30528fbd3
d7eadef9f231df85826e6b646114bdfb8e84cfdd55422a8fd0f44c62a9b4
646ef32db8d6f7408bd01d1df36336f989e5f7e8cc089b5e0085c82749fd
073287092a31a9833a5a45a73bef42c3300dc4198b839615edbc3e983f76
9e751d7672c65c5d8e2eb06c22f7497feee2f548d12eeb27cf361b757504
f86bed3dae512fcf202d7eb2c797bd91c8e99ea623606506c4d3ea69d1af
6dd0ca6b82b526de9b0827bce6d232e5b39bea1aebb81912896bf134f781
8be8425cb6779280e3b2a02a7c70abc9efa03ddb700c54fa1b021c8a6e01
64e8c92a9de2fe50c48573d035368e3b6127d3aea90be5497336334a8b71
874bb4a57b55a9e9f46055eb84e116b94c3c902098e5f2a5d363b493313b
52a4065ef0e226820da4d56b5af11ff2a7bccdf406fa082d68f15308ce82
da3a2fd857e4f7d7fdf49c68dc76371c6ce1fc3c3549a9b3628e52d2430e
910186d91bba4c010c28f4a8066eab8faffc367a9f5e09382cf4c81abbb0
52dc6c33dac3521c2d9d064d5b85c0ffd30cd43ca2837b2a9cfaaf836230
9a2b9788992f0dc8d6d890a55959699f9f89ea51b7f921db21d36f4fa290
171c2b8c1dc4d388087cedbe4e07ffd4109ac7e362af08aff6b891c6800e
c85ba845f8b7a889ed29ee6daeb0b183e4927c87d6fa844dbbecf4e5f7fa
0f36ae380d1f68c2d58d87105b1b53da595e30f95be2d2a698f1d4d57128
33cb5e6f792de6c7c769e4ce4177b4d37d905cd009bf532adb756279f743
c9fe1f84d5416312ca4b1ffddbfa1d7dd270a8b8bfc014a9124d7d31f30c
da0296a6fbae3d43029a8d5076663d63b1c7241e99d5abfe6864570648cf
86906a84fcb43fceaf2f08d2d1f03dc3ef2f912cafe0e342129f06251eef
02367b730c133dc602e7aeceb7819ea8d07861b9cba69ea1350f0a0546f8
684a4de39c5a8d02bcfdee96db05eb79748fcfb59a540a425719ab64d58a
7e3afb7675218d521d971d2c0e2ded5a26e3d8578e57c231edce605bd0ba
4cb9a164e419f7e255636b143bf28dd8058d4ee9044cf457c937e1c2e7a9
8a9044c91042fbb64132afaeffda04ea6854fa71b2da46fa6838db204821
6b63e044294c9fdddf00e0ebc1cb02e6e1c69718cb2eda126813ff7cd31a
90ffba3fc70eb0e7c47414cfc451641f437dc2be091e7e2c968915a91fe5
6e557244dd72e472895bf37e0824fdc11554a344974d4051cd0e88557f6c
50026b28918ce08ed921738af4315d812361f7f6c30094460b6ccfda8b9a
ed4b09647bb56cb49d1f225841686c51bed6e3920dfd620ed7ee9184e677
abddde048b2f36940a60e30a89a91c8430c3139aac0b82245c8d8a57a4e7
e7827492d4f2f7ca26434fbe4f9e8ac33cc670febae8e3eb31d1aadcfbec
1ba45b0bd98e5cbfd0a2211e879198b40fe00164cfab84db3d474812d87b
44b18df9f5023fc730db48e5b5457ade284face9c864eb90733ba63ee36a
efabe6cfe3c7f301380ae2f96382198ed44f8874fa2cc8ac2c4787307302
52563e39c67233db36215ea5cf69d96b52140bcf7e84ca59d39d3cd3b6f6
01391455d036857adb06dd48b6a5f4b394538718f2f059106b462bdea9ba
3d100b4bad6248ea4c1a043f5485b70c3f98ca58233490e0dacf234db570
4baa2bed4ad8b69b25fdf5497d24731918f26d905d98a9af5f3eb17447e1
2aa93b716799fa2142728b58af06f2311027176bcec6daf6668361a45626
d06df02bafb6be4bbf853cc0644fc01ddd6af79b4b3e1f3a9694e7de04c7
b657098b8bc27cd71f6ad96066ab8be0f6528dddf63f8f92fbe856e58957
2788344519f78daf051809ff7c5c75eb91def23ec08c31ebaa17afa86a47
1d1b15a18190e924dac35d30ca347721c27f22d9659da2ebc53da5f8614e
989990fca5fd2df7c45f19b43c5f65a20aa2b746e016d1db464b739b13d1
5f2c113b457e3514b39c1bb1b9895c1d07e459902d79757f268cdbdaeca8
8400c6073897837145192e899062f8fd0157c06dc42435bba7062f0f6bfa
02048ed9f72c1e7aff6ba4292d89be7584f0a72c1f403c437db5afdf0760
dff9cc00cdb05417150627d772d524e76f2300c2a0c92046a0282961c577
8fdedfed9badadf2025623dde4158b886d90115d6c51b3b055a1c2d168d3
825c120bcb3f98ca6cce41f40ab0aa8ba4181ab0bc75107943ef6f0910e0
027ce497c846125df52e1f8d235be5257b615b2d86027ba40a6e39f02db4
a7fde21f88f3cc93cd0d06d3ce1ad98a7d96a6176b8b821daa942aa4b67c
3294ca27c2daddb8dfddf411074f31c75d2c36e40962bc548c6e90fd4e1a
1bbdebb7cb5100d20999d774d335ed87d23982dfdf36a20406a1486a1939
3e4ffbb991db768247eb2978f5c2eaaaaab44dd988114fb8ee8a1a0ba90b
de109ad29295ecb879d2282628af8726080dd59305e8dfd812e2d1693630
8a6258d47e488802e128dfb90e5bca87fd6f4640c79cfa0639429185a153
0cb8005118b07046e17316d446ecc8e870ef042c1f813585f21f26385678
f283acdee72bf1686c2a6e323d099155735bed30bfd53f050f55ec664d7f
96f977008b1ce076fcf7834eef60861373a646e5fc9d3599cbe4ea4a37b3
eb30f75a17ec44cae62a2a738fecdb83d17cfbc62feabc59d3d4c14c2caf
ff8782924542c53feadda5e743b4bbe576fdded2e0a1c9035e4994e0a34d
659a2a7b684c9ce4a9fa9a2288ee232f87c09309bba210b099a323fdba75
cab94eb0d7b310336956cbb7cc29a8516771e4835338c04a36113ca0d717
db05afe20e23d1410255b6d2f02aec3503aa0de45b36c46562ae7ea3ed12
ccff497fd551bea1b4a529e43472371c0124d1b411a7e3c47315e265161d
b43f6e8761cad479034992490df12421c5c7b6f497138c32bb3c32c19b2c
d2de8c4e9f0be9a80c6439bda80b56848784d460a54f3fbd97318917e717
4c35f36e3f4c073f94e68b91ac7f9eba2d7b96c23e0338694442b46edc63
6ec2f2ed303ff5e7e43780ed1f6735db2f2aea066ba9dc03978a2b09622f
4ac01348057aa3e2a2762e2003c3dcf181668eb4e00e17f34baa5c90a2ce
ab13d644142816533b325b57bd69bdd5c4381c2e18b950b3d06c24166bac
778f7a9572ccbf8185547435eac4168c99f381dc76b6987a449b2b168a7d
774da8506c269a869b5d0f124b2fcc7656415321c8a6467d6c8556725612
ca0aa973d3fbe424ee610ada3e5f085ad44a4cb94a8b41dfe5fc6c11cc74
5a4b0b00753daa48652b80cae876ee8333e631c61c1cd85609ff972ade3e
af2e2e0df8e75c393408ae406d0010d42c161cfb2c20042b5e988c88dc46
b6d3c83cae56cd94b31f19d1b57512a74c6fd190fc7a9643f42a3f75746a
30554029c093eb9675867e761cdbcaf1dfdf068079e1a426a757cb862437
71a585e1a981fdfbff0f54a025aad708fe71a9d8c5d97eb3cc47aa5b6889
173aacfe2cf4c19d46b8be587d347b60614727dfd1f1088181460e0173c4
98d2a830cd81cfe1f76e397be2605e4d98993989083f68948f2b691ce0f6
644ff78433662b2aa540f3e4069c4a8d83896c636efacdd51e86264d5c90
94d76deec4002e671948e4bed241e811d740e835cfef4433426e8182e5b2
817a86e9738e2a5e784c52d528e532dd3cb70fbbb333f005d1d39585201d
839b5c0ca793c693c4f00cdde1fc47055dbcde08de44e6be562b276b7979
af179bff8def553a63239cf5297f0846fffc9c714378f9d7f09e03aa5b35
725363f2c2b2efe269523eea9a9cc2b00dfafd76a7ac88faff0591b0bafd
9ea85dda6ccf1d8564a6ba7815bab31ee84a4fc901fbf1a58234f825eeb5
ed4f129f1c71afe2cb65f5d3a1dedecf67ca8dbdd63e0f4e54256483132c
3b006a7b40823fb388270862952423704bca1a2434b3cf54e72637c1a56c
e71ef47522a362def9862a4086a9d7542d00a613493af4a40eb1bf1aa409
a518c223300cd5c940d1e7f7ad05e480ea5944c39eee17bdc0568a3cf9cd
ee612291e30290086bb3c1e84ca5ec7032240626a77e74be0c74aec46af4
1517eb24b24fe3ca532a205f64c40155d47b8e33507ab0a93c4475025fa9
a0071d8bc5dfd7bb47a90159f6c10a028376f66f7520d39e369da106412c
65e2fee4a847113a6f2cb84dfe2f657b63ae3c7312c76ee4b32e427f881b
0c4d8cf7db8250e2b5a9185845b6db66f9817d8b7db8725d8703dd6c903c
06b327a2155ce173d1f1116a16a522c4d482175a9de73d2ae79cfc1d177e
6568063c6fe8088c8bbb3a07be78b737bb327661ab9377eb1e4251ee20a0
89b979eb50166120e881e136910b18f8bf1a11f760e1446ae6a7669cc0c1
e704e20bffec14bc4e5f9550095e8279e923cf16ab0953d486487a58d96a
1b0981301c345513b6a75fc513c7fc1134507bc66799a5ceca99f6eda219
353c55e384d74817dcf54ea8ee0b30c40111788a6537277ed69a218dd476
b215b71975fc197cc072f01aa1a07b61cef2a990f20b0830eb6f512d3903
304917278027c7ba3d04e4a29f9ef5a7134e09149a3149f064b09fe2559a
bf27ba78c64e8fa8268a9a00beeb7119d408bfbe353576bf9ad9bc302584
e54744eac8db8fcfbf677b42c54c39e075f5d250225c37923893a8dea4b8
ae931e44d7e4bd88006c5307020fd2608f6cf9a5da17cfbf9985d14ac44d
9e66aa4612f1575a8b07db22cffd9c62fb05ea67820ae90f517df567bf12
67c46ae6f993259407fcffb6a7ccf60f866fe73ddd6b04e8f7c73e5706b7
daedcf37cacf10ac137e6170b14c8a034fa53300545074e867ae54867738
82c85ac6dbf342d64bd6017ec094e8e21f96f380dde6dc8017aeb8e7a516
cda2a7ea5d0ad3b93f30aa97c4a33f35705404534451ba269088f3d9be64
6b4328b15aa9a25bd9591359b89f3a90e10853349fb13a281d44ddef7f35
43fd6f09516afe44a890d0009221ad27c4616be33e432992bfbb773b6e4b
94c41e0ef9a7d3e73207cf9e242fc665559c84b72b9bfed3a7b2e61ae16a
2ba3a1699c2f0616517a51e07d6db7da673753e1997a912cf50536b97579
491a308b3e8e1fdf1591fe9206eb47b7a6e6acae9466f2fca58557063efe
b087abe1b7d075614de7b2ee4fc11d44cae8df4d1b133a6a090595388737
b3b8563bd0f488a0aeacf592f3fba7f2b35f9feaf4e4b6c5d47752a5c359
81e66af67201b0c00d44adccfc21e778f3cc1ac5e28b670e9910a71896ad
6292c7a605ae052c27fd0a27f7bc0507d909e797f1bbdf1f941dcd786c84
22edef31a24fc90e414ed39b97f118d69c1d7e099b21d06703a69ec8a6a7
b72674a6f4537baed43ec741b413dbac617fadeaa7053b4aa682ecebec5a
2c5eee2888c08c4cb058f30e69c8ff4e6d233fabd0bf714692d846dba020
d1b8c96077aa0cc991baf98ee24d2935af61fd8dba0094bfd309be5f986a
9f43cb4544192678a423e1df6746b9121dcdf442c4ffa88fd8ddc35647bf
b58fe5adda29bd8df7b3c90af24ee856e7e29703e3b9da2ff5b4feec5c3d
08fbcb180206ee07c8426211f3456010d4958482b9ae72dc6016ac776d6c
cc2e5e317f0cde86dceb8dc9caf137b4624e7a576a5120b3aae5736c51e2
355353214dabfa87986e2ab4a5f1cdbf6d2fc2798e9e65c47c7932b73e38
981b5efc0d73cc1e900590ab277fe7c14b13b67b22dc8e81d0cd098ae567
fed2cfaa64e5e07493c9ff892801b708c3d8586ff3224437317cf4a497ad
cc186e6f54c95359ad13f7e162e8014c1f1bb22f69f0378f55590dc58937
5738e7e523bafcd781ef1ab60a9309fcdec0320fc8b04fec0960761fbf63
ebee8e8f5706355534b60b34af642bfd8a64c8be0b32a757d66c25992dcc
d857db4729fd65b33a120b2d89d61797ae09600dea588f32cfbacb9b598f
15592244d32ce8fe2933e9d7f4294e3a7847539604ead73bf28c8fda048f
172605b065b7ab6a7d1eea5e6ada954ed666c0851d40cf8dca1fddd51fdf
04f35a7cc63a8f9309af860cf0fdafec0e0fb4bd997b38e344e3b31bf3c1
1f944ed6cd28250f98decd06b5d71a965316f1bbb8135a5ec1754e86d67a
a73ebbab1353725728a88a29eed8a8644b77287ba22d41495a155a1fcee9
e8cc5b47e24177cff18dec0a150687a693ab70c86c21715da02a8522f554
2fcb5328f1a3a98c8ce90f29faa506fb20e0f7d30a97d2c30a8368e01b47
dfcff127a5251eeecdc24efcbe9f045bf09fc2bb73d3703ba39c748160eb
b00740d06e3f1cab6022b309c2ae56e5e5f0b136d765c0c1d9edc07e9b98
209d80d407a606e30c12db9cc2ed69d89f2e1cc37553f8bf1c03b6aabaea
96a878bfb9daff165ca35dbc1fd28fee0feb507ad29b1653dfd2c8bd2725
3679c85c6bfb0b933dbe11fc21e4f503c50b843eb0164ab1acbb2a7fd495
6a6530af6254da5dad9af843b575fc6910c466c10b2cfb8cc841cb6f740e
1822a76dc9c1888299955bbbbed58b55a784db2efac9ce11cb240201bb1e
9ba0aebcb152e362810fbeeda3a0abc5ce00c44d75600b0aeeffb875c65d
7e036b8342f153545ae544f9472d14b3a2cbce0390f199c9435ca8e0ef57
4662c77bcc6180678a0e89686179f09ac366380fa63afff481fb83cce78a
e5d9cacef557d877a9e7024d48f18ec2708cc961db9cae90fc0bc61519a9
f8f0b67caaf7a6d3a7ce49ca266b9e3ac0d3cc6cdc7571f89db512a45678
488300407258431a36cade9c02a71005c7b3adb3845e65229c01325b443f
ba8240616f339f70f18a5de1f91188b66921dfdf264ad460e3f24a76be89
a75f55c771016a28796a8d274a6a0d6e9993dee6f2a4089e1af2b9466dd3
80c75b6911819053b523a9c78668693c3707e99579de5088b8c32c5174ad
192c867db5d25ad5d81e3585e21bb04b81dfb5abb42598e3fd0ddee7c5c9
8704acab277083cbd89762685173bdfd4bd0e41dae121c4f3ff3c6490aac
61741dc73d2b70c29166cae562276c00bcaf0f2b72fd56aef808059210a3
f3a30e052f52573071761b223763e72b4027b0dea4fa549a4557bb36df15
3fb57fe0783914eafc8f079efb6d8ea33e792c4b9f6ff41a2b8e8334f05d
1c25b87fd37d57c94f674422c4fabf8a24bd8a75f111cd5de33d9f41e822
615d96f13f9543db2c0e1919a1b59e1e0ef2de6c471940bb7781f11759c6
71fbf5901a1a2e1fef92707181990c428f6ff8e0433355c93f05bb251f75
cf3e75e0e4275aaf95d7d7e00e14ff515d4e479a0d2300e3cc1b81bc9341
0a15a0fc71d6316701a2481d5bf39ce73a197ae6530afaa8633ca51ea264
f8e557e23a4bab7eba2a336252206df8456fa6008c26b34414d5753d6631
2d55e87c38a9b9ab23ef798a015024a33841f72a59cfd52920430b6ad54b
e6fdc55d6fa722af703cfa2d445b70dec4c00199ae9fad876049d8a87281
14757ab98dd21e68854a85a4239fa09651988d7afaecd6ff72cc37b3a40b
6e6918c9fa67d1968488dc4a215a6961155fb05e1186c48563057b98be36
30a82364c9d70be4658d048c85f6175cf2b77d0d162a61d2b0fdbccf2c48
e0715577fcdcda9c72ec31960ad7999656b1c9778a671dfebb341b7038cb
030251f5ef3bdf5372839ec50ce8b5c1527727e20660aa67472489291aa3
97627c9c71b8a67101b2fb28c5b1019605b1192febd585a4cea6c8bfdd25
2f26161f3ee1658e919f843b0bfe60a10129adeddccbfea2236e62dad635
16ed1f6e00ab2b0c31e0eca2e6ccd386a4fd69cb4c1d56fb89f108af80cc
3b7d7cb7716f62a91cef743ac9e0799b7be938949eee65399a4a7b361f72
0d6ecc9cf10580f657ba23897159805184f67cffe32d130fce4d6a39d836
b903220f409fffe2150f986e03c5973f97ef96101a231e9f98f8e645ddc0
d2288b279ffff8768967ef5ca7a7c030cb510484b96ca6f9c62e964599b3
e360ead87ef86199ded310bda1dd0fc40a5d0f7917b771f77806d86c7161
6315e0d38ab1fc2ce8f209ba3290675c1d310ba5ab134ce1747043752100
bb279bef8b98360cdec0a917f4d292ccb29d2a57f54c81575b3a9daf4807
e7f100ac54a140a0304b4b3d3a55f27671916e0552db463db13f04784046
77f8a892955cdf72b2f0c9b4268d76aed0cae0a2ae1c8462f4a56a7230c8
6bc74d4548a196d723e22bc40b6a68e11e0d3c88a17bf03ed9b60f7aecce
59623346f82d67f141b172b6de55a41ad17cb4096432c405a98ae971081c
c453d2a2cf5522f88ec21fd6a74188c648b743c59c68171fea991a2e9d81
7e93ba557da5b094f7b5f7c77f2e9c8ae39d5c4df2ca60f65bdf9fb69dab
5c141dd591be7e49aef353f0a1fbdccec470d83fd19dbcba9e88ae75a0e8
c28db373b1fa80d3b7cd1d5e5a4f57a3a22921cf3e7e888ba77f37e7001d
d79ce7377cc12f9e0838149a11ac4f56985732a1281093cf9e1d0bc16ec0
e3e1c369ba109bf4c30caa606247149f56956724159e82ec0208fbb66e98
399dd23baa74478de729baa3f69eb6b8767c45e260949b2b266281a1a8c3
c65f7c3a7d32efd65039476a19a5d68c41c8db669404b660f333cc8625be
8c8507de0d1b4b98bcca6e9f3d8e1c2f295b20e3f8c5ab9568d244e9c36e
e43bde67b9b435329747209591b7fa109aa1e174407b3fd8a959d0d3c6e1
21e41013ec7d67cec77176aace4b38328d490dc2ce03b72e498a2f0bcfa3
a86ffb235a5bdd307d339763023754adad8cf044ff636c296b60890d29be
ad26d16f252d01e219187ccaadc14badd1bb8afe07904ef6955fd9d4fafe
7270e8a9e3da5187109cce3d47ff923debda52bbfbdb6d74e1e2f273b8b5
a346331d09da8c819923e89558a40e7dbff8324b3b01847b48641cef6c88
6d6c6290520f8742edac2de8fcf7
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndResource
%%EndProlog
%%BeginSetup
% THE FONT
/Tiffany findfont 1000 scalefont unitalic setfont
/italfont {
    /Tiffany-Italic findfont 1000 scalefont unitalic setfont
} def
/doTranslation {
    50 200 translate
    0.6 0.6 scale
} def

/resetPage {
    doTranslation
    resetExtremes
    resetIntc
    resetText
} def


% Measure height of path
gsave
    nulldevice
    0 0 moveto (x) true charpath flattenpath
    pathbbox /XHeight exch def pop pop pop
grestore

/TextToConsole true def
%%EndSetup
%%Page: 1 1
resetPage
gsave 20 dict begin
/CurrentFile (,-comma_depth) def
/CurrentLetter (,) def
(,) letterPath
%
% comma_depth.ps
%
(Comma depth) measureDepth stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 2 2
resetPage
gsave 20 dict begin
/CurrentFile (.-dot_size) def
/CurrentLetter (.) def
(.) letterPath
%
% .-dot_size.ps
%
pathExtremes sortByX
dup lastElt /DotRight defPoint
firstElt /DotLeft defPoint

DotRight pointbox DotLeft pointbox

(Dot size: )
DotRight xcoor DotLeft xcoor sub
stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 3 3
resetPage
gsave 20 dict begin
/CurrentFile (7-fig_height) def
/CurrentLetter (7) def
(7) letterPath
%
% 7-height.ps
%
% Height of number 7.
%
(fig_height)
measureHeight
stringOfText

count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 4 4
resetPage
gsave 20 dict begin
/CurrentFile (=-math_axis) def
/CurrentLetter (=) def
(=) letterPath
%
% =-mathaxis.ps
%
% Math axis as center of = sign.
%

(math_axis)
measureHeight
measureDepth neg
add 2 div dup 0 exch pointbox
stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 5 5
resetPage
gsave 20 dict begin
/CurrentFile (=-rule_thickness) def
/CurrentLetter (=) def
(=) letterPath
%
% =-rule_thickness.ps
%
0.5 vertSplitLine pathLineIntc sortByY 0 2 getinterval loadArray
/EqualRuleTop defPoint /EqualRuleBot defPoint
EqualRuleTop uppointbox EqualRuleBot pointbox

(Rule thickness)
EqualRuleTop ycoor EqualRuleBot ycoor sub
stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 6 6
resetPage
gsave 20 dict begin
/CurrentFile (A-A_inner_dark-serif) def
/CurrentLetter (A) def
(A) letterPath
%
% A-A_inner_dark.ps
%
flattenpath

0.3 horizSplitLine pathLineIntc sortByX 0 2 getinterval loadArray
/AInTop defPoint /ATop defPoint
0.2 horizSplitLine pathLineIntc sortByX 0 2 getinterval loadArray
/AInBot defPoint /ABot defPoint

% Find the end of the serif
{ ATop startAtPoint { 135 75 withinRange } endWhenAngle } traceSubpath
subpathEndpoint
{ startAtPoint { 225 gt } endBeforeAngle } traceSubpath
subpathEndpoint /ASerifEdge defPoint

% Line parallel to edge of A
ABot ATop subPoint 4 scalePoint ATop addPoint ATop
drawLine

ASerifEdge horizLineThrough drawLine

intersect pop /ACorner defPoint
ACorner pointbox

0.5 ABot ASerifEdge ACorner findBracket /ABracket defPoint

ABracket horizLineThrough pathLineIntc sortByX 1 get /AInnerBracket defPoint
AInnerBracket pointbox

{ ABot startAtPoint AInBot endAtPoint } traceSubpath
{ {
    { 45 90 withinRange } startWhenAngle 
    { 135 90 withinRange } endBeforeAngle
  } traceSubpath
} useSubpath
drawSubpath
{ pathExtremes } useSubpath
sortByX lastElt /AOutSlab defPoint

AInBot AInTop subPoint 5 scalePoint AInBot addPoint AInTop drawLine
AOutSlab horizLineThrough drawLine
intersect pop /AInCorner defPoint
AInCorner pointbox
AInCorner 0.2 scalePoint AOutSlab 0.8 scalePoint addPoint
vertLineThrough pathLineIntc sortByY 1 get /AInSlabTop defPoint

AOutSlab xcoor AInSlabTop ycoor /AInSlabCorner defPoint
AInSlabCorner uppointbox

AInnerBracket AInSlabCorner drawLine avgPoint /AInTriangle defPoint
AInTriangle pointbox
AInTriangle AInCorner pathLineIntc dup length 1 eq {
    loadArray /ADarkness defPoint
} {     
    pop /ADarkness AInCorner defPoint
} ifelse

ADarkness AInCorner subPoint magnitude
AInTriangle AInCorner subPoint magnitude
div
(Darkness of inner bracket) exch stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 7 7
resetPage
gsave 20 dict begin
/CurrentFile (A-A_jut-serif) def
/CurrentLetter (A) def
(A) letterPath
%
% A-A_jut.ps
%
pathExtremes sortByX firstElt /ASerif defPoint
ASerif pointbox

0.7 horizSplitLine pathLineIntc sortByX firstElt /ATop defPoint
ATop pointbox
0.3 horizSplitLine pathLineIntc sortByX firstElt /ABot defPoint
ABot pointbox

% Line parallel to edge of A
ABot ATop subPoint 4 scalePoint ATop addPoint ATop
drawLine

ASerif horizLineThrough drawLine

intersect pop /ANoSerif defPoint
ANoSerif pointbox

ANoSerif ASerif subPoint magnitude
(Jut of A) exch stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 8 8
resetPage
gsave 20 dict begin
/CurrentFile (A-A_jut_in-serif) def
/CurrentLetter (A) def
(A) letterPath
%
% A-A_jut.ps
%
0.2 horizSplitLine pathLineIntc sortByX 0 2 getinterval loadArray
/AIn defPoint /AOut defPoint

{ AOut startAtPoint AIn endAtPoint } traceSubpath
{ {
    flattenpath
    { 45 90 withinRange } startWhenAngle 
    { 135 90 withinRange } endBeforeAngle
  } traceSubpath
} useSubpath
drawSubpath
{ pathExtremes } useSubpath
sortByY lastElt /ASerif defPoint
ASerif pointbox


0.3 horizSplitLine pathLineIntc sortByX 1 get /ATop defPoint
ATop pointbox
0.2 horizSplitLine pathLineIntc sortByX 1 get /ABot defPoint
ABot pointbox

% Line parallel to edge of A
ABot ATop subPoint 4 scalePoint ATop addPoint ATop
drawLine

ASerif horizLineThrough drawLine

intersect pop /ANoSerif defPoint
ANoSerif pointbox

ANoSerif ASerif subPoint magnitude
(Inner jut of A) exch stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 9 9
resetPage
gsave 20 dict begin
/CurrentFile (A-A_outer_bracket-serif) def
/CurrentLetter (A) def
(A) letterPath
%
% A-A_outer_bracket.ps
%
flattenpath

0.3 horizSplitLine pathLineIntc sortByX firstElt /ATop defPoint
ATop pointbox
0.2 horizSplitLine pathLineIntc sortByX firstElt /ABot defPoint
ABot pointbox

% Find the end of the serif
{ ATop startAtPoint { 135 75 withinRange } endWhenAngle } traceSubpath
subpathEndpoint
{ startAtPoint { 225 gt } endBeforeAngle } traceSubpath
subpathEndpoint /ASerifEdge defPoint
ASerifEdge pointbox

% Line parallel to edge of A
ABot ATop subPoint 4 scalePoint ATop addPoint ATop
drawLine

ASerifEdge horizLineThrough drawLine

intersect pop /ACorner defPoint
ACorner pointbox

0.5 ABot ASerifEdge ACorner findBracket /ABracket defPoint

(Outer bracket of A, adjusted for dark) ABracket ycoor 1.5 div stringOfText

count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 10 10
resetPage
gsave 20 dict begin
/CurrentFile (A-apex_corr) def
/CurrentLetter (A) def
(A) letterPath
%
% A-hair.ps
%

% Get the hair width (for use later). Note: this isn't the _real_ hair width; it
% is the hair width determined by a straight cross-section of the left stem.
0.7 horizSplitLine pathLineIntc sortByX dup firstElt /ALeftOuter defPoint
1 get /ALeftInner defPoint
ALeftOuter pointbox ALeftInner pointbox
ALeftOuter ALeftInner subPoint magnitude /AHair exch def

% Find points that define the outer triangle of the letter
0.7 horizSplitLine pathLineIntc sortByX lastElt /ARightOuter defPoint
0.8 horizSplitLine pathLineIntc sortByX dup
firstElt /ALeftLower defPoint lastElt /ARightLower defPoint

ARightOuter pointbox ALeftLower pointbox ARightLower pointbox

% Extend the outer triangle lines upward
ALeftLower ALeftOuter subPoint 5 scalePoint ALeftOuter addPoint
/ALeftUpper defPoint
ARightLower ARightOuter subPoint 5 scalePoint ARightOuter addPoint
/ARightUpper defPoint

% Find the top point of the A
pathExtremes sortByY lastElt /ATop defPoint

mark ATop horizLineThrough drawLine cleartomark

% Intersect each of the diagonal triangle lines with the top line
ALeftUpper ALeftLower drawLine ATop horizLineThrough intersect pop
/LeftIntersection defPoint
ARightUpper ARightLower drawLine ATop horizLineThrough intersect pop
/RightIntersection defPoint

% The apex correction is the distance between the intersection points minus the
% hair width
RightIntersection xcoor LeftIntersection xcoor sub AHair sub

(Apex correction) exch stringOfText

count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 11 11
resetPage
gsave 20 dict begin
/CurrentFile (A-apex_o) def
/CurrentLetter (A) def
(A) letterPath
%
% A-apex_o.ps
%
% Apex measured as 2/3 the height of the A overshoot. This is consistent with
% the A in Computer Modern so that it works with Delta, Lambda, and gradient.
%
measureHeight /AHeight exch def

gsave
(I) letterPath
measureHeight /IHeight exch def
grestore

(Apex overshoot \(A\)) AHeight IHeight sub 2 mul 3 div stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 12 12
resetPage
gsave 20 dict begin
/CurrentFile (A-cap_hair) def
/CurrentLetter (A) def
(A) letterPath
%
% A-hair.ps
%
0.7 horizSplitLine pathLineIntc sortByX firstElt /ALeftOuter defPoint
ALeftOuter ALeftOuter pathAngle pop perpThroughPoint
pathLineIntc sortByX 1 get /ALeftInner defPoint
ALeftOuter pointbox ALeftInner pointbox

ALeftOuter ALeftInner subPoint magnitude
(Uppercase hair) exch stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 13 13
resetPage
gsave 20 dict begin
/CurrentFile (A-u) def
/CurrentLetter (A) def
(A) letterPath
%
% n-u.ps
%
% Unit is 1/10 width of "n".
%
pathExtremes sortByX dup firstElt /oLeft defPoint lastElt /oRight defPoint
(Unit based on A) oRight xcoor oLeft xcoor sub 12 div stringOfText

count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 14 14
resetPage
gsave 20 dict begin
/CurrentFile (C-superness) def
/CurrentLetter (C) def
(C) letterPath
%
% C-superness.ps
%

pathExtremes /CExtremes exch def

CExtremes sortByX firstElt /CLeft defPoint

CExtremes sortByY firstElt /CBot defPoint

CBot CLeft true findSupernessPoints findSuperness

(Superness, C bottom left) exch stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 15 15
resetPage
gsave 20 dict begin
/CurrentFile (C-superpull) def
/CurrentLetter (C) def
(C) letterPath
%
% C-superpull.ps
%
pathExtremes /CExtremes exch def

CExtremes sortByX firstElt /CLeft defPoint

CExtremes sortByY firstElt /CBot defPoint

CBot CLeft true findSupernessPoints
2 copy /COuterSuperPoint defPoint
findSuperness /COuterSuperness exch def

{ flattenpath CBot startAtPoint { 180 gt } endWhenAngle } traceSubpath
subpathEndpoint /CSomewhereRight defPoint
CSomewhereRight pointbox
0.5 vertSplitLine pathLineIntc sortByY revArray 1 get /CInnerTop defPoint
{ CSomewhereRight startAtPoint CInnerTop endAtPoint } traceSubpath
drawSubpath
{ pathExtremes } useSubpath dup
sortByY firstElt /CInnerBot defPoint
sortByX firstElt /CInnerLeft defPoint
CInnerBot uppointbox CInnerLeft pointbox

CInnerBot CInnerLeft false findSupernessPoints
/CInnerSuperPoint defPoint /CInnerCorner defPoint /CInnerCenter defPoint
CInnerCorner COuterSuperness scalePoint
CInnerCenter 1 COuterSuperness sub scalePoint
addPoint
/CInnerSuperPointExpected defPoint

(Superpull)
CInnerSuperPointExpected CInnerSuperPoint subPoint magnitude
CInnerSuperPointExpected COuterSuperPoint subPoint magnitude
div
stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 16 16
resetPage
gsave 20 dict begin
/CurrentFile (E-arm_slab) def
/CurrentLetter (E) def
(E) letterPath
%
% E-arm_slab.ps
%
0.5 vertSplitLine pathLineIntc sortByY revArray 0 2 getinterval loadArray
/eArmBot defPoint /eArmTop defPoint
eArmBot pointbox eArmTop pointbox

(Arm thickness) eArmTop ycoor eArmBot ycoor sub stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 17 17
resetPage
gsave 20 dict begin
/CurrentFile (E-beak_darkness-serif) def
/CurrentLetter (E) def
(E) letterPath
%
% E-beakdark.ps
%
flattenpath

0.5 vertSplitLine pathLineIntc sortByY revArray /EVertSplit exch def

EVertSplit 0 2 getinterval loadArray
/ETopBot defPoint /ETopTop defPoint

{ ETopBot startAtPoint ETopTop endAtPoint } traceSubpath
{ pathExtremes } useSubpath sortByY firstElt /EBeakBot defPoint
EBeakBot pointbox

0.75 horizSplitLine pathLineIntc sortByX 0 2 getinterval
dup 1 get /EStemRight defPoint
{ } forallPoint addPoint 2 div exch 2 div exch /EStemMid defPoint
EStemMid pointbox
EStemMid vertLineThrough drawLine
ETopBot horizLineThrough drawLine
intersect pop % Must be true
/EStemTop defPoint
EStemTop pointbox

EStemTop 0.2 scalePoint EBeakBot 0.8 scalePoint addPoint
horizLineThrough pathLineIntc sortByX revArray 1 get /EBeakOne defPoint
EBeakOne ltpointbox

% Find the beak jut angle, which we will duplicate inside the beak
{ ETopBot startAtPoint ETopTop endAtPoint } traceSubpath
{ {
    { 75 90 withinRange } startWhenAngle
    { 165 90 withinRange } endBeforeAngle
  } traceSubpath
} useSubpath
drawSubpath
{ pathExtremes } useSubpath
sortByY dup firstElt /EBeakBot defPoint lastElt /EBeakTop defPoint
EBeakBot pointbox EBeakTop uppointbox
EBeakTop EBeakBot subPoint /EBeakDiff defPoint


EBeakDiff 2 scalePoint EBeakOne addPoint
EBeakDiff -1 scalePoint EBeakOne addPoint
4 copy
drawLine
EStemTop horizLineThrough intersect pop /EBeakCorner defPoint
EBeakBot horizLineThrough intersect pop /EBeakTip defPoint
EBeakCorner uppointbox EBeakTip pointbox

EBeakCorner EStemTop avgPoint /EArmMid defPoint EArmMid pointbox

EArmMid EBeakTip drawLine avgPoint /ETriangle defPoint ETriangle pointbox
ETriangle EBeakCorner drawLine pathLineIntc dup length 0 gt {
    sortByY lastElt /EBeakPoint defPoint EBeakPoint pointbox
    EBeakPoint EBeakCorner subPoint magnitude
    ETriangle EBeakCorner subPoint magnitude div
} { 0 } ifelse

(Beak darkness) exch stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 18 18
resetPage
gsave 20 dict begin
/CurrentFile (E-beak_jut-serif) def
/CurrentLetter (E) def
(E) letterPath
%
% E-beakjut.ps
%
flattenpath
0.5 vertSplitLine pathLineIntc sortByY /EVertSplit exch def

EVertSplit 4 2 getinterval loadArray
/ETopTop defPoint /ETopBot defPoint
{ ETopBot startAtPoint ETopTop endAtPoint } traceSubpath
{ {
    { 75 90 withinRange } startWhenAngle
    { 165 90 withinRange } endBeforeAngle
  } traceSubpath
} useSubpath
drawSubpath
{ pathExtremes } useSubpath
sortByY dup firstElt /EBeakBot defPoint lastElt /EBeakTop defPoint
EBeakBot pointbox EBeakTop uppointbox

(Beak jut)
EBeakBot xcoor EBeakTop xcoor sub
stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 19 19
resetPage
gsave 20 dict begin
/CurrentFile (E-beak_withbar-serif) def
/CurrentLetter (E) def
(E) letterPath
%
% E-beak_withbar.ps
%
flattenpath

0.5 vertSplitLine pathLineIntc sortByY /EVertSplit exch def

EVertSplit 4 2 getinterval loadArray
/ETopTop defPoint /ETopBot defPoint
{ ETopBot startAtPoint ETopTop endAtPoint } traceSubpath
{ pathExtremes } useSubpath
sortByY dup
firstElt /EBeakBot defPoint lastElt /EBeakTop defPoint
EBeakBot pointbox EBeakTop uppointbox

(Beak height)
EBeakTop ycoor EBeakBot ycoor sub
stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 20 20
resetPage
gsave 20 dict begin
/CurrentFile (E-cap_bar) def
/CurrentLetter (E) def
(E) letterPath
%
% E-bar.ps
%
flattenpath

0.5 vertSplitLine pathLineIntc sortByY /EVertSplit exch def
EVertSplit 2 2 getinterval loadArray
/EBarTop defPoint /EBarBot defPoint

0.2 horizSplitLine pathLineIntc sortByX 1 get
{ startAtPoint EBarBot endAtPoint } traceSubpath
drawSubpath
{ pathExtremes } useSubpath sortByY lastElt /EBarBot defPoint
{ EBarTop startAtPoint { 170 lt } endWhenAngle } traceSubpath
drawSubpath
{ pathExtremes } useSubpath sortByY firstElt /EBarTop defPoint
EBarTop uppointbox EBarBot pointbox

(Capital bar)
EBarTop ycoor EBarBot ycoor sub
stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 21 21
resetPage
gsave 20 dict begin
/CurrentFile (E-hair-serif) def
/CurrentLetter (E) def
(E) letterPath
%
% E-beakdark.ps
%
flattenpath

0.5 vertSplitLine pathLineIntc sortByY /EVertSplit exch def

EVertSplit 4 2 getinterval loadArray
/ETopTop defPoint /ETopBot defPoint
ETopTop uppointbox ETopBot pointbox

{ ETopBot startAtPoint ETopTop endAtPoint } traceSubpath
{ pathExtremes } useSubpath sortByY firstElt /EBeakBot defPoint
EBeakBot pointbox

ETopBot 0.2 scalePoint EBeakBot 0.8 scalePoint addPoint
horizLineThrough pathLineIntc sortByX revArray 0 2 getinterval loadArray
/EBeakInside defPoint /EBeakOutside defPoint
EBeakOutside rtpointbox EBeakInside ltpointbox

(Hair by beak thickness)
EBeakOutside xcoor EBeakInside xcoor sub
stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 22 22
resetPage
gsave 20 dict begin
/CurrentFile (F-F_jut-serif) def
/CurrentLetter (F) def
(F) letterPath
%
% F-F_jut-serif.ps
%
pathExtremes sortByX firstElt /FLeftSerif defPoint
FLeftSerif pointbox

0.5 horizSplitLine pathLineIntc sortByX firstElt /FLeftStem defPoint

(Leftward jut of F) FLeftStem xcoor FLeftSerif xcoor sub stringOfText

count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 23 23
resetPage
gsave 20 dict begin
/CurrentFile (H-H_jut-serif) def
/CurrentLetter (H) def
(H) letterPath
%
% H-H_jut-serif.ps
%
0.5 horizSplitLine pathLineIntc sortByX firstElt /HStemLeft defPoint

pathExtremes sortByX firstElt /HJutLeft defPoint

(H outer jut) HStemLeft xcoor HJutLeft xcoor sub stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 24 24
resetPage
gsave 20 dict begin
/CurrentFile (H-cap_bar) def
/CurrentLetter (H) def
(H) letterPath
%
% H-bar.ps
%
0.5 vertSplitLine pathLineIntc sortByY 0 2 getinterval loadArray
/HBarTop defPoint /HBarBot defPoint
HBarTop uppointbox HBarBot pointbox

(H bar) HBarTop ycoor HBarBot ycoor sub stringOfText

count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 25 25
resetPage
gsave 20 dict begin
/CurrentFile (H-cap_serif_space) def
/CurrentLetter (H) def
(H) letterPath
%
% H-cap_serif_space.ps
%
% Space between the edge of the stem of a capital letter and the vertical
% sidebearings.
%
0.5 horizSplitLine pathLineIntc sortByX firstElt /HLeft defPoint
HLeft pointbox
0 HLeft ycoor pointbox

(Sidebearing distance) HLeft xcoor stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 26 26
resetPage
gsave 20 dict begin
/CurrentFile (I-bracket-serif) def
/CurrentLetter (I) def
(I) letterPath
%
% l-bracket-alt.ps
%
0.5 vertSplitLine pathLineIntc sortByY firstElt /lBottomPoint defPoint
0.5 horizSplitLine pathLineIntc sortByX lastElt /lRightPoint defPoint
lBottomPoint pointbox
lRightPoint rtpointbox

{ lBottomPoint startAtPoint lRightPoint endAtPoint } traceSubpath
{ {
    flattenpath
    { 45 90 withinRange } startWhenAngle 
    { 135 90 withinRange } endBeforeAngle
  } traceSubpath
} useSubpath
drawSubpath
{ pathExtremes } useSubpath
sortByY lastElt /lTopSlab defPoint
lTopSlab uppointbox

lRightPoint vertLineThrough drawLine lTopSlab horizLineThrough drawLine
intersect pop /lSerifCorner defPoint

lTopSlab lSerifCorner subPoint exch lSerifCorner addPoint
/lBracketPoint defPoint

1 3 div lBracketPoint lTopSlab lSerifCorner findBracket
/lBracketPoint defPoint

(Lowercase bracket \(alt\)) lBracketPoint ycoor stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 27 27
resetPage
gsave 20 dict begin
/CurrentFile (I-cap_height) def
/CurrentLetter (I) def
(I) letterPath
%
% I-height.ps
%
% Height of capital "I".
%
(cap_height)
measureHeight
stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 28 28
resetPage
gsave 20 dict begin
/CurrentFile (I-cap_jut-serif) def
/CurrentLetter (I) def
(I) letterPath
%
% I-cap_jut.ps
%
0.5 horizSplitLine pathLineIntc sortByX
{ 2 copy pointbox } forallPoint
/IStemRight defPoint /IStemLeft defPoint

{ IStemLeft startAtPoint IStemRight endAtPoint } traceSubpath
drawSubpath
{ pathExtremes } useSubpath
sortByX lastElt loadArray
2 copy rtpointbox
xcoor IStemRight xcoor sub 1.05 div % Correction derived from CM value
(Uppercase jut) exch stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 29 29
resetPage
gsave 20 dict begin
/CurrentFile (I-cap_stem) def
/CurrentLetter (I) def
(I) letterPath
%
% I-stem.ps
%
% Stem width of "I".
%
0.5 horizSplitLine pathLineIntc sortByX 0 2 getinterval
{ 2 copy pointbox } forallPoint
subPoint magnitude
(cap_stem) exch stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 30 30
resetPage
gsave 20 dict begin
/CurrentFile (I-crisp-serif) def
/CurrentLetter (I) def
(I) letterPath
%
% I-crisp.ps
%
pathExtremes sortByY firstElt /lLowestPoint defPoint

0.5 vertSplitLine pathLineIntc sortByY firstElt /lBottomPoint defPoint
0.5 horizSplitLine pathLineIntc sortByX lastElt /lRightPoint defPoint

{
    lBottomPoint startAtPoint
    lRightPoint endAtPoint
} traceSubpath
drawSubpath
{ pathExtremes } useSubpath
sortByX lastElt /lRightSlab defPoint
lRightSlab rtpointbox

lRightSlab vertLineThrough drawLine
lLowestPoint horizLineThrough drawLine
intersect pop /lCrispOuter defPoint
lCrispOuter 45 perpThroughPoint pathLineIntc sortByY firstElt
/lCrispPoint defPoint

% The distance between lCrispOuter and lCrispPoint = crisp * (sqrt(2) - 1).
lCrispOuter lCrispPoint subPoint magnitude
2 sqrt 1 sub div 2 mul 0 max
(Crisp) exch stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 31 31
resetPage
gsave 20 dict begin
/CurrentFile (I-dish-serif) def
/CurrentLetter (I) def
(I) letterPath
%
% l-dish.ps
%
0.5 vertSplitLine pathLineIntc sortByY firstElt /lBottomPoint defPoint
%0.5 horizSplitLine pathLineIntc sortByX lastElt /lRightPoint defPoint
lBottomPoint pointbox
%lRightPoint rtpointbox

%{ lBottomPoint startAtPoint lRightPoint endAtPoint } traceSubpath
%{ {
%    flattenpath
%    { 45 90 withinRange } startWhenAngle 
%    { 135 90 withinRange } endBeforeAngle
%  } traceSubpath
%} useSubpath
%drawSubpath
%{ pathExtremes } useSubpath
%sortByY dup firstElt /lBotSlab defPoint
%lastElt /lTopSlab defPoint
%lBotSlab pointbox
%lTopSlab uppointbox

pathExtremes sortByY firstElt /lLowestPoint defPoint
lLowestPoint pointbox

(Dish)
lBottomPoint ycoor
lLowestPoint ycoor sub
0 max
stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 32 32
resetPage
gsave 20 dict begin
/CurrentFile (I-slab-serif) def
/CurrentLetter (I) def
(I) letterPath
%
% l-slab.ps
%
% Thickness of serif of "l"
%
0.5 vertSplitLine pathLineIntc sortByY firstElt /lBottomPoint defPoint
0.5 horizSplitLine pathLineIntc sortByX lastElt /lRightPoint defPoint
lBottomPoint pointbox
lRightPoint rtpointbox

% Find the place where the top of the serif begins.
{ lBottomPoint startAtPoint lRightPoint endAtPoint } traceSubpath
{ {
    flattenpath
    { 45 90 withinRange } startWhenAngle 
    { 135 90 withinRange } endBeforeAngle
  } traceSubpath
} useSubpath
drawSubpath
{ pathExtremes } useSubpath
sortByY lastElt /lTopSlab defPoint
lTopSlab uppointbox

% Take a weighted average of lRightPoint and lTopSlab, ratio 4:1.
lTopSlab 0.8 scalePoint lRightPoint 0.2 scalePoint addPoint
vertLineThrough pathLineIntc sortByY 0 2 getinterval loadArray
/lSlabTop defPoint /lSlabBot defPoint

lSlabTop uppointbox lSlabBot pointbox

(Serif thickness)
lSlabTop ycoor
lSlabBot ycoor sub
stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 33 33
resetPage
gsave 20 dict begin
/CurrentFile (O-O_superness) def
/CurrentLetter (O) def
(O) letterPath
%
% O-superness.ps
%

pathExtremes /OExtremes exch def

OExtremes sortByX firstElt /OLeft defPoint
OExtremes sortByX lastElt /ORight defPoint
OExtremes sortByY firstElt /OBot defPoint
OExtremes sortByY lastElt /OTop defPoint

OBot OLeft true findSupernessPoints findSuperness
(Superness, O bottom left) exch stringOfText

OTop OLeft true findSupernessPoints findSuperness
(Superness, O top left) exch stringOfText

OBot ORight true findSupernessPoints findSuperness
(Superness, O bottom right) exch stringOfText

OTop ORight true findSupernessPoints findSuperness
(Superness, O bottom right) exch stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 34 34
resetPage
gsave 20 dict begin
/CurrentFile (O-cap_curve-alt) def
/CurrentLetter (O) def
(O) letterPath
%
% O-curve-alt.ps
%
pathLL /oBot exch def /oLeft exch def
pathUR /oTop exch def /oRight exch def

/oCurve 0 def

oBot oTop oBot sub 30 div oTop {
    dup oBot sub oTop exch sub oRight exch 3 -1 roll oLeft exch
    pathLineIntc sortByX revArray dup length 4 ge {
	dup firstElt /oOuter defPoint 1 get /oInner defPoint
	oOuter ltpointbox oInner rtpointbox
	oOuter oInner subPoint magnitude oCurve gt {
	    /oCurve oOuter oInner subPoint magnitude def
	} if
    } {
	pop
    } ifelse
} for

(Lowercase curve \(alt\)) oCurve stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 35 35
resetPage
gsave 20 dict begin
/CurrentFile (O-cap_curve) def
/CurrentLetter (O) def
(O) letterPath
%
% O-curve.ps
%

pathLL /oBot exch def /oLeft exch def
pathUR /oTop exch def /oRight exch def

/oCurve 0 def

oBot oTop oBot sub 30 div oTop {
    dup oBot sub oTop exch sub oRight exch 3 -1 roll oLeft exch
    pathLineIntc sortByX dup length 4 ge {
	dup firstElt /oOuter defPoint 1 get /oInner defPoint
	oOuter ltpointbox oInner rtpointbox
	oOuter oInner subPoint magnitude oCurve gt {
	    /oCurve oOuter oInner subPoint magnitude def
	} if
    } {
	pop
    } ifelse
} for

(Lowercase curve) oCurve stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 36 36
resetPage
gsave 20 dict begin
/CurrentFile (O-o) def
/CurrentLetter (O) def
(O) letterPath
%
% O-overshoot.ps
%
% Overshoot of capital O. We use the top overshoot because that reflects the
% usage of capital overshoot in the uppercase Greek letters Omega and Upsilon.
%

measureHeight /OHeight exch def

gsave
(I) letterPath
measureHeight /IHeight exch def
grestore

0 drawHorizLine

(Top capital overshoot) OHeight IHeight sub stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 37 37
resetPage
gsave 20 dict begin
/CurrentFile (P-cap_curve) def
/CurrentLetter (P) def
(P) letterPath
%
% P-curve.ps
%
pathExtremes sortByX lastElt /PRight defPoint
PRight pointbox
PRight horizLineThrough pathLineIntc sortByX revArray 1 get /PRightIn defPoint
PRightIn pointbox

(Curve) PRight xcoor PRightIn xcoor sub stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 38 38
resetPage
gsave 20 dict begin
/CurrentFile (S-cap_ess) def
/CurrentLetter (S) def
(S) letterPath
%
% S-cap_ess.ps
%
0.5 vertSplitLine
pathLineIntc sortByY
2 2 getinterval loadArray
/STopPoint defPoint /SBotPoint defPoint
STopPoint pathAngle pop 90 add
dup cos exch sin 500 scalePoint STopPoint addPoint
STopPoint pathLineIntc sortByY
% Check if the last element is actually sTopPoint
dup lastElt loadArray STopPoint 5 eqPoint {
    % If so, get the second to last one.
    revArray 1 get
} {
    lastElt
} ifelse
/STopPerpPoint defPoint

(Uppercase ess) STopPoint STopPerpPoint subPoint magnitude stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 39 39
resetPage
gsave 20 dict begin
/CurrentFile (T-cap_bar) def
/CurrentLetter (T) def
(T) letterPath
%
% T-bar.ps
%
0.2 horizSplitLine pathLineIntc sortByX 0 2 getinterval loadArray
/TStemRight defPoint /TStemLeft defPoint
TStemRight pointbox TStemLeft pointbox

{
    TStemRight startAtPoint
    { dup 0 eq exch 270 gt or } endWhenAngle
} traceSubpath
drawSubpath
{ pathExtremes } useSubpath sortByY lastElt /TRightBarBot defPoint
TRightBarBot pointbox

TRightBarBot vertLineThrough pathLineIntc sortByY lastElt /TRightBarTop defPoint
TRightBarTop uppointbox

(T bar) TRightBarTop ycoor TRightBarBot ycoor sub stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 40 40
resetPage
gsave 20 dict begin
/CurrentFile (V-cap_hair) def
/CurrentLetter (V) def
(V) letterPath
%
% V-hair.ps
%
0.5 horizSplitLine pathLineIntc
sortByX 3 get loadArray
2 copy pathAngle {
    perpThroughPoint
	resetIntc
    pathLineIntc sortByX revArray
    0 2 getinterval { 2 copy pointbox } forallPoint
    subPoint magnitude
    (Uppercase hair) exch stringOfText
} {
    pop pop
} ifelse
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 41 41
resetPage
gsave 20 dict begin
/CurrentFile (V-cap_stem) def
/CurrentLetter (V) def
(V) letterPath
%
% V-stem.ps
%
0.5 horizSplitLine pathLineIntc
sortByX 0 get loadArray
2 copy pathAngle {
    perpThroughPoint
	resetIntc
    pathLineIntc sortByX
    0 2 getinterval { 2 copy pointbox } forallPoint
    subPoint magnitude
    (Uppercase stem (thinned)) exch stringOfText
} {
    pop pop
} ifelse
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 42 42
resetPage
gsave 20 dict begin
/CurrentFile (V-tiny) def
/CurrentLetter (V) def
(V) letterPath
%
% v-tiny.ps
%
0.06 horizSplitLine pathLineIntc sortByX dup
firstElt /vLStrokeOne defPoint lastElt /vRStrokeOne defPoint
0.03 horizSplitLine pathLineIntc sortByX dup
firstElt /vLStrokeTwo defPoint lastElt /vRStrokeTwo defPoint

/leftDiagLine {
    vLStrokeTwo vLStrokeOne subPoint 1000 scalePoint vLStrokeTwo addPoint
    vLStrokeOne 
} def
/rightDiagLine {
    vRStrokeTwo vRStrokeOne subPoint 1000 scalePoint vRStrokeTwo addPoint
    vRStrokeOne
} def
/bottomLine {
    pathLL horizLineThrough
} def

mark
leftDiagLine drawLine
rightDiagLine drawLine
bottomLine drawLine
cleartomark

leftDiagLine bottomLine
intersect pop % Assert true
/vStrokeCorner defPoint
vStrokeCorner pointbox

% What is the angle of each of the lines? Then we can draw the angle bisector.
/vLAngle leftDiagLine lineAngle def
/vRAngle bottomLine lineAngle def

% This calculates the angle of the angle bisector line
vLAngle vRAngle sub 2 div vRAngle add

% Make a line of this angle through the V's corner
dup cos exch sin /vBisectorOffset defPoint
vBisectorOffset 1000 scalePoint vStrokeCorner addPoint
vBisectorOffset -100 scalePoint vStrokeCorner addPoint

pathLineIntc dup length 0 gt {
    sortByY firstElt /vCorner defPoint
    vCorner uppointbox
    vStrokeCorner vCorner vLAngle vRAngle sub penDiameter
} {
    pop 0
} ifelse

(Curvature of v apex) exch stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 43 43
resetPage
gsave 20 dict begin
/CurrentFile (Y-cap_hair) def
/CurrentLetter (Y) def
(Y) letterPath
%
% Y-hair.ps
%
0.7 horizSplitLine pathLineIntc sortByX lastElt /YLeftOuter defPoint
YLeftOuter YLeftOuter pathAngle pop perpThroughPoint
pathLineIntc sortByX revArray 1 get /YLeftInner defPoint
YLeftOuter pointbox YLeftInner pointbox

YLeftOuter YLeftInner subPoint magnitude
(Uppercase hair) exch stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 44 44
resetPage
gsave 20 dict begin
/CurrentFile ([-body_height) def
/CurrentLetter ([) def
([) letterPath
%
% (-body_height.ps
%
% ) to match it...
measureHeight /parenHeight exch def
(d) letterPath measureHeight /ascHeight exch def

parenHeight ascHeight le {
    ascHeight 1 add
} {
    parenHeight
} ifelse

(Body height) exch stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 45 45
resetPage
gsave 20 dict begin
/CurrentFile (b-u) def
/CurrentLetter (b) def
(b) letterPath
%
% n-u.ps
%
% Unit is 1/10 width of "n".
%
pathExtremes sortByX lastElt /bRight defPoint
0.5 horizSplitLine pathLineIntc sortByX firstElt /bLeft defPoint
(Unit based on b) bRight xcoor bLeft xcoor sub 7.5 div stringOfText

count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 46 46
resetPage
gsave 20 dict begin
/CurrentFile (d-stem) def
/CurrentLetter (d) def
(d) letterPath
%
% d-stem.ps
%
0 XHeight 2 div horizLineThrough pathLineIntc sortByX revArray 0 2 getinterval
loadArray /dStemLeft defPoint /dStemRight defPoint 
dStemRight pointbox dStemLeft pointbox

(Lowercase stem) dStemRight xcoor dStemLeft xcoor sub stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 47 47
resetPage
gsave 20 dict begin
/CurrentFile (i-slant-ital) def
/CurrentLetter (i) def
italfont
(i) letterPath
%
% i-slant-ital.ps
%
currentfont /FontInfo get /ItalicAngle get
neg dup sin exch cos div

(Italic angle) exch stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 48 48
resetPage
gsave 20 dict begin
/CurrentFile (k-bar_height) def
/CurrentLetter (k) def
(k) letterPath
%
% k-barheight.ps
%
% bar_height
%
% This is tricky, since the bar of the "e" is an especially bad indicator! We
% will use the join of the "k" instead.
%
flattenpath

% This line should be well below the junction point.
0.1 horizSplitLine pathLineIntc sortByX
1 get /kInnerLowerBar defPoint
{ kInnerLowerBar startAtPoint { 270 gt } endWhenAngle } traceSubpath
drawSubpath
{ pathExtremes } useSubpath sortByY lastElt /kJoinBot defPoint
kJoinBot pointbox

0 XHeight 0.9 mul horizLineThrough pathLineIntc sortByX
2 get /kInnerUpperStroke defPoint
{
    kInnerUpperStroke startAtPoint
    { 45 90 withinRange } endWhenAngle
} traceSubpath
drawSubpath
{ pathExtremes } useSubpath sortByY firstElt /kJoinTop defPoint
kJoinTop uppointbox

(bar_height)
kJoinTop ycoor kJoinBot ycoor add 2 div
stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 49 49
resetPage
gsave 20 dict begin
/CurrentFile (l-asc_height) def
/CurrentLetter (l) def
(l) letterPath
%
% l-asc.ps
%
% Ascender height of "l".
%
(asc_height)
measureHeight
stringOfText

count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 50 50
resetPage
gsave 20 dict begin
/CurrentFile (l-bracket-serif) def
/CurrentLetter (l) def
(l) letterPath
%
% l-bracket-alt.ps
%
0.5 vertSplitLine pathLineIntc sortByY firstElt /lBottomPoint defPoint
0.5 horizSplitLine pathLineIntc sortByX lastElt /lRightPoint defPoint
lBottomPoint pointbox
lRightPoint rtpointbox

{ lBottomPoint startAtPoint lRightPoint endAtPoint } traceSubpath
{ pathExtremes } useSubpath sortByX lastElt /lRightJut defPoint
lRightJut rtpointbox

lRightPoint 0.2 scalePoint lRightJut 0.8 scalePoint addPoint
vertLineThrough pathLineIntc sortByY 1 get /lSlabTop defPoint
lSlabTop uppointbox

lRightJut xcoor lSlabTop ycoor /lSlabCorner defPoint

lRightPoint xcoor lSlabCorner ycoor /lCorner defPoint

lSlabCorner uppointbox
lCorner pointbox

1 3 div lRightPoint lSlabCorner lCorner findBracket
/lBracketPoint defPoint

(Lowercase bracket \(alt\)) lBracketPoint ycoor stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 51 51
resetPage
gsave 20 dict begin
/CurrentFile (l-crisp-serif) def
/CurrentLetter (l) def
(l) letterPath
%
% l-crisp.ps
%
pathExtremes sortByY firstElt /lLowestPoint defPoint

0.5 vertSplitLine pathLineIntc sortByY firstElt /lBottomPoint defPoint
0.5 horizSplitLine pathLineIntc sortByX lastElt /lRightPoint defPoint

{
    lBottomPoint startAtPoint
    lRightPoint endAtPoint
} traceSubpath
drawSubpath
{ pathExtremes } useSubpath
sortByX lastElt /lRightSlab defPoint
lRightSlab rtpointbox

lRightSlab vertLineThrough drawLine
lLowestPoint horizLineThrough drawLine
intersect pop /lCrispOuter defPoint
lCrispOuter 45 perpThroughPoint pathLineIntc sortByY firstElt
/lCrispPoint defPoint

% The distance between lCrispOuter and lCrispPoint = crisp * (sqrt(2) - 1).
lCrispOuter lCrispPoint subPoint magnitude
2 sqrt 1 sub div 2 mul 0 max
(Crisp) exch stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 52 52
resetPage
gsave 20 dict begin
/CurrentFile (l-dish-serif) def
/CurrentLetter (l) def
(l) letterPath
%
% l-dish.ps
%
0.5 vertSplitLine pathLineIntc sortByY firstElt /lBottomPoint defPoint
%0.5 horizSplitLine pathLineIntc sortByX lastElt /lRightPoint defPoint
lBottomPoint pointbox
%lRightPoint rtpointbox

%{ lBottomPoint startAtPoint lRightPoint endAtPoint } traceSubpath
%{ {
%    flattenpath
%    { 45 90 withinRange } startWhenAngle 
%    { 135 90 withinRange } endBeforeAngle
%  } traceSubpath
%} useSubpath
%drawSubpath
%{ pathExtremes } useSubpath
%sortByY dup firstElt /lBotSlab defPoint
%lastElt /lTopSlab defPoint
%lBotSlab pointbox
%lTopSlab uppointbox

pathExtremes sortByY firstElt /lLowestPoint defPoint
lLowestPoint pointbox

(Dish)
lBottomPoint ycoor
lLowestPoint ycoor sub
0 max
stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 53 53
resetPage
gsave 20 dict begin
/CurrentFile (l-serif_drop-ital) def
/CurrentLetter (l) def
italfont
(l) letterPath
%
% l-serifdrop.ps
%
% Drop of the upper serif.
%
flattenpath

0.5 horizSplitLine pathLineIntc sortByX
{ 2 copy pointbox } forallPoint
/lStemRight defPoint /lStemLeft defPoint

{ lStemRight startAtPoint lStemLeft endAtPoint } traceSubpath
{ {
    { 135 90 withinRange } startWhenAngle
    { 225 90 withinRange } endBeforeAngle
} traceSubpath } useSubpath
drawSubpath
{ pathExtremes } useSubpath
sortByY dup firstElt /lTopSerifBot defPoint
lastElt /lTopSerifTop defPoint
lTopSerifBot pointbox
lTopSerifTop uppointbox

(Serif drop)
lTopSerifTop ycoor lTopSerifBot ycoor sub 0 max
stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 54 54
resetPage
gsave 20 dict begin
/CurrentFile (l-slab-serif) def
/CurrentLetter (l) def
(l) letterPath
%
% l-slab.ps
%
% Thickness of serif of "l"
%
0.5 vertSplitLine pathLineIntc sortByY firstElt /lBottomPoint defPoint
0.5 horizSplitLine pathLineIntc sortByX lastElt /lRightPoint defPoint
lBottomPoint pointbox
lRightPoint rtpointbox

% Find the place where the top of the serif begins.
{ lBottomPoint startAtPoint lRightPoint endAtPoint } traceSubpath
{ {
    flattenpath
    { 45 90 withinRange } startWhenAngle 
    { 135 90 withinRange } endBeforeAngle
  } traceSubpath
} useSubpath
drawSubpath
{ pathExtremes } useSubpath
sortByY lastElt /lTopSlab defPoint
lTopSlab uppointbox

% Take a weighted average of lRightPoint and lTopSlab, ratio 4:1.
lTopSlab 0.8 scalePoint lRightPoint 0.2 scalePoint addPoint
vertLineThrough pathLineIntc sortByY 0 2 getinterval loadArray
/lSlabTop defPoint /lSlabBot defPoint

lSlabTop uppointbox lSlabBot pointbox

(Serif thickness)
lSlabTop ycoor
lSlabBot ycoor sub
stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 55 55
resetPage
gsave 20 dict begin
/CurrentFile (l-stem) def
/CurrentLetter (l) def
(l) letterPath
%
% l-stem.ps
%
0.5 horizSplitLine pathLineIntc sortByX
{ 2 copy pointbox } forallPoint
/lStemRight defPoint /lStemLeft defPoint
lStemRight lStemLeft subPoint magnitude
(Lowercase stem) exch stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 56 56
resetPage
gsave 20 dict begin
/CurrentFile (m-monowidth) def
/CurrentLetter (m) def
(m) letterPath
%
% m-monospace.ps
%
(m) stringwidth pop /mwidth exch def
(l) letterPath
(l) stringwidth pop /lwidth exch def

mwidth lwidth sub abs 1 lt { lwidth } { 0 } ifelse
(Monospace) exch stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 57 57
resetPage
gsave 20 dict begin
/CurrentFile (n-jut-serif) def
/CurrentLetter (n) def
(n) letterPath
%
% l-serifjut.ps
%
0.5 horizSplitLine pathLineIntc sortByX firstElt
/lStemLeft defPoint

pathExtremes sortByX firstElt /lJutLeft defPoint

lStemLeft xcoor lJutLeft xcoor sub
(Lowercase jut) exch stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 58 58
resetPage
gsave 20 dict begin
/CurrentFile (n-thin_join) def
/CurrentLetter (n) def
(n) letterPath
%
% n-thin_join.ps
%
0.5 vertSplitLine pathLineIntc sortByY lastElt /nTop defPoint
nTop pointbox

flattenpath


{ nTop startAtPoint { 179 lt } endBeforeAngle } traceSubpath
subpathEndpoint /nJoin defPoint

0.5 horizSplitLine pathLineIntc sortByX 1 2 getinterval loadArray
/nInRight defPoint /nInLeft defPoint
nInRight pointbox nInLeft pointbox

{ nInLeft startAtPoint nInRight endAtPoint } traceSubpath
drawSubpath
cvlit /nInSubpath exch def

/thinJoin 1000 def

290 5 340 {
    dup cos exch sin 300 scalePoint nJoin addPoint /nAngleEnd defPoint
    nInSubpath { nAngleEnd nJoin pathLineIntc } useSubpath
    dup length 0 gt {
	sortByX firstElt loadArray nJoin subPoint magnitude
	dup thinJoin lt {
	    /thinJoin exch def
	} { pop } ifelse
    } {
	pop
    } ifelse
} for

(Thin join) thinJoin stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 59 59
resetPage
gsave 20 dict begin
/CurrentFile (o-curve-alt) def
/CurrentLetter (o) def
(o) letterPath
%
% O-curve-alt.ps
%
pathLL /oBot exch def /oLeft exch def
pathUR /oTop exch def /oRight exch def

/oCurve 0 def

oBot oTop oBot sub 30 div oTop {
    dup oBot sub oTop exch sub oRight exch 3 -1 roll oLeft exch
    pathLineIntc sortByX revArray dup length 4 ge {
	dup firstElt /oOuter defPoint 1 get /oInner defPoint
	oOuter ltpointbox oInner rtpointbox
	oOuter oInner subPoint magnitude oCurve gt {
	    /oCurve oOuter oInner subPoint magnitude def
	} if
    } {
	pop
    } ifelse
} for

(Lowercase curve \(alt\)) oCurve stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 60 60
resetPage
gsave 20 dict begin
/CurrentFile (o-curve) def
/CurrentLetter (o) def
(o) letterPath
%
% O-curve.ps
%

pathLL /oBot exch def /oLeft exch def
pathUR /oTop exch def /oRight exch def

/oCurve 0 def

oBot oTop oBot sub 30 div oTop {
    dup oBot sub oTop exch sub oRight exch 3 -1 roll oLeft exch
    pathLineIntc sortByX dup length 4 ge {
	dup firstElt /oOuter defPoint 1 get /oInner defPoint
	oOuter ltpointbox oInner rtpointbox
	oOuter oInner subPoint magnitude oCurve gt {
	    /oCurve oOuter oInner subPoint magnitude def
	} if
    } {
	pop
    } ifelse
} for

(Lowercase curve) oCurve stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 61 61
resetPage
gsave 20 dict begin
/CurrentFile (o-o) def
/CurrentLetter (o) def
(o) letterPath
%
% o-overshoot.ps
%
measureDepth /oDepth exch def

0 drawHorizLine

(Bottom lowercase overshoot) oDepth 2 mul stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 62 62
resetPage
gsave 20 dict begin
/CurrentFile (o-superness) def
/CurrentLetter (o) def
(o) letterPath
%
% o-superness.ps
%

pathExtremes /OExtremes exch def

OExtremes sortByX firstElt /OLeft defPoint
OExtremes sortByX lastElt /ORight defPoint
OExtremes sortByY firstElt /OBot defPoint
OExtremes sortByY lastElt /OTop defPoint

OBot OLeft true findSupernessPoints findSuperness
(Superness, O bottom left) exch stringOfText

OTop OLeft true findSupernessPoints findSuperness
(Superness, O top left) exch stringOfText

OBot ORight true findSupernessPoints findSuperness
(Superness, O bottom right) exch stringOfText

OTop ORight true findSupernessPoints findSuperness
(Superness, O bottom right) exch stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 63 63
resetPage
gsave 20 dict begin
/CurrentFile (o-u) def
/CurrentLetter (o) def
(o) letterPath
%
% n-u.ps
%
% Unit is 1/10 width of "n".
%
pathExtremes sortByX dup firstElt /oLeft defPoint lastElt /oRight defPoint
(Unit based on o) oRight xcoor oLeft xcoor sub 7.5 div stringOfText

count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 64 64
resetPage
gsave 20 dict begin
/CurrentFile (o-vair) def
/CurrentLetter (o) def
(o) letterPath
%
% o-vair-alt.ps
%
pathLL /oBot exch def /oLeft exch def
pathUR /oTop exch def /oRight exch def
/pathMidHt oBot oTop add 2 div def

/oVair 1000 def

oLeft oRight oLeft sub 20 div oRight {
    0 vertLineThrough pathLineIntc sortByY dup length 0 gt {
	lastElt /curPoint defPoint
	curPoint curPoint pathAngle pop perpThroughPoint
	pathLineIntc dup length 2 ge {
	    sortByY revArray 1 get /curInside defPoint
	    curPoint uppointbox curInside pointbox
	    curPoint curInside subPoint magnitude oVair lt {
		/oVair curPoint curInside subPoint magnitude def
	    } if
	} {
	    pop
	} ifelse
    } {
	pop
    } ifelse
} for

(Lowercase vair \(alt\)) oVair stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 65 65
resetPage
gsave 20 dict begin
/CurrentFile (o-vair_corr) def
/CurrentLetter (o) def
(o) letterPath
%
% o-vair_corr.ps
%
pathLL /oBot exch def /oLeft exch def
pathUR /oTop exch def /oRight exch def
/pathMidHt oBot oTop add 2 div def

/oVair 1000 def
/oBotVair 1000 def

oLeft oRight oLeft sub 20 div oRight {
    0 vertLineThrough pathLineIntc sortByY dup length 1 gt {
	dup lastElt /curPoint defPoint firstElt /curBot defPoint
	curPoint curPoint pathAngle pop perpThroughPoint
	pathLineIntc dup length 2 ge {
	    sortByY revArray 1 get /curInside defPoint
	    curPoint uppointbox curInside pointbox
	    curPoint curInside subPoint magnitude oVair lt {
		/oVair curPoint curInside subPoint magnitude def
	    } if
	} {
	    pop
	} ifelse
	curBot curBot pathAngle pop perpThroughPoint
	pathLineIntc dup length 2 ge {
	    sortByY 1 get /curBotInside defPoint
	    curBot pointbox curBotInside uppointbox
	    curBot curBotInside subPoint magnitude oBotVair lt {
		/oBotVair curBot curBotInside subPoint magnitude def
	    } if
	} {
	    pop
	} ifelse
    } {
	pop
    } ifelse
} for

(Lowercase vair_corr) oBotVair oVair sub 0 max stringOfText

count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 66 66
resetPage
gsave 20 dict begin
/CurrentFile (q-desc_depth) def
/CurrentLetter (q) def
(q) letterPath
%
% q-desc.ps
%
% Measures descender of "q".
%

(desc_depth)
measureDepth
stringOfText

count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 67 67
resetPage
gsave 20 dict begin
/CurrentFile (r-flare) def
/CurrentLetter (r) def
(r) letterPath
%
% r-flare.ps
%
% Flare of tip of lowercase "r".
%

% The old algorithm wasn't robust enough.
%flattenpath
%0.3 horizSplitLine pathLineIntc sortByX lastElt /rStemRight defPoint
%rStemRight pointbox
%{ rStemRight startAtPoint { 270 gt } endWhenAngle } traceSubpath
%subpathEndpoint /rInnerCurveTop defPoint
%{ rInnerCurveTop startAtPoint { 90 lt } endWhenAngle } traceSubpath
%drawSubpath
%{ pathExtremes } useSubpath sortByY firstElt /rFlareBot defPoint
%rFlareBot pointbox
%rFlareBot vertLineThrough pathLineIntc sortByY lastElt /rFlareTop defPoint
%rFlareTop uppointbox
%
%(Flare of tip)
%rFlareTop ycoor rFlareBot ycoor sub
%stringOfText

0.3 horizSplitLine pathLineIntc sortByX 1 get /rStemRight defPoint
rStemRight xcoor 20 add /rArcLeft exch def

pathExtremes sortByY lastElt /rTopPoint defPoint

{ rStemRight startAtPoint rTopPoint endAtPoint } traceSubpath
drawSubpath
{ pathExtremes } useSubpath sortByX lastElt xcoor 5 sub /rArcRight exch def

/rFlareBBox { rArcLeft pathLL ycoor rArcRight pathUR ycoor } def

mark
rArcLeft
rArcRight rArcLeft sub 20 div
/rFlare 0 def
rArcRight {
    0 vertLineThrough pathLineIntc sortByY lastElt /rTopPt defPoint
    rFlareBBox rTopPt rTopPt pathAngle pop 90 add boundedLine
    pathLineIntc sortByY revArray
    dup length 2 ge {
	0 2 getinterval loadArray /pt1 defPoint /pt2 defPoint
	    pt1 pointbox pt2 pointbox
	pt1 pt2 subPoint magnitude
	dup rFlare gt {
	    /rFlare exch def
	} if
    } if
} for
cleartomark

(Flare of tip) rFlare stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 68 68
resetPage
gsave 20 dict begin
/CurrentFile (s-ess) def
/CurrentLetter (s) def
(s) letterPath
%
% s-ess.ps
%
0.5 vertSplitLine
pathLineIntc sortByY
2 2 getinterval loadArray
/sTopPoint defPoint /sBotPoint defPoint
sTopPoint pathAngle pop 90 add
dup cos exch sin 500 scalePoint sTopPoint addPoint
sTopPoint pathLineIntc sortByY
% Check if the last element is actually sTopPoint
dup lastElt loadArray sTopPoint 5 eqPoint {
    % If so, get the second to last one.
    revArray 1 get
} {
    lastElt
} ifelse
/sTopPerpPoint defPoint
sTopPerpPoint pointbox

(Lowercase ess) sTopPoint sTopPerpPoint subPoint magnitude stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 69 69
resetPage
gsave 20 dict begin
/CurrentFile (t-bar) def
/CurrentLetter (t) def
(t) letterPath
%
% t-bar.ps
%
0.5 horizSplitLine pathLineIntc sortByX 1 get loadArray
20 0 addPoint vertLineThrough pathLineIntc sortByY revArray
0 2 getinterval loadArray
/tBarBot defPoint /tBarTop defPoint
tBarBot pointbox tBarTop uppointbox

(Bar thickness)
tBarTop ycoor tBarBot ycoor sub
stringOfText


count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 70 70
resetPage
gsave 20 dict begin
/CurrentFile (v-hair) def
/CurrentLetter (v) def
(v) letterPath
%
% v-hair.ps
%
% Hair width of v.
%
0.5 horizSplitLine pathLineIntc
sortByX 3 get loadArray
2 copy pathAngle {
    perpThroughPoint
	resetIntc
    pathLineIntc sortByX revArray
    0 2 getinterval { 2 copy pointbox } forallPoint
    subPoint magnitude
    (Lowercase hair) exch stringOfText
} {
    pop pop
} ifelse


count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 71 71
resetPage
gsave 20 dict begin
/CurrentFile (v-stem) def
/CurrentLetter (v) def
(v) letterPath
%
% v-stem.ps
%
0.5 horizSplitLine pathLineIntc
sortByX 0 get loadArray
2 copy pathAngle {
    perpThroughPoint
	resetIntc
    pathLineIntc sortByX
    0 2 getinterval { 2 copy pointbox } forallPoint
    subPoint magnitude
    (Lowercase stem (thinned)) exch stringOfText
} {
    pop pop
} ifelse
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 72 72
resetPage
gsave 20 dict begin
/CurrentFile (v-tiny) def
/CurrentLetter (v) def
(v) letterPath
%
% v-tiny.ps
%
0.06 horizSplitLine pathLineIntc sortByX dup
firstElt /vLStrokeOne defPoint lastElt /vRStrokeOne defPoint
0.03 horizSplitLine pathLineIntc sortByX dup
firstElt /vLStrokeTwo defPoint lastElt /vRStrokeTwo defPoint

/leftDiagLine {
    vLStrokeTwo vLStrokeOne subPoint 1000 scalePoint vLStrokeTwo addPoint
    vLStrokeOne 
} def
/rightDiagLine {
    vRStrokeTwo vRStrokeOne subPoint 1000 scalePoint vRStrokeTwo addPoint
    vRStrokeOne
} def
/bottomLine {
    pathLL horizLineThrough
} def

mark
leftDiagLine drawLine
rightDiagLine drawLine
bottomLine drawLine
cleartomark

leftDiagLine bottomLine
intersect pop % Assert true
/vStrokeCorner defPoint
vStrokeCorner pointbox

% What is the angle of each of the lines? Then we can draw the angle bisector.
/vLAngle leftDiagLine lineAngle def
/vRAngle bottomLine lineAngle def

% This calculates the angle of the angle bisector line
vLAngle vRAngle sub 2 div vRAngle add

% Make a line of this angle through the V's corner
dup cos exch sin /vBisectorOffset defPoint
vBisectorOffset 1000 scalePoint vStrokeCorner addPoint
vBisectorOffset -100 scalePoint vStrokeCorner addPoint

pathLineIntc dup length 0 gt {
    sortByY firstElt /vCorner defPoint
    vCorner uppointbox
    vStrokeCorner vCorner vLAngle vRAngle sub penDiameter
} {
    pop 0
} ifelse

(Curvature of v apex) exch stringOfText
count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Page: 73 73
resetPage
gsave 20 dict begin
/CurrentFile (x-x_height) def
/CurrentLetter (x) def
(x) letterPath
%
% x-height.ps
%
% x height.
%
(x_height) measureHeight stringOfText

count 0 gt { (There's stuff on the stack!) == } if
end grestore
showpage
%%Trailer
%%Pages: 73
%%EOF
